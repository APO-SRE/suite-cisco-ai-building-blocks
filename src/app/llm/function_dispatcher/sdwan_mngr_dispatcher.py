# app/llm/function_dispatcher/sdwan_mngr_dispatcher.py
import os
from typing import Any
from app.llm.function_dispatcher import register
from app.llm.platform_clients.sdwan_mngr_client import Sdwan_mngrClient

@register('getSecureXAccessToken')
def getSecureXAccessToken(clientId: str, regionBaseUri: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if clientId is not None:
        final_kwargs['clientId'] = clientId
    if regionBaseUri is not None:
        final_kwargs['regionBaseUri'] = regionBaseUri

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSecureXAccessToken

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAaaConfig')
def getAaaConfig():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAaaConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listenAuthEvents')
def listenAuthEvents(sseSessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sseSessionId is not None:
        final_kwargs['sseSessionId'] = sseSessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listenAuthEvents

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRadiusConfig')
def getRadiusConfig():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRadiusConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTacacsConfig')
def getTacacsConfig():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTacacsConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('findUsers_1')
def findUsers_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findUsers_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['findUsers_1'])

# alias for findUsers_1 -> user_list
register('user_list')(globals()['findUsers_1'])

# alias for findUsers_1 -> users
register('users')(globals()['findUsers_1'])

# alias for findUsers_1 -> show_users
register('show_users')(globals()['findUsers_1'])

# alias for findUsers_1 -> get_users
register('get_users')(globals()['findUsers_1'])

@register('getActiveSessions_1')
def getActiveSessions_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getActiveSessions_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getActiveSessions_1'])

@register('findUserRole_1')
def findUserRole_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findUserRole_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['findUserRole_1'])

@register('findUserAuthType_1')
def findUserAuthType_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findUserAuthType_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['findUserAuthType_1'])

@register('findUserGroups')
def findUserGroups():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findUserGroups

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createGroupGridColumns')
def createGroupGridColumns():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createGroupGridColumns

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('findUserGroupsAsKeyValue')
def findUserGroupsAsKeyValue():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findUserGroupsAsKeyValue

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVpnGroups')
def getVpnGroups():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVpnGroups

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRawAlarmData')
def getRawAlarmData(query: str = None, site_id: str = None, includeTenants: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if site_id is not None:
        final_kwargs['site-id'] = site_id
    if includeTenants is not None:
        final_kwargs['includeTenants'] = includeTenants

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRawAlarmData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias for getRawAlarmData -> alarms
register('alarms')(globals()['getRawAlarmData'])

# alias for getRawAlarmData -> alarm_list
register('alarm_list')(globals()['getRawAlarmData'])

# alias for getRawAlarmData -> get_alarms
register('get_alarms')(globals()['getRawAlarmData'])

# alias for getRawAlarmData -> show_alarms
register('show_alarms')(globals()['getRawAlarmData'])

@register('getAggregationData')
def getAggregationData(query: str, site_id: str = None, includeTenants: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if site_id is not None:
        final_kwargs['site-id'] = site_id
    if includeTenants is not None:
        final_kwargs['includeTenants'] = includeTenants

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNonViewedActiveAlarmsCount')
def getNonViewedActiveAlarmsCount(includeTenants: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if includeTenants is not None:
        final_kwargs['includeTenants'] = includeTenants

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNonViewedActiveAlarmsCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listDisabledAlarm')
def listDisabledAlarm():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listDisabledAlarm

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDocCount')
def getDocCount(query: str, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDocCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAlarmDataFields')
def getAlarmDataFields():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAlarmDataFields

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLinkStateAlarmConfig')
def getLinkStateAlarmConfig():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLinkStateAlarmConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMasterManagerState')
def getMasterManagerState():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMasterManagerState

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNonViewedAlarms')
def getNonViewedAlarms(state: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNonViewedAlarms

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPage')
def getPage(query: str = None, scrollId: str = None, count: int = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPage

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('setPeriodicPurgeTimer')
def setPeriodicPurgeTimer(interval: str = None, activeTime: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interval is not None:
        final_kwargs['interval'] = interval
    if activeTime is not None:
        final_kwargs['activeTime'] = activeTime

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.setPeriodicPurgeTimer

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAlarmQueryFields')
def getAlarmQueryFields():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAlarmQueryFields

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFieldDetails')
def getFieldDetails():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFieldDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('reset')
def reset():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.reset

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('restartCorrelationEngine')
def restartCorrelationEngine():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.restartCorrelationEngine

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAlarmTypesAsKeyValue')
def getAlarmTypesAsKeyValue():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAlarmTypesAsKeyValue

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getBySeverity')
def getBySeverity(severity_level: list, deviceId: list = None, query: str = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if severity_level is not None:
        final_kwargs['severity-level'] = severity_level
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if query is not None:
        final_kwargs['query'] = query
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBySeverity

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAlarmSeverityCustomHistogram')
def getAlarmSeverityCustomHistogram(query: str, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAlarmSeverityCustomHistogram

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAlarmSeverityMappings')
def getAlarmSeverityMappings():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAlarmSeverityMappings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStats')
def getStats():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceTopic')
def getDeviceTopic(ip: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if ip is not None:
        final_kwargs['ip'] = ip

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceTopic

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAlarmDetails')
def getAlarmDetails(alarm_uuid: str, includeTenants: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if alarm_uuid is not None:
        final_kwargs['alarm_uuid'] = alarm_uuid
    if includeTenants is not None:
        final_kwargs['includeTenants'] = includeTenants

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAlarmDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllAppList')
def getAllAppList(filterAttributeType: str = None, filterAttributeValue: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if filterAttributeType is not None:
        final_kwargs['filterAttributeType'] = filterAttributeType
    if filterAttributeValue is not None:
        final_kwargs['filterAttributeValue'] = filterAttributeValue

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllAppList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppListCategory')
def getAppListCategory():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppListCategory

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNetworkDiscoveredApps')
def getNetworkDiscoveredApps():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNetworkDiscoveredApps

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAttributeMappingForApps')
def getAttributeMappingForApps():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAttributeMappingForApps

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getKubernetesServices')
def getKubernetesServices(isCached: bool = None, offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isCached is not None:
        final_kwargs['isCached'] = isCached
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getKubernetesServices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppByUuid')
def getAppByUuid(app_uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if app_uuid is not None:
        final_kwargs['app-uuid'] = app_uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppByUuid

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppList')
def getAppList(trafficClass: str = None, businessRelevance: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if trafficClass is not None:
        final_kwargs['trafficClass'] = trafficClass
    if businessRelevance is not None:
        final_kwargs['businessRelevance'] = businessRelevance

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getKubernetesCluster')
def getKubernetesCluster(isCached: bool = None, offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isCached is not None:
        final_kwargs['isCached'] = isCached
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getKubernetesCluster

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getActiveSaasFeeds')
def getActiveSaasFeeds():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getActiveSaasFeeds

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllSaasFeedForSelectedApp')
def getAllSaasFeedForSelectedApp(feedId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if feedId is not None:
        final_kwargs['feedId'] = feedId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllSaasFeedForSelectedApp

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawAuditLogData')
def getStatDataRawAuditLogData(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawAuditLogData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPropertyAggregationData')
def getPropertyAggregationData(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPropertyAggregationData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCount')
def getCount(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataFields')
def getStatDataFields():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatBulkRawPropertyData')
def getStatBulkRawPropertyData(query: str, count: int, scrollId: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatBulkRawPropertyData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatQueryFields')
def getStatQueryFields():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateAuditLog')
def generateAuditLog(query: str, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateAuditLog

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAuditSeverityCustomHistogram')
def getAuditSeverityCustomHistogram(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAuditSeverityCustomHistogram

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLocalBackupInfo')
def getLocalBackupInfo(localBackupInfoId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if localBackupInfoId is not None:
        final_kwargs['localBackupInfoId'] = localBackupInfoId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLocalBackupInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('downloadBackupFile')
def downloadBackupFile(path: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if path is not None:
        final_kwargs['path'] = path

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.downloadBackupFile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listBackup')
def listBackup(size: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if size is not None:
        final_kwargs['size'] = size

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listBackup

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCdnaSenseService')
def getCdnaSenseService(tag: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if tag is not None:
        final_kwargs['tag'] = tag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCdnaSenseService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCdnaServer')
def getCdnaServer():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCdnaServer

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getControllerCertStatus')
def getControllerCertStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getControllerCertStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCSRViewRightMenus')
def getCSRViewRightMenus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCSRViewRightMenus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceViewRightMenus')
def getDeviceViewRightMenus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceViewRightMenus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDevicesList')
def getDevicesList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDevicesList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getListStatus')
def getListStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('setvSmartMtHubList')
def setvSmartMtHubList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.setvSmartMtHubList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getQuarantineBanner')
def getQuarantineBanner():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getQuarantineBanner

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCertificateData')
def getCertificateData(requestID: str = None, dataObject: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if requestID is not None:
        final_kwargs['requestID'] = requestID
    if dataObject is not None:
        final_kwargs['dataObject'] = dataObject

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCertificateData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRootCertChains')
def getRootCertChains(action: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if action is not None:
        final_kwargs['action'] = action

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRootCertChains

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRootCertificate')
def getRootCertificate():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRootCertificate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('rsaKeyLength2048ForAllDevices')
def rsaKeyLength2048ForAllDevices():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.rsaKeyLength2048ForAllDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCertificateDetail')
def getCertificateDetail(status: str = None, includeTenantvSmart: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if status is not None:
        final_kwargs['status'] = status
    if includeTenantvSmart is not None:
        final_kwargs['includeTenantvSmart'] = includeTenantvSmart

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCertificateDetail

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCertificateStats')
def getCertificateStats():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCertificateStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('syncvBond')
def syncvBond():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.syncvBond

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTokenList')
def getTokenList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTokenList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInstalledCert')
def getInstalledCert(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInstalledCert

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getvEdgeCSR')
def getvEdgeCSR(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getvEdgeCSR

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getvEdgeList')
def getvEdgeList(state: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getvEdgeList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getView')
def getView():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getView

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSelfSignedCert')
def getSelfSignedCert():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSelfSignedCert

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getvSmartList')
def getvSmartList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getvSmartList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createServerInfo')
def createServerInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createServerInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCsrfToken')
def getCsrfToken(json: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if json is not None:
        final_kwargs['json'] = json

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCsrfToken

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAccessTokenforDevice')
def getAccessTokenforDevice():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAccessTokenforDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('connect')
def connect():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.connect

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudCredentials')
def getCloudCredentials():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudCredentials

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('isStaging')
def isStaging():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.isStaging

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTelemetryState')
def getTelemetryState():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTelemetryState

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getvAnalyticsDashboardList')
def getvAnalyticsDashboardList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getvAnalyticsDashboardList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('checkIfClusterLocked')
def checkIfClusterLocked():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.checkIfClusterLocked

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getClusterWorkflowVersion')
def getClusterWorkflowVersion():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getClusterWorkflowVersion

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConnectedDevices')
def getConnectedDevices(vmanageIP: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vmanageIP is not None:
        final_kwargs['vmanageIP'] = vmanageIP

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConnectedDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('healthDetails')
def healthDetails():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.healthDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('healthStatusInfo')
def healthStatusInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.healthStatusInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('healthSummary')
def healthSummary(isCached: bool = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isCached is not None:
        final_kwargs['isCached'] = isCached
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.healthSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('hostHealthStatus')
def hostHealthStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.hostHealthStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConfiguredIPList')
def getConfiguredIPList(vmanageID: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vmanageID is not None:
        final_kwargs['vmanageID'] = vmanageID

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConfiguredIPList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('isClusterReady')
def isClusterReady():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.isClusterReady

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listVmanages')
def listVmanages():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listVmanages

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('nodeProperties')
def nodeProperties():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.nodeProperties

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTenancyMode')
def getTenancyMode():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTenancyMode

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTenantsList')
def getTenantsList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTenantsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVManageDetails')
def getVManageDetails(vmanageIP: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vmanageIP is not None:
        final_kwargs['vmanageIP'] = vmanageIP

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVManageDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConnectedDevicesPerTenant')
def getConnectedDevicesPerTenant(tenantId: str, vmanageIP: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if tenantId is not None:
        final_kwargs['tenantId'] = tenantId
    if vmanageIP is not None:
        final_kwargs['vmanageIP'] = vmanageIP

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConnectedDevicesPerTenant

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getvnfByDeviceId')
def getvnfByDeviceId(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getvnfByDeviceId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVNFEventsCountDetail')
def getVNFEventsCountDetail(user_group: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if user_group is not None:
        final_kwargs['user_group'] = user_group

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVNFEventsCountDetail

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVNFAlarmCount')
def getVNFAlarmCount(user_group: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if user_group is not None:
        final_kwargs['user_group'] = user_group

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVNFAlarmCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVNFEventsDetail')
def getVNFEventsDetail(vnfName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vnfName is not None:
        final_kwargs['vnfName'] = vnfName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVNFEventsDetail

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVNFInterfaceDetail')
def getVNFInterfaceDetail(vnfName: str, deviceIp: str = None, deviceClass: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vnfName is not None:
        final_kwargs['vnfName'] = vnfName
    if deviceIp is not None:
        final_kwargs['deviceIp'] = deviceIp
    if deviceClass is not None:
        final_kwargs['deviceClass'] = deviceClass

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVNFInterfaceDetail

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('doesValidImageExist')
def doesValidImageExist(containerName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if containerName is not None:
        final_kwargs['containerName'] = containerName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.doesValidImageExist

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getContainerInspectData')
def getContainerInspectData(containerName: str, hostIp: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if containerName is not None:
        final_kwargs['containerName'] = containerName
    if hostIp is not None:
        final_kwargs['hostIp'] = hostIp

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getContainerInspectData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getContainerSettings')
def getContainerSettings(containerName: str, hostIp: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if containerName is not None:
        final_kwargs['containerName'] = containerName
    if hostIp is not None:
        final_kwargs['hostIp'] = hostIp

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getContainerSettings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateDeviceStateData')
def generateDeviceStateData(state_data_type: str, startId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state_data_type is not None:
        final_kwargs['state_data_type'] = state_data_type
    if startId is not None:
        final_kwargs['startId'] = startId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateDeviceStateData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateDeviceStateDataFields')
def generateDeviceStateDataFields(state_data_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state_data_type is not None:
        final_kwargs['state_data_type'] = state_data_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateDeviceStateDataFields

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateDeviceStateDataWithQueryString')
def generateDeviceStateDataWithQueryString(state_data_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state_data_type is not None:
        final_kwargs['state_data_type'] = state_data_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateDeviceStateDataWithQueryString

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatisticsType')
def getStatisticsType():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatisticsType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getActiveAlarms')
def getActiveAlarms(scrollId: str = None, startDate: str = None, endDate: str = None, count: int = None, timeZone: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if startDate is not None:
        final_kwargs['startDate'] = startDate
    if endDate is not None:
        final_kwargs['endDate'] = endDate
    if count is not None:
        final_kwargs['count'] = count
    if timeZone is not None:
        final_kwargs['timeZone'] = timeZone

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getActiveAlarms

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateDeviceStatisticsData')
def generateDeviceStatisticsData(state_data_type: str, scrollId: str = None, startDate: str = None, endDate: str = None, count: int = None, timeZone: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state_data_type is not None:
        final_kwargs['state_data_type'] = state_data_type
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if startDate is not None:
        final_kwargs['startDate'] = startDate
    if endDate is not None:
        final_kwargs['endDate'] = endDate
    if count is not None:
        final_kwargs['count'] = count
    if timeZone is not None:
        final_kwargs['timeZone'] = timeZone

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateDeviceStatisticsData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCountWithStateDataType')
def getCountWithStateDataType(state_data_type: str, startDate: str, endDate: str, timeZone: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state_data_type is not None:
        final_kwargs['state_data_type'] = state_data_type
    if startDate is not None:
        final_kwargs['startDate'] = startDate
    if endDate is not None:
        final_kwargs['endDate'] = endDate
    if timeZone is not None:
        final_kwargs['timeZone'] = timeZone

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCountWithStateDataType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataFieldsByStateDataType')
def getStatDataFieldsByStateDataType(state_data_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state_data_type is not None:
        final_kwargs['state_data_type'] = state_data_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFieldsByStateDataType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudSettings')
def getCloudSettings():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudSettings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAccessToken')
def getAccessToken():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAccessToken

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getIdToken')
def getIdToken():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getIdToken

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getOTP')
def getOTP():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getOTP

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTelemetrySettings')
def getTelemetrySettings():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTelemetrySettings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDCATenantOwners')
def getDCATenantOwners():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDCATenantOwners

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCrashLogsSynced')
def getCrashLogsSynced(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCrashLogsSynced

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudServicesConfigurationDCA')
def getCloudServicesConfigurationDCA():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudServicesConfigurationDCA

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listAllDevices')
def listAllDevices(site_id: str = None, includeTenantvSmart: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if site_id is not None:
        final_kwargs['site-id'] = site_id
    if includeTenantvSmart is not None:
        final_kwargs['includeTenantvSmart'] = includeTenantvSmart

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listAllDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias for listAllDevices -> devices
register('devices')(globals()['listAllDevices'])

# alias for listAllDevices -> show_devices
register('show_devices')(globals()['listAllDevices'])

# alias for listAllDevices -> device_list
register('device_list')(globals()['listAllDevices'])

# alias for listAllDevices -> get_devices
register('get_devices')(globals()['listAllDevices'])

@register('getAAAservers')
def getAAAservers(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAAAservers

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAAAUsers')
def getAAAUsers(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAAAUsers

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getACLMatchCounterUsers')
def getACLMatchCounterUsers(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getACLMatchCounterUsers

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateChangePartitionInfo')
def generateChangePartitionInfo(deviceId: list):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateChangePartitionInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateDeactivateInfo')
def generateDeactivateInfo(deviceId: list):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateDeactivateInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createFilterVPNList')
def createFilterVPNList(site_id: str = None, deviceId: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if site_id is not None:
        final_kwargs['site-id'] = site_id
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createFilterVPNList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFirmwareImages')
def getFirmwareImages():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFirmwareImages

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFirmwareDevices')
def getFirmwareDevices():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFirmwareDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFirmwareRemoteImage')
def getFirmwareRemoteImage():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFirmwareRemoteImage

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDevicesFWUpgrade')
def getDevicesFWUpgrade():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDevicesFWUpgrade

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFirmwareImageDetails')
def getFirmwareImageDetails(versionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if versionId is not None:
        final_kwargs['versionId'] = versionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFirmwareImageDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateInstallInfo')
def generateInstallInfo(deviceId: list):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateInstallInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateDeviceList')
def generateDeviceList(deviceType: str, groupId: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceType is not None:
        final_kwargs['deviceType'] = deviceType
    if groupId is not None:
        final_kwargs['groupId'] = groupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateDeviceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateDeviceActionList')
def generateDeviceActionList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateDeviceActionList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateRebootInfo')
def generateRebootInfo(deviceId: list):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateRebootInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateRebootDeviceList')
def generateRebootDeviceList(deviceType: str, groupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceType is not None:
        final_kwargs['deviceType'] = deviceType
    if groupId is not None:
        final_kwargs['groupId'] = groupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateRebootDeviceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateRediscoverInfo')
def generateRediscoverInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateRediscoverInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRemoteServerList')
def getRemoteServerList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRemoteServerList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRemoteServerById')
def getRemoteServerById(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRemoteServerById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateRemovePartitionInfo')
def generateRemovePartitionInfo(deviceId: list = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateRemovePartitionInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('testApiKey')
def testApiKey(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.testApiKey

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateSecurityDevicesList')
def generateSecurityDevicesList(policyType: str, groupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyType is not None:
        final_kwargs['policyType'] = policyType
    if groupId is not None:
        final_kwargs['groupId'] = groupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateSecurityDevicesList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('findSoftwareImages')
def findSoftwareImages():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findSoftwareImages

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getImageProperties')
def getImageProperties(versionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if versionId is not None:
        final_kwargs['versionId'] = versionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getImageProperties

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('findSoftwareImagesWithFilters')
def findSoftwareImagesWithFilters(imageType: list, vnfType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if imageType is not None:
        final_kwargs['imageType'] = imageType
    if vnfType is not None:
        final_kwargs['vnfType'] = vnfType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findSoftwareImagesWithFilters

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUploadImagesCount')
def getUploadImagesCount(imageType: list = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if imageType is not None:
        final_kwargs['imageType'] = imageType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUploadImagesCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateUtdImageData')
def generateUtdImageData(utdsignature: str, type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if utdsignature is not None:
        final_kwargs['utdsignature'] = utdsignature
    if type is not None:
        final_kwargs['type'] = type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateUtdImageData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('downloadPackageFile')
def downloadPackageFile(fileName: str, imageType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if fileName is not None:
        final_kwargs['fileName'] = fileName
    if imageType is not None:
        final_kwargs['imageType'] = imageType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.downloadPackageFile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getImageMetadata')
def getImageMetadata(versionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if versionId is not None:
        final_kwargs['versionId'] = versionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getImageMetadata

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getImageRemoteServer')
def getImageRemoteServer(versionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if versionId is not None:
        final_kwargs['versionId'] = versionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getImageRemoteServer

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('findVEdgeSoftwareVersion')
def findVEdgeSoftwareVersion():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findVEdgeSoftwareVersion

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('findSoftwareVersion')
def findSoftwareVersion():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findSoftwareVersion

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVnfProperties')
def getVnfProperties(versionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if versionId is not None:
        final_kwargs['versionId'] = versionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVnfProperties

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('findZtpSoftwareVersion')
def findZtpSoftwareVersion():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findZtpSoftwareVersion

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('triggerPendingTasksMonitoring')
def triggerPendingTasksMonitoring():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.triggerPendingTasksMonitoring

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('cleanStatus')
def cleanStatus(cleanStatus: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cleanStatus is not None:
        final_kwargs['cleanStatus'] = cleanStatus

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.cleanStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMaintenanceWindowFlag')
def getMaintenanceWindowFlag():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMaintenanceWindowFlag

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('findRunningTasks')
def findRunningTasks():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findRunningTasks

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getActiveTaskCount')
def getActiveTaskCount():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getActiveTaskCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCleanStatus')
def getCleanStatus(processId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if processId is not None:
        final_kwargs['processId'] = processId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCleanStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('findStatus')
def findStatus(processId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if processId is not None:
        final_kwargs['processId'] = processId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.findStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('testIoxConfig')
def testIoxConfig(deviceIP: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceIP is not None:
        final_kwargs['deviceIP'] = deviceIP

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.testIoxConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createVPNList')
def createVPNList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createVPNList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getZTPUpgradeConfig')
def getZTPUpgradeConfig():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getZTPUpgradeConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getZTPUpgradeConfigSetting')
def getZTPUpgradeConfigSetting():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getZTPUpgradeConfigSetting

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppHostingAttachedDevices')
def getAppHostingAttachedDevices(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppHostingAttachedDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppHostingDetails')
def getAppHostingDetails(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppHostingDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppHostingGuestRoutes')
def getAppHostingGuestRoutes(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppHostingGuestRoutes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppHostingNetworkDevices')
def getAppHostingNetworkDevices(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppHostingNetworkDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppHostingNetworkUtils')
def getAppHostingNetworkUtils(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppHostingNetworkUtils

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppHostingProcesses')
def getAppHostingProcesses(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppHostingProcesses

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppHostingStorageUtils')
def getAppHostingStorageUtils(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppHostingStorageUtils

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppHostingUtilization')
def getAppHostingUtilization(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppHostingUtilization

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAppRouteSlaClassList')
def createAppRouteSlaClassList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAppRouteSlaClassList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAppRouteStatisticsList')
def createAppRouteStatisticsList(deviceId: str, remote_system_ip: str = None, local_color: str = None, remote_color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if remote_system_ip is not None:
        final_kwargs['remote-system-ip'] = remote_system_ip
    if local_color is not None:
        final_kwargs['local-color'] = local_color
    if remote_color is not None:
        final_kwargs['remote-color'] = remote_color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAppRouteStatisticsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppLogFlowCount')
def getAppLogFlowCount(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppLogFlowCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppLogFlows')
def getAppLogFlows(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppLogFlows

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAppqoeActiveFlowIdDetails')
def createAppqoeActiveFlowIdDetails(flow_id: str, deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if flow_id is not None:
        final_kwargs['flow-id'] = flow_id
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAppqoeActiveFlowIdDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeHputStats')
def getAppqoeHputStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeHputStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeNatStats')
def getAppqoeNatStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeNatStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeRmResources')
def getAppqoeRmResources(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeRmResources

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeRMStats')
def getAppqoeRMStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeRMStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeServicesStatus')
def getAppqoeServicesStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeServicesStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeSppiPipeStats')
def getAppqoeSppiPipeStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeSppiPipeStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeSppiQueueStats')
def getAppqoeSppiQueueStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeSppiQueueStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeClusterSummary')
def getAppqoeClusterSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeClusterSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeErrorRecent')
def getAppqoeErrorRecent(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeErrorRecent

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAppqoeFlowIdExpiredDetails')
def createAppqoeFlowIdExpiredDetails(flow_id: str, deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if flow_id is not None:
        final_kwargs['flow-id'] = flow_id
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAppqoeFlowIdExpiredDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeFlowClosedError')
def getAppqoeFlowClosedError(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeFlowClosedError

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeExpired')
def getAppqoeExpired(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeExpired

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeServiceControllers')
def getAppqoeServiceControllers(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeServiceControllers

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppqoeStatus')
def getAppqoeStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppqoeStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAppqoeVpnIdList')
def createAppqoeVpnIdList(vpn_id: str, deviceId: str, client_ip: str = None, server_ip: str = None, server_port: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if client_ip is not None:
        final_kwargs['client-ip'] = client_ip
    if server_ip is not None:
        final_kwargs['server-ip'] = server_ip
    if server_port is not None:
        final_kwargs['server-port'] = server_port
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAppqoeVpnIdList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getARPInterface')
def getARPInterface(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getARPInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAutonomousSoftwareVersion')
def getAutonomousSoftwareVersion(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAutonomousSoftwareVersion

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createBFDHistoryList')
def createBFDHistoryList(deviceId: str, system_ip: str = None, color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if system_ip is not None:
        final_kwargs['system-ip'] = system_ip
    if color is not None:
        final_kwargs['color'] = color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createBFDHistoryList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createBFDLinkList')
def createBFDLinkList(state: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createBFDLinkList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createBFDSessions')
def createBFDSessions(deviceId: str, system_ip: str = None, color: str = None, local_color: str = None, region_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if system_ip is not None:
        final_kwargs['system-ip'] = system_ip
    if color is not None:
        final_kwargs['color'] = color
    if local_color is not None:
        final_kwargs['local-color'] = local_color
    if region_type is not None:
        final_kwargs['region-type'] = region_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createBFDSessions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getBFDSiteStateDetail')
def getBFDSiteStateDetail(state: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBFDSiteStateDetail

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getBFDSitesSummary')
def getBFDSitesSummary(vpnId: list, isCached: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isCached is not None:
        final_kwargs['isCached'] = isCached
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBFDSitesSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceBFDStateSummary')
def getDeviceBFDStateSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceBFDStateSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceBFDStateSummaryTloc')
def getDeviceBFDStateSummaryTloc(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceBFDStateSummaryTloc

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceTlocToIntfList')
def getDeviceTlocToIntfList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceTlocToIntfList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceBFDStatus')
def getDeviceBFDStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceBFDStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createBFDSummary')
def createBFDSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createBFDSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceBFDStatusSummary')
def getDeviceBFDStatusSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceBFDStatusSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSyncedBFDSession')
def createSyncedBFDSession(deviceId: str, system_ip: str = None, color: str = None, local_color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if system_ip is not None:
        final_kwargs['system-ip'] = system_ip
    if color is not None:
        final_kwargs['color'] = color
    if local_color is not None:
        final_kwargs['local-color'] = local_color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSyncedBFDSession

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createTLOCSummary')
def createTLOCSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createTLOCSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getBFDTlocStateDetail')
def getBFDTlocStateDetail(state: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBFDTlocStateDetail

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createBGPNeighborsList')
def createBGPNeighborsList(deviceId: str, vpn_id: str = None, peer_addr: str = None, as_arg: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if peer_addr is not None:
        final_kwargs['peer-addr'] = peer_addr
    if as_arg is not None:
        final_kwargs['as'] = as_arg
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createBGPNeighborsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createBGPRoutesList')
def createBGPRoutesList(deviceId: str, vpn_id: str = None, prefix: str = None, nexthop: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if prefix is not None:
        final_kwargs['prefix'] = prefix
    if nexthop is not None:
        final_kwargs['nexthop'] = nexthop
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createBGPRoutesList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createBGPSummary')
def createBGPSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createBGPSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getBridgeInterfaceList')
def getBridgeInterfaceList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBridgeInterfaceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getBridgeInterfaceMac')
def getBridgeInterfaceMac(deviceId: str, bridge_id: str = None, if_name: str = None, mac_address: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if bridge_id is not None:
        final_kwargs['bridge-id'] = bridge_id
    if if_name is not None:
        final_kwargs['if-name'] = if_name
    if mac_address is not None:
        final_kwargs['mac-address'] = mac_address
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBridgeInterfaceMac

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getBridgeInterfaceTable')
def getBridgeInterfaceTable(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBridgeInterfaceTable

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTenantsDevicesAndSites')
def getTenantsDevicesAndSites(tenant: list = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if tenant is not None:
        final_kwargs['tenant'] = tenant

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTenantsDevicesAndSites

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAppFwdCflowdFlowsList')
def createAppFwdCflowdFlowsList(deviceId: str, vpn_id: int = None, src_addr: str = None, dst_addr: str = None, app: str = None, family: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if src_addr is not None:
        final_kwargs['src-addr'] = src_addr
    if dst_addr is not None:
        final_kwargs['dst-addr'] = dst_addr
    if app is not None:
        final_kwargs['app'] = app
    if family is not None:
        final_kwargs['family'] = family

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAppFwdCflowdFlowsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAppFwdCflowdV6FlowsList')
def createAppFwdCflowdV6FlowsList(deviceId: str, vpn_id: int = None, src_addr: str = None, dst_addr: str = None, app: str = None, family: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if src_addr is not None:
        final_kwargs['src-addr'] = src_addr
    if dst_addr is not None:
        final_kwargs['dst-addr'] = dst_addr
    if app is not None:
        final_kwargs['app'] = app
    if family is not None:
        final_kwargs['family'] = family

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAppFwdCflowdV6FlowsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createCellularConnectionList')
def createCellularConnectionList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createCellularConnectionList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('cellularCountDashlet')
def cellularCountDashlet(type: str = None, lastNHours: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if lastNHours is not None:
        final_kwargs['lastNHours'] = lastNHours

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.cellularCountDashlet

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('dataUsage')
def dataUsage(lastNHours: str = None, drillDown: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if lastNHours is not None:
        final_kwargs['lastNHours'] = lastNHours
    if drillDown is not None:
        final_kwargs['drillDown'] = drillDown

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.dataUsage

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('cellularCountDashletDetails')
def cellularCountDashletDetails(lastNHours: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if lastNHours is not None:
        final_kwargs['lastNHours'] = lastNHours

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.cellularCountDashletDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createHardwareList')
def createHardwareList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createHardwareList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('cellularHealthDashlet')
def cellularHealthDashlet(type: str = None, lastNHours: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if lastNHours is not None:
        final_kwargs['lastNHours'] = lastNHours

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.cellularHealthDashlet

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createModemList')
def createModemList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createModemList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createNetworkList')
def createNetworkList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createNetworkList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createProfileList')
def createProfileList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createProfileList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createRadioList')
def createRadioList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createRadioList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSessionsList')
def createSessionsList(deviceId: str, if_name: str = None, ipv4_dns_pri: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if if_name is not None:
        final_kwargs['if-name'] = if_name
    if ipv4_dns_pri is not None:
        final_kwargs['ipv4-dns-pri'] = ipv4_dns_pri
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSessionsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCellularStatusList')
def getCellularStatusList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCellularStatusList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEiolteConnectionInfo')
def getEiolteConnectionInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEiolteConnectionInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEiolteHardwareInfo')
def getEiolteHardwareInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEiolteHardwareInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAONIpsecInterfaceCountersInfo')
def getAONIpsecInterfaceCountersInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAONIpsecInterfaceCountersInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAONIpsecInterfaceSessionnfo')
def getAONIpsecInterfaceSessionnfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAONIpsecInterfaceSessionnfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEiolteNetworkInfo')
def getEiolteNetworkInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEiolteNetworkInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEiolteRadioInfo')
def getEiolteRadioInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEiolteRadioInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEiolteSimInfo')
def getEiolteSimInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEiolteSimInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCflowdDPIDeviceFieldJSON')
def getCflowdDPIDeviceFieldJSON(isDeviceDashBoard: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isDeviceDashBoard is not None:
        final_kwargs['isDeviceDashBoard'] = isDeviceDashBoard

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCflowdDPIDeviceFieldJSON

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createCflowdCollectorList')
def createCflowdCollectorList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createCflowdCollectorList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCflowdDPIFieldJSON')
def getCflowdDPIFieldJSON(isDeviceDashBoard: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isDeviceDashBoard is not None:
        final_kwargs['isDeviceDashBoard'] = isDeviceDashBoard

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCflowdDPIFieldJSON

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createCflowCollectorList')
def createCflowCollectorList(deviceId: str, vpn_id: str = None, src_ip: str = None, dest_ip: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if src_ip is not None:
        final_kwargs['src-ip'] = src_ip
    if dest_ip is not None:
        final_kwargs['dest-ip'] = dest_ip
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createCflowCollectorList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createCflowdFlowsCountList')
def createCflowdFlowsCountList(deviceId: str, vpn_id: str = None, src_ip: str = None, dest_ip: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if src_ip is not None:
        final_kwargs['src-ip'] = src_ip
    if dest_ip is not None:
        final_kwargs['dest-ip'] = dest_ip
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createCflowdFlowsCountList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFnFCacheStats')
def getFnFCacheStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFnFCacheStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFnFExportClientStats')
def getFnFExportClientStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFnFExportClientStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFnFExportStats')
def getFnFExportStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFnFExportStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFnf')
def getFnf(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFnf

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFnFMonitorStats')
def getFnFMonitorStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFnFMonitorStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createCflowdStatistics')
def createCflowdStatistics(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createCflowdStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createCflowdTemplate')
def createCflowdTemplate(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createCflowdTemplate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMpDatabase')
def getMpDatabase(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMpDatabase

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMpLocalMep')
def getMpLocalMep(deviceId: str, domain: str = None, service: str = None, mep_id: float = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if domain is not None:
        final_kwargs['domain'] = domain
    if service is not None:
        final_kwargs['service'] = service
    if mep_id is not None:
        final_kwargs['mep-id'] = mep_id
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMpLocalMep

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMpLocalMip')
def getMpLocalMip(deviceId: str, level: float = None, port: str = None, svc_inst: float = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if level is not None:
        final_kwargs['level'] = level
    if port is not None:
        final_kwargs['port'] = port
    if svc_inst is not None:
        final_kwargs['svc-inst'] = svc_inst
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMpLocalMip

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMpRemoteMep')
def getMpRemoteMep(deviceId: str, domain: str = None, service: str = None, local_mep_id: float = None, remote_mep_id: float = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if domain is not None:
        final_kwargs['domain'] = domain
    if service is not None:
        final_kwargs['service'] = service
    if local_mep_id is not None:
        final_kwargs['local-mep-id'] = local_mep_id
    if remote_mep_id is not None:
        final_kwargs['remote-mep-id'] = remote_mep_id
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMpRemoteMep

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createApplicationsDetailList')
def createApplicationsDetailList(vpn_id: str = None, application: str = None, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if application is not None:
        final_kwargs['application'] = application
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createApplicationsDetailList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createApplicationsList')
def createApplicationsList(vpn_id: str = None, application: str = None, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if application is not None:
        final_kwargs['application'] = application
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createApplicationsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createGatewayExitsList')
def createGatewayExitsList(deviceId: str, vpn_id: str = None, application: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if application is not None:
        final_kwargs['application'] = application
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createGatewayExitsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createLbApplicationsList')
def createLbApplicationsList(vpn_id: str = None, application: str = None, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if application is not None:
        final_kwargs['application'] = application
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createLbApplicationsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createLocalExitsList')
def createLocalExitsList(deviceId: str, vpn_id: str = None, application: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if application is not None:
        final_kwargs['application'] = application
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createLocalExitsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getComplianceDetails')
def getComplianceDetails(offset: int = None, limit: int = None, deviceType: list = None, status: list = None, type: list = None, sort_by: str = None, order_by: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if deviceType is not None:
        final_kwargs['deviceType'] = deviceType
    if status is not None:
        final_kwargs['status'] = status
    if type is not None:
        final_kwargs['type'] = type
    if sort_by is not None:
        final_kwargs['sort_by'] = sort_by
    if order_by is not None:
        final_kwargs['order_by'] = order_by

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getComplianceDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getComplianceSummary')
def getComplianceSummary():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getComplianceSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceRunningConfig')
def getDeviceRunningConfig(deviceId: list):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceRunningConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceRunningConfigHTML')
def getDeviceRunningConfigHTML(deviceId: list):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceRunningConfigHTML

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceConfigurationCommitList')
def getDeviceConfigurationCommitList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceConfigurationCommitList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAffinityConfig')
def getAffinityConfig(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAffinityConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAffinityStatus')
def getAffinityStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAffinityStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createRealTimeConnectionList')
def createRealTimeConnectionList(deviceId: str, peer_type: str = None, system_ip: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if peer_type is not None:
        final_kwargs['peer-type'] = peer_type
    if system_ip is not None:
        final_kwargs['system-ip'] = system_ip
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createRealTimeConnectionList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createConnectionHistoryListRealTime')
def createConnectionHistoryListRealTime(deviceId: str, peer_type: str = None, system_ip: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if peer_type is not None:
        final_kwargs['peer-type'] = peer_type
    if system_ip is not None:
        final_kwargs['system-ip'] = system_ip
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createConnectionHistoryListRealTime

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createRealTimeConnectionList_1')
def createRealTimeConnectionList_1(deviceId: str, peer_type: str = None, system_ip: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if peer_type is not None:
        final_kwargs['peer-type'] = peer_type
    if system_ip is not None:
        final_kwargs['system-ip'] = system_ip
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createRealTimeConnectionList_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['createRealTimeConnectionList_1'])

@register('getTotalCountForDeviceStates')
def getTotalCountForDeviceStates(isCached: bool = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isCached is not None:
        final_kwargs['isCached'] = isCached
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTotalCountForDeviceStates

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createLinkList')
def createLinkList(state: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createLinkList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createLocalPropertiesListListRealTIme')
def createLocalPropertiesListListRealTIme(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createLocalPropertiesListListRealTIme

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('networkSummary')
def networkSummary(state: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.networkSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createRealTimeRegionConnectionList')
def createRealTimeRegionConnectionList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createRealTimeRegionConnectionList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConnectionStatistics')
def getConnectionStatistics(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConnectionStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLocalDeviceStatus')
def getLocalDeviceStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLocalDeviceStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createConnectionsSummary')
def createConnectionsSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createConnectionsSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceControlStatusSummary')
def getDeviceControlStatusSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceControlStatusSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSyncedConnectionList')
def createSyncedConnectionList(deviceId: str, peer_type: str = None, system_ip: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if peer_type is not None:
        final_kwargs['peer-type'] = peer_type
    if system_ip is not None:
        final_kwargs['system-ip'] = system_ip
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSyncedConnectionList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createLocalPropertiesSyncedList')
def createLocalPropertiesSyncedList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createLocalPropertiesSyncedList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createWanInterfaceSyncedList')
def createWanInterfaceSyncedList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createWanInterfaceSyncedList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createValidDevicesListRealTime')
def createValidDevicesListRealTime(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createValidDevicesListRealTime

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getValidVManageIdRealTime')
def getValidVManageIdRealTime(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getValidVManageIdRealTime

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createValidVSmartsListRealTime')
def createValidVSmartsListRealTime(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createValidVSmartsListRealTime

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createWanInterfaceListList')
def createWanInterfaceListList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createWanInterfaceListList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPortHopColor')
def getPortHopColor(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPortHopColor

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceCounters')
def getDeviceCounters():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceCounters

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceCrashLogs')
def getDeviceCrashLogs(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceCrashLogs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllDeviceCrashLogs')
def getAllDeviceCrashLogs():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllDeviceCrashLogs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceCrashInformation')
def getDeviceCrashInformation(deviceId: str, filename: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if filename is not None:
        final_kwargs['filename'] = filename

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceCrashInformation

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceCrashLogsSynced')
def getDeviceCrashLogsSynced(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceCrashLogsSynced

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDeviceContainersInfo')
def createDeviceContainersInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceContainersInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPnicStats')
def getPnicStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPnicStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPNICStatsFromDevice')
def getPNICStatsFromDevice(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPNICStatsFromDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRBACInterface')
def getRBACInterface(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRBACInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllocationInfo')
def getAllocationInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllocationInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCPUInfo')
def getCPUInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCPUInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVNFInfo')
def getVNFInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVNFInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDeviceSystemSettingNativeInfo')
def createDeviceSystemSettingNativeInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceSystemSettingNativeInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDeviceSystemProcessList')
def createDeviceSystemProcessList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceSystemProcessList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDeviceSystemSetting')
def createDeviceSystemSetting(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceSystemSetting

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDeviceSystemStatus')
def createDeviceSystemStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceSystemStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCtsPac')
def getCtsPac(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCtsPac

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceOnlyStatus')
def getDeviceOnlyStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceOnlyStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDHCPClient')
def getDHCPClient(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDHCPClient

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDHCPInterface')
def getDHCPInterface(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDHCPInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDHCPServer')
def getDHCPServer(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDHCPServer

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDHCPv6Interface')
def getDHCPv6Interface(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDHCPv6Interface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWLANDOT1xClients')
def getWLANDOT1xClients(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWLANDOT1xClients

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWLANDOT1xInterfaces')
def getWLANDOT1xInterfaces(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWLANDOT1xInterfaces

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDOT1xRadius')
def getDOT1xRadius(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDOT1xRadius

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSoftwareList')
def createSoftwareList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSoftwareList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSupportedApplicationList')
def getSupportedApplicationList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSupportedApplicationList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIDeviceFieldJSON')
def getDPIDeviceFieldJSON(isDeviceDashBoard: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isDeviceDashBoard is not None:
        final_kwargs['isDeviceDashBoard'] = isDeviceDashBoard

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIDeviceFieldJSON

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDPICollectorList')
def createDPICollectorList(deviceId: str, vpn_id: str = None, application: str = None, family: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if application is not None:
        final_kwargs['application'] = application
    if family is not None:
        final_kwargs['family'] = family
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDPICollectorList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCommonApplicationList')
def getCommonApplicationList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCommonApplicationList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIFieldJSON')
def getDPIFieldJSON():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIFieldJSON

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIDeviceDetailsFieldJSON')
def getDPIDeviceDetailsFieldJSON():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIDeviceDetailsFieldJSON

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDPIFlowsList')
def createDPIFlowsList(deviceId: str, vpn_id: str = None, src_ip: str = None, application: str = None, family: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if src_ip is not None:
        final_kwargs['src-ip'] = src_ip
    if application is not None:
        final_kwargs['application'] = application
    if family is not None:
        final_kwargs['family'] = family
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDPIFlowsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getQosmosStaticApplicationList')
def getQosmosStaticApplicationList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getQosmosStaticApplicationList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getQosmosApplicationList')
def getQosmosApplicationList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getQosmosApplicationList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDPISummaryRealTime')
def createDPISummaryRealTime(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDPISummaryRealTime

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDPIStatistics')
def createDPIStatistics(deviceId: str, application: str = None, family: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if application is not None:
        final_kwargs['application'] = application
    if family is not None:
        final_kwargs['family'] = family
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDPIStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDreAutoBypassStats')
def getDreAutoBypassStats(deviceId: str, appqoe_dre_auto_bypass_server_ip: str = None, appqoe_dre_auto_bypass_port: float = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if appqoe_dre_auto_bypass_server_ip is not None:
        final_kwargs['appqoe-dre-auto-bypass-server-ip'] = appqoe_dre_auto_bypass_server_ip
    if appqoe_dre_auto_bypass_port is not None:
        final_kwargs['appqoe-dre-auto-bypass-port'] = appqoe_dre_auto_bypass_port
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDreAutoBypassStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDreStats')
def getDreStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDreStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDreStatus')
def getDreStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDreStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDrePeerStats')
def getDrePeerStats(deviceId: str, appqoe_dre_stats_peer_system_ip: str = None, appqoe_dre_stats_peer_peer_no: float = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if appqoe_dre_stats_peer_system_ip is not None:
        final_kwargs['appqoe-dre-stats-peer-system-ip'] = appqoe_dre_stats_peer_system_ip
    if appqoe_dre_stats_peer_peer_no is not None:
        final_kwargs['appqoe-dre-stats-peer-peer-no'] = appqoe_dre_stats_peer_peer_no
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDrePeerStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDualStaticRouteTrackerInfo')
def getDualStaticRouteTrackerInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDualStaticRouteTrackerInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createEIGRPInterface')
def createEIGRPInterface(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createEIGRPInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createEIGRPRoute')
def createEIGRPRoute(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createEIGRPRoute

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createEIGRPTopology')
def createEIGRPTopology(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createEIGRPTopology

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEndpointTrackerInfo')
def getEndpointTrackerInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEndpointTrackerInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEndpointTrackerGroupInfo')
def getEndpointTrackerGroupInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEndpointTrackerGroupInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEnvironmentData')
def getEnvironmentData(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEnvironmentData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRadiusServer')
def getRadiusServer(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRadiusServer

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFeatureList')
def getFeatureList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFeatureList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSyncedFeatureList')
def getSyncedFeatureList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSyncedFeatureList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDataCollectionStatusForDevice')
def getDataCollectionStatusForDevice(deviceUUID: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceUUID is not None:
        final_kwargs['deviceUUID'] = deviceUUID

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDataCollectionStatusForDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('downloadGeneratedFile')
def downloadGeneratedFile(requestUUID: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if requestUUID is not None:
        final_kwargs['requestUUID'] = requestUUID

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.downloadGeneratedFile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDataCollectionStatusForUUID')
def getDataCollectionStatusForUUID(requestUUID: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if requestUUID is not None:
        final_kwargs['requestUUID'] = requestUUID

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDataCollectionStatusForUUID

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSupportedCommandsList')
def getSupportedCommandsList(deviceUUID: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceUUID is not None:
        final_kwargs['deviceUUID'] = deviceUUID

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSupportedCommandsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getGeofenceStatus')
def getGeofenceStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getGeofenceStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAlarmList')
def createAlarmList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAlarmList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createEnvironmentList')
def createEnvironmentList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createEnvironmentList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createErrorAlarmList')
def createErrorAlarmList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createErrorAlarmList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createInventoryList')
def createInventoryList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createInventoryList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createStatusSummary')
def createStatusSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createStatusSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSyncedAlarmList')
def createSyncedAlarmList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSyncedAlarmList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSyncedEnvironmentList')
def createSyncedEnvironmentList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSyncedEnvironmentList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSyncedInventoryList')
def createSyncedInventoryList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSyncedInventoryList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSystemList')
def createSystemList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSystemList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createTempThresholdList')
def createTempThresholdList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createTempThresholdList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getHardwareHealthDetails')
def getHardwareHealthDetails(deviceId: str = None, state: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getHardwareHealthDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getHardwareHealthSummary')
def getHardwareHealthSummary(vpnId: list, isCached: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isCached is not None:
        final_kwargs['isCached'] = isCached
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getHardwareHealthSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawData_21')
def getStatDataRawData_21(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getStatDataRawData_21'])

@register('getAggregationDataByQuery_23')
def getAggregationDataByQuery_23(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getAggregationDataByQuery_23'])

@register('getLastThousandConfigList')
def getLastThousandConfigList(deviceId: str, query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLastThousandConfigList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConfigDiff')
def getConfigDiff(config_id1: str, config_id2: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if config_id1 is not None:
        final_kwargs['config_id1'] = config_id1
    if config_id2 is not None:
        final_kwargs['config_id2'] = config_id2

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConfigDiff

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceConfig')
def getDeviceConfig(config_id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if config_id is not None:
        final_kwargs['config_id'] = config_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawDataAsCSV_21')
def getStatDataRawDataAsCSV_21(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getStatDataRawDataAsCSV_21'])

@register('getCount_20')
def getCount_20(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getCount_20'])

@register('getStatDataFields_22')
def getStatDataFields_22():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getStatDataFields_22'])

@register('getStatsPaginationRawData_19')
def getStatsPaginationRawData_19(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getStatsPaginationRawData_19'])

@register('getStatQueryFields_23')
def getStatQueryFields_23():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getStatQueryFields_23'])

@register('createIGMPGroupsList')
def createIGMPGroupsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIGMPGroupsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIGMPInterfaceList')
def createIGMPInterfaceList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIGMPInterfaceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIGMPStatisticsList')
def createIGMPStatisticsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIGMPStatisticsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIGMPSummary')
def createIGMPSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIGMPSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceInterface')
def getDeviceInterface(deviceId: str, vpn_id: str = None, ifname: str = None, af_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if af_type is not None:
        final_kwargs['af-type'] = af_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceInterfaceARPStats')
def getDeviceInterfaceARPStats(deviceId: str, vpn_id: str = None, ifname: str = None, af_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if af_type is not None:
        final_kwargs['af-type'] = af_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceInterfaceARPStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceInterfaceErrorStats')
def getDeviceInterfaceErrorStats(deviceId: str, vpn_id: str = None, ifname: str = None, af_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if af_type is not None:
        final_kwargs['af-type'] = af_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceInterfaceErrorStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceInterfaceIpv6Stats')
def getDeviceInterfaceIpv6Stats(deviceId: str, vpn_id: str = None, ifname: str = None, af_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if af_type is not None:
        final_kwargs['af-type'] = af_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceInterfaceIpv6Stats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceInterfacePktSizes')
def getDeviceInterfacePktSizes(deviceId: str, vpn_id: str = None, ifname: str = None, af_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if af_type is not None:
        final_kwargs['af-type'] = af_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceInterfacePktSizes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceInterfacePortStats')
def getDeviceInterfacePortStats(deviceId: str, vpn_id: str = None, ifname: str = None, af_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if af_type is not None:
        final_kwargs['af-type'] = af_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceInterfacePortStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceInterfaceQosStats')
def getDeviceInterfaceQosStats(deviceId: str, vpn_id: str = None, ifname: str = None, af_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if af_type is not None:
        final_kwargs['af-type'] = af_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceInterfaceQosStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceInterfaceQueueStats')
def getDeviceInterfaceQueueStats(deviceId: str, vpn_id: str = None, ifname: str = None, af_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if af_type is not None:
        final_kwargs['af-type'] = af_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceInterfaceQueueStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceSerialInterface')
def getDeviceSerialInterface(deviceId: str, vpn_id: str = None, ifname: str = None, af_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if af_type is not None:
        final_kwargs['af-type'] = af_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceSerialInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceInterfaceStats')
def getDeviceInterfaceStats(deviceId: str, vpn_id: str = None, ifname: str = None, af_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if af_type is not None:
        final_kwargs['af-type'] = af_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceInterfaceStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSyncedDeviceInterface')
def getSyncedDeviceInterface(deviceId: str, vpn_id: str = None, ifname: str = None, af_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if af_type is not None:
        final_kwargs['af-type'] = af_type
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSyncedDeviceInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('trustsec')
def trustsec(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.trustsec

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateDeviceInterfaceVPN')
def generateDeviceInterfaceVPN(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateDeviceInterfaceVPN

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createFibList')
def createFibList(deviceId: str, vpn_id: str = None, address_family: str = None, prefix: str = None, tloc: str = None, color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if address_family is not None:
        final_kwargs['address-family'] = address_family
    if prefix is not None:
        final_kwargs['prefix'] = prefix
    if tloc is not None:
        final_kwargs['tloc'] = tloc
    if color is not None:
        final_kwargs['color'] = color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createFibList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIetfRoutingList')
def createIetfRoutingList(deviceId: str, routing_instance_name: str = None, address_family: str = None, outgoing_interface: str = None, source_protocol: str = None, next_hop_address: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if routing_instance_name is not None:
        final_kwargs['routing-instance-name'] = routing_instance_name
    if address_family is not None:
        final_kwargs['address-family'] = address_family
    if outgoing_interface is not None:
        final_kwargs['outgoing-interface'] = outgoing_interface
    if source_protocol is not None:
        final_kwargs['source-protocol'] = source_protocol
    if next_hop_address is not None:
        final_kwargs['next-hop-address'] = next_hop_address
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIetfRoutingList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIPMfibOilList')
def createIPMfibOilList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIPMfibOilList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIPMfibStatsList')
def createIPMfibStatsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIPMfibStatsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIPMfibSummaryList')
def createIPMfibSummaryList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIPMfibSummaryList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createNatFilterList')
def createNatFilterList(deviceId: str, nat_vpn_id: str = None, nat_ifname: str = None, private_source_address: str = None, proto: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if nat_vpn_id is not None:
        final_kwargs['nat-vpn-id'] = nat_vpn_id
    if nat_ifname is not None:
        final_kwargs['nat-ifname'] = nat_ifname
    if private_source_address is not None:
        final_kwargs['private-source-address'] = private_source_address
    if proto is not None:
        final_kwargs['proto'] = proto
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createNatFilterList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createNatInterfaceList')
def createNatInterfaceList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createNatInterfaceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createNatInterfaceStatisticsList')
def createNatInterfaceStatisticsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createNatInterfaceStatisticsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createNatTranslationList')
def createNatTranslationList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createNatTranslationList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createNat64TranslationList')
def createNat64TranslationList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createNat64TranslationList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createRouteTableList')
def createRouteTableList(deviceId: str, vpn_id: str = None, address_family: str = None, prefix: str = None, protocol: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if address_family is not None:
        final_kwargs['address-family'] = address_family
    if prefix is not None:
        final_kwargs['prefix'] = prefix
    if protocol is not None:
        final_kwargs['protocol'] = protocol
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createRouteTableList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIPv4FibList')
def createIPv4FibList(deviceId: str, vpn_id: str = None, prefix: str = None, tloc: str = None, color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if prefix is not None:
        final_kwargs['prefix'] = prefix
    if tloc is not None:
        final_kwargs['tloc'] = tloc
    if color is not None:
        final_kwargs['color'] = color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIPv4FibList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIPv6FibList')
def createIPv6FibList(deviceId: str, vpn_id: str = None, prefix: str = None, tloc: str = None, color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if prefix is not None:
        final_kwargs['prefix'] = prefix
    if tloc is not None:
        final_kwargs['tloc'] = tloc
    if color is not None:
        final_kwargs['color'] = color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIPv6FibList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createCryptoIpsecIdentity')
def createCryptoIpsecIdentity(deviceId: str, remote_tloc_address: str = None, remote_tloc_color: str = None, local_tloc_color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if remote_tloc_address is not None:
        final_kwargs['remote-tloc-address'] = remote_tloc_address
    if remote_tloc_color is not None:
        final_kwargs['remote-tloc-color'] = remote_tloc_color
    if local_tloc_color is not None:
        final_kwargs['local-tloc-color'] = local_tloc_color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createCryptoIpsecIdentity

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIkeInboundList')
def createIkeInboundList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIkeInboundList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIkeOutboundList')
def createIkeOutboundList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIkeOutboundList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIkeSessions')
def createIkeSessions(deviceId: str, remote_tloc_address: str = None, remote_tloc_color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if remote_tloc_address is not None:
        final_kwargs['remote-tloc-address'] = remote_tloc_address
    if remote_tloc_color is not None:
        final_kwargs['remote-tloc-color'] = remote_tloc_color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIkeSessions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createCryptov1LocalSAList')
def createCryptov1LocalSAList(deviceId: str, remote_tloc_address: str = None, remote_tloc_color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if remote_tloc_address is not None:
        final_kwargs['remote-tloc-address'] = remote_tloc_address
    if remote_tloc_color is not None:
        final_kwargs['remote-tloc-color'] = remote_tloc_color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createCryptov1LocalSAList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createCryptov2LocalSAList')
def createCryptov2LocalSAList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createCryptov2LocalSAList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createInBoundList')
def createInBoundList(deviceId: str, remote_tloc_address: str = None, remote_tloc_color: str = None, local_tloc_color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if remote_tloc_address is not None:
        final_kwargs['remote-tloc-address'] = remote_tloc_address
    if remote_tloc_color is not None:
        final_kwargs['remote-tloc-color'] = remote_tloc_color
    if local_tloc_color is not None:
        final_kwargs['local-tloc-color'] = local_tloc_color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createInBoundList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createLocalSAList')
def createLocalSAList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createLocalSAList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOutBoundList')
def createOutBoundList(deviceId: str, remote_tloc_address: str = None, remote_tloc_color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if remote_tloc_address is not None:
        final_kwargs['remote-tloc-address'] = remote_tloc_address
    if remote_tloc_color is not None:
        final_kwargs['remote-tloc-color'] = remote_tloc_color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOutBoundList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIPsecPWKInboundConnections')
def createIPsecPWKInboundConnections(deviceId: str, remote_tloc_address: str = None, remote_tloc_color: str = None, local_tloc_color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if remote_tloc_address is not None:
        final_kwargs['remote-tloc-address'] = remote_tloc_address
    if remote_tloc_color is not None:
        final_kwargs['remote-tloc-color'] = remote_tloc_color
    if local_tloc_color is not None:
        final_kwargs['local-tloc-color'] = local_tloc_color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIPsecPWKInboundConnections

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIPsecPWKLocalSA')
def createIPsecPWKLocalSA(deviceId: str, remote_tloc_address: str = None, remote_tloc_color: str = None, local_tloc_color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if remote_tloc_address is not None:
        final_kwargs['remote-tloc-address'] = remote_tloc_address
    if remote_tloc_color is not None:
        final_kwargs['remote-tloc-color'] = remote_tloc_color
    if local_tloc_color is not None:
        final_kwargs['local-tloc-color'] = local_tloc_color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIPsecPWKLocalSA

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIPsecPWKOutboundConnections')
def createIPsecPWKOutboundConnections(deviceId: str, remote_tloc_address: str = None, remote_tloc_color: str = None, local_tloc_color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if remote_tloc_address is not None:
        final_kwargs['remote-tloc-address'] = remote_tloc_address
    if remote_tloc_color is not None:
        final_kwargs['remote-tloc-color'] = remote_tloc_color
    if local_tloc_color is not None:
        final_kwargs['local-tloc-color'] = local_tloc_color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIPsecPWKOutboundConnections

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getIpv6Data')
def getIpv6Data(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getIpv6Data

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceListAsKeyValue')
def getDeviceListAsKeyValue(site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceListAsKeyValue

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLacpInterfaceList')
def getLacpInterfaceList(deviceId: str, channel_group: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if channel_group is not None:
        final_kwargs['channel-group'] = channel_group
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLacpInterfaceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLacpMembers')
def getLacpMembers(deviceId: str, channel_group: str = None, ifName: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if channel_group is not None:
        final_kwargs['channel-group'] = channel_group
    if ifName is not None:
        final_kwargs['ifName'] = ifName
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLacpMembers

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLicenseEvalInfo')
def getLicenseEvalInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLicenseEvalInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLicensePAKInfo')
def getLicensePAKInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLicensePAKInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLicensePrivacyInfo')
def getLicensePrivacyInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLicensePrivacyInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLicenseRegInfo')
def getLicenseRegInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLicenseRegInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLicenseUDIInfo')
def getLicenseUDIInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLicenseUDIInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLicenseUsageInfo')
def getLicenseUsageInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLicenseUsageInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLoggingFromDevice')
def getLoggingFromDevice(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLoggingFromDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listAllDeviceModels')
def listAllDeviceModels():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listAllDeviceModels

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceModels')
def getDeviceModels(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceModels

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listAllMonitorDetailsDevices')
def listAllMonitorDetailsDevices():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listAllMonitorDetailsDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createReplicatorList')
def createReplicatorList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createReplicatorList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createRpfList')
def createRpfList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createRpfList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createTopologyList')
def createTopologyList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createTopologyList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPimTunnelList')
def createPimTunnelList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPimTunnelList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getIpv6Interface')
def getIpv6Interface(deviceId: str, vpn_id: str = None, if_name: str = None, mac: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn-id'] = vpn_id
    if if_name is not None:
        final_kwargs['if-name'] = if_name
    if mac is not None:
        final_kwargs['mac'] = mac
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getIpv6Interface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRunning')
def getRunning(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRunning

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAssociationsList')
def createAssociationsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAssociationsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPeerList')
def createPeerList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPeerList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createNTPStatusList')
def createNTPStatusList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createNTPStatusList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOMPCloudXRecv')
def createOMPCloudXRecv(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOMPCloudXRecv

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOMPLinkList')
def createOMPLinkList(state: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOMPLinkList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOMPMcastAutoDiscoverAdvt')
def createOMPMcastAutoDiscoverAdvt(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOMPMcastAutoDiscoverAdvt

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOMPMcastAutoDiscoverRecv')
def createOMPMcastAutoDiscoverRecv(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOMPMcastAutoDiscoverRecv

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOMPMcastRoutesAdvt')
def createOMPMcastRoutesAdvt(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOMPMcastRoutesAdvt

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOMPMcastRoutesRecv')
def createOMPMcastRoutesRecv(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOMPMcastRoutesRecv

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOMPSessionList')
def createOMPSessionList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOMPSessionList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAdvertisedRoutesList')
def createAdvertisedRoutesList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAdvertisedRoutesList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAdvertisedRoutesListIpv6')
def createAdvertisedRoutesListIpv6(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAdvertisedRoutesListIpv6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createReceivedRoutesList')
def createReceivedRoutesList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createReceivedRoutesList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createReceivedRoutesListIpv6')
def createReceivedRoutesListIpv6(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createReceivedRoutesListIpv6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOMPServices')
def createOMPServices(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOMPServices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceOMPStatus')
def getDeviceOMPStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceOMPStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOMPSummary')
def createOMPSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOMPSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSyncedOMPSessionList')
def createSyncedOMPSessionList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSyncedOMPSessionList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createAdvertisedTlocsList')
def createAdvertisedTlocsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createAdvertisedTlocsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createReceivedTlocsList')
def createReceivedTlocsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createReceivedTlocsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getOnDemandLocal')
def getOnDemandLocal(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getOnDemandLocal

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getOnDemandRemote')
def getOnDemandRemote(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getOnDemandRemote

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createConnectionListFromDevice')
def createConnectionListFromDevice(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createConnectionListFromDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createConnectionHistoryList')
def createConnectionHistoryList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createConnectionHistoryList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createLocalPropertiesListList')
def createLocalPropertiesListList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createLocalPropertiesListList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createReverseProxyMappingList')
def createReverseProxyMappingList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createReverseProxyMappingList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatistics')
def getStatistics(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createConnectionSummary')
def createConnectionSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createConnectionSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createValidDevicesList')
def createValidDevicesList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createValidDevicesList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getValidVManageId')
def getValidVManageId(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getValidVManageId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createValidVSmartsList')
def createValidVSmartsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createValidVSmartsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOSPFDatabaseList')
def createOSPFDatabaseList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOSPFDatabaseList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOSPFDatabaseExternal')
def createOSPFDatabaseExternal(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOSPFDatabaseExternal

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOSPFDatabaseSummaryList')
def createOSPFDatabaseSummaryList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOSPFDatabaseSummaryList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOSPFInterface')
def createOSPFInterface(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOSPFInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOSPFNeighbors')
def createOSPFNeighbors(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOSPFNeighbors

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOSPFProcess')
def createOSPFProcess(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOSPFProcess

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOSPFRoutesList')
def createOSPFRoutesList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOSPFRoutesList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOSPFv3Interface')
def createOSPFv3Interface(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOSPFv3Interface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createOSPFv3Neighbors')
def createOSPFv3Neighbors(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createOSPFv3Neighbors

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPIMInterfaceList')
def createPIMInterfaceList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPIMInterfaceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPIMNeighborList')
def createPIMNeighborList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPIMNeighborList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPIMRpMappingList')
def createPIMRpMappingList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPIMRpMappingList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPIMStatisticsList')
def createPIMStatisticsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPIMStatisticsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDevicePkiTrustpoint')
def getDevicePkiTrustpoint(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDevicePkiTrustpoint

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicedInterface')
def getPolicedInterface(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicedInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicyAccessListAssociations')
def createPolicyAccessListAssociations(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicyAccessListAssociations

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicyAccessListCounters')
def createPolicyAccessListCounters(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicyAccessListCounters

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicyAccessListNames')
def createPolicyAccessListNames(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicyAccessListNames

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicyAccessListPolicers')
def createPolicyAccessListPolicers(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicyAccessListPolicers

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicyAppRoutePolicyFilter')
def createPolicyAppRoutePolicyFilter(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicyAppRoutePolicyFilter

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicDataPolicyFilter')
def createPolicDataPolicyFilter(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicDataPolicyFilter

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicyFilterMemoryUsage')
def createPolicyFilterMemoryUsage(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicyFilterMemoryUsage

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('showVsmartIptoSgtBinding')
def showVsmartIptoSgtBinding(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.showVsmartIptoSgtBinding

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('showVsmartIptoUserBinding')
def showVsmartIptoUserBinding(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.showVsmartIptoUserBinding

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicyAccessListAssociationsIpv6')
def createPolicyAccessListAssociationsIpv6(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicyAccessListAssociationsIpv6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicyAccessListCountersIpv6')
def createPolicyAccessListCountersIpv6(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicyAccessListCountersIpv6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicyAccessListNamesIpv6')
def createPolicyAccessListNamesIpv6(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicyAccessListNamesIpv6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicyAccessListPolicersIpv6')
def createPolicyAccessListPolicersIpv6(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicyAccessListPolicersIpv6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('showVsmartPxGridStatus')
def showVsmartPxGridStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.showVsmartPxGridStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('showVsmartPxGridUserSessions')
def showVsmartPxGridUserSessions(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.showVsmartPxGridUserSessions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicQosMapInfo')
def createPolicQosMapInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicQosMapInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicQosSchedulerInfo')
def createPolicQosSchedulerInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicQosSchedulerInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPolicyRewriteAssociationsInfo')
def createPolicyRewriteAssociationsInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPolicyRewriteAssociationsInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('showVsmartUserUsergroupBindings')
def showVsmartUserUsergroupBindings(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.showVsmartUserUsergroupBindings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('showSdwanPolicyFromVsmart')
def showSdwanPolicyFromVsmart(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.showSdwanPolicyFromVsmart

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getZoneDropStatistics')
def getZoneDropStatistics(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getZoneDropStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getZbfwStatistics')
def getZbfwStatistics(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getZbfwStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getZonePairSessions')
def getZonePairSessions(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getZonePairSessions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getZonePairs')
def getZonePairs(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getZonePairs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getZonePolicyFilters')
def getZonePolicyFilters(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getZonePolicyFilters

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPowerConsumption')
def getPowerConsumption(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPowerConsumption

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPPPInterfaceList')
def createPPPInterfaceList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPPPInterfaceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPPPoEInterfaceList')
def createPPPoEInterfaceList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPPPoEInterfaceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPPPoENeighborList')
def createPPPoENeighborList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPPPoENeighborList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('cpustat')
def cpustat(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.cpustat

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('memstat')
def memstat(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.memstat

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSyncQueues')
def getSyncQueues():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSyncQueues

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listReachableDevices')
def listReachableDevices():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listReachableDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createRebootHistoryList')
def createRebootHistoryList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createRebootHistoryList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRebootHistoryDetails')
def getRebootHistoryDetails():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRebootHistoryDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSyncedRebootHistoryList')
def createSyncedRebootHistoryList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSyncedRebootHistoryList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRedundancyGroupAppGroup')
def getRedundancyGroupAppGroup(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRedundancyGroupAppGroup

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRoleBasedCounters')
def getRoleBasedCounters(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRoleBasedCounters

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRoleBasedIpv6Counters')
def getRoleBasedIpv6Counters(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRoleBasedIpv6Counters

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRoleBasedIpv6Permissions')
def getRoleBasedIpv6Permissions(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRoleBasedIpv6Permissions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRoleBasedPermissions')
def getRoleBasedPermissions(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRoleBasedPermissions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRoleBasedSgtMap')
def getRoleBasedSgtMap(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRoleBasedSgtMap

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSDWanGlobalDropStatistics')
def getSDWanGlobalDropStatistics(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSDWanGlobalDropStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSDWanStats')
def getSDWanStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSDWanStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSessionList')
def createSessionList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSessionList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDetail')
def getDetail(deviceId: str, ifname: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDetail

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDiagnostic')
def getDiagnostic(deviceId: str, ifname: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDiagnostic

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDiagnosticMeasurementAlarm')
def getDiagnosticMeasurementAlarm(deviceId: str, ifname: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDiagnosticMeasurementAlarm

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDiagnosticMeasurementValue')
def getDiagnosticMeasurementValue(deviceId: str, ifname: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if ifname is not None:
        final_kwargs['ifname'] = ifname
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDiagnosticMeasurementValue

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSigTunnelList')
def getSigTunnelList(pageSize: str = None, offset: str = None, lastNHours: str = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if offset is not None:
        final_kwargs['offset'] = offset
    if lastNHours is not None:
        final_kwargs['lastNHours'] = lastNHours
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSigTunnelList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSigTunnelTotal')
def getSigTunnelTotal():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSigTunnelTotal

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('tunnelDashboard')
def tunnelDashboard():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.tunnelDashboard

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSigUmbrellaTunnels')
def getSigUmbrellaTunnels(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSigUmbrellaTunnels

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSigZscalerTunnels')
def getSigZscalerTunnels(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSigZscalerTunnels

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSmuList')
def createSmuList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSmuList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSyncedSmuList')
def createSyncedSmuList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSyncedSmuList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAAAUcreateSoftwareListsers')
def getAAAUcreateSoftwareListsers(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAAAUcreateSoftwareListsers

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSyncedSoftwareList')
def createSyncedSoftwareList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSyncedSoftwareList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSSETunnel')
def getSSETunnel(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSSETunnel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSslProxyStatistics')
def getSslProxyStatistics(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSslProxyStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSslProxyStatus')
def getSslProxyStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSslProxyStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStaticRouteTrackerInfo')
def getStaticRouteTrackerInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStaticRouteTrackerInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatsQueues')
def getStatsQueues():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsQueues

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllDeviceStatus')
def getAllDeviceStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllDeviceStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSxpConnections')
def getSxpConnections(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSxpConnections

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listCurrentlySyncingDevices')
def listCurrentlySyncingDevices(groupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if groupId is not None:
        final_kwargs['groupId'] = groupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listCurrentlySyncingDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceSystemClock')
def getDeviceSystemClock(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceSystemClock

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDeviceInfoList')
def createDeviceInfoList(deviceId: list):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceInfoList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDeviceSystemStatsList')
def createDeviceSystemStatsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceSystemStatsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDeviceSystemStatusList')
def createDeviceSystemStatusList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceSystemStatusList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createSyncedDeviceSystemStatusList')
def createSyncedDeviceSystemStatusList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createSyncedDeviceSystemStatusList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getActiveTCPFlows')
def getActiveTCPFlows(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getActiveTCPFlows

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getExpiredTCPFlows')
def getExpiredTCPFlows(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getExpiredTCPFlows

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTCPSummary')
def getTCPSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTCPSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTcpProxyStatistics')
def getTcpProxyStatistics(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTcpProxyStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTcpProxyStatus')
def getTcpProxyStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTcpProxyStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTiers')
def getTiers():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTiers

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceTlocStatus')
def getDeviceTlocStatus(deviceId: str = None, color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if color is not None:
        final_kwargs['color'] = color

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceTlocStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceTlocUtil')
def getDeviceTlocUtil(site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceTlocUtil

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceTlocUtilDetails')
def getDeviceTlocUtilDetails(util: str = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if util is not None:
        final_kwargs['util'] = util
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceTlocUtilDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('downloadAdminTechFile')
def downloadAdminTechFile(filename: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if filename is not None:
        final_kwargs['filename'] = filename

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.downloadAdminTechFile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSupportedAdminTechFeatures')
def getSupportedAdminTechFeatures(deviceModel: str, deviceIP: str, personality: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceModel is not None:
        final_kwargs['deviceModel'] = deviceModel
    if deviceIP is not None:
        final_kwargs['deviceIP'] = deviceIP
    if personality is not None:
        final_kwargs['personality'] = personality

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSupportedAdminTechFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listAdminTechs')
def listAdminTechs():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listAdminTechs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInProgressCount')
def getInProgressCount():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInProgressCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceToolsNetstat')
def getDeviceToolsNetstat(deviceId: str, vpn: str = None, options: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn is not None:
        final_kwargs['vpn'] = vpn
    if options is not None:
        final_kwargs['options'] = options
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceToolsNetstat

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceToolsNSlookup')
def getDeviceToolsNSlookup(vpn: str, dns: str, deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn is not None:
        final_kwargs['vpn'] = vpn
    if dns is not None:
        final_kwargs['dns'] = dns
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceToolsNSlookup

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRealTimeinfo')
def getRealTimeinfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRealTimeinfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceToolsSS')
def getDeviceToolsSS(deviceId: str, vpn: str = None, options: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn is not None:
        final_kwargs['vpn'] = vpn
    if options is not None:
        final_kwargs['options'] = options
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceToolsSS

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSystemNetfilter')
def getSystemNetfilter(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSystemNetfilter

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createTransportConnectionList')
def createTransportConnectionList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createTransportConnectionList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createBfdStatisticsList')
def createBfdStatisticsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createBfdStatisticsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createFecStatistics')
def createFecStatistics(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createFecStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createGreKeepalivesList')
def createGreKeepalivesList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createGreKeepalivesList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createIpsecStatisticsList')
def createIpsecStatisticsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createIpsecStatisticsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPacketDuplicateStatistics')
def createPacketDuplicateStatistics(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPacketDuplicateStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createStatisticsList')
def createStatisticsList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createStatisticsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createUcseStats')
def createUcseStats(deviceId: str, remote_tloc_address: str = None, remote_tloc_color: str = None, local_tloc_color: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if remote_tloc_address is not None:
        final_kwargs['remote-tloc-address'] = remote_tloc_address
    if remote_tloc_color is not None:
        final_kwargs['remote-tloc-color'] = remote_tloc_color
    if local_tloc_color is not None:
        final_kwargs['local-tloc-color'] = local_tloc_color
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createUcseStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUmbrellaDevReg')
def getUmbrellaDevReg(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUmbrellaDevReg

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUmbrellaDNSCrypt')
def getUmbrellaDNSCrypt(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUmbrellaDNSCrypt

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUmbrellaDpStats')
def getUmbrellaDpStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUmbrellaDpStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUmbrellaOverview')
def getUmbrellaOverview(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUmbrellaOverview

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUmbrellaConfig')
def getUmbrellaConfig(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUmbrellaConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUnclaimedVedges')
def getUnclaimedVedges(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUnclaimedVedges

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUnconfigured')
def getUnconfigured():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUnconfigured

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listUnreachableDevices')
def listUnreachableDevices(personality: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if personality is not None:
        final_kwargs['personality'] = personality

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listUnreachableDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUsersFromDevice')
def getUsersFromDevice(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUsersFromDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllDeviceUsers')
def getAllDeviceUsers(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllDeviceUsers

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDDataplaneConfig')
def getUTDDataplaneConfig(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDDataplaneConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDDataplaneGlobal')
def getUTDDataplaneGlobal(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDDataplaneGlobal

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDDataplaneStats')
def getUTDDataplaneStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDDataplaneStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDDataplaneStatsSummary')
def getUTDDataplaneStatsSummary(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDDataplaneStatsSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDEngineInstanceStatus')
def getUTDEngineInstanceStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDEngineInstanceStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDEngineStatus')
def getUTDEngineStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDEngineStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDFileAnalysisStatus')
def getUTDFileAnalysisStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDFileAnalysisStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDFileReputationStatus')
def getUTDFileReputationStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDFileReputationStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDIpsUpdateStatus')
def getUTDIpsUpdateStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDIpsUpdateStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSignatureVersionInfo')
def getSignatureVersionInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSignatureVersionInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDUrlfConnectionStatus')
def getUTDUrlfConnectionStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDUrlfConnectionStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDUrlfUpdateStatus')
def getUTDUrlfUpdateStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDUrlfUpdateStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUTDVersionStatus')
def getUTDVersionStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUTDVersionStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCoLineSpecificStats')
def getCoLineSpecificStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCoLineSpecificStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCoStats')
def getCoStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCoStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCpeLineSpecificStats')
def getCpeLineSpecificStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCpeLineSpecificStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCpeStats')
def getCpeStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCpeStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLineBondingStats')
def getLineBondingStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLineBondingStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLineSpecificStats')
def getLineSpecificStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLineSpecificStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVdslInfo')
def getVdslInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVdslInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVedgeInventory')
def getVedgeInventory(status: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if status is not None:
        final_kwargs['status'] = status

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVedgeInventory

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVedgeInventorySummary')
def getVedgeInventorySummary():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVedgeInventorySummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createTeList')
def createTeList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createTeList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createUtdList')
def createUtdList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createUtdList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createWaasList')
def createWaasList(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createWaasList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVbranchVMLifecycleNics')
def getVbranchVMLifecycleNics(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVbranchVMLifecycleNics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudDockVMLifecycleNics')
def getCloudDockVMLifecycleNics(userGroup: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if userGroup is not None:
        final_kwargs['userGroup'] = userGroup

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudDockVMLifecycleNics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVbranchVMLifecycle')
def getVbranchVMLifecycle(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVbranchVMLifecycle

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVMLifeCycleState')
def getVMLifeCycleState(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVMLifeCycleState

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVManageSystemIP')
def getVManageSystemIP():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVManageSystemIP

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDspActive')
def getDspActive(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDspActive

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPhoneInfo')
def getPhoneInfo(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPhoneInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDSPFarmProfiles')
def getDSPFarmProfiles(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDSPFarmProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSccpCcmGroups')
def getSccpCcmGroups(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSccpCcmGroups

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSccpConnections')
def getSccpConnections(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSccpConnections

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVoiceCalls')
def getVoiceCalls(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVoiceCalls

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVoipCalls')
def getVoipCalls(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVoipCalls

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getT1e1IsdnStatus')
def getT1e1IsdnStatus(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getT1e1IsdnStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getControllerT1e1InfoCurrent15MinStats')
def getControllerT1e1InfoCurrent15MinStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getControllerT1e1InfoCurrent15MinStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getControllerT1e1InfoTotalStats')
def getControllerT1e1InfoTotalStats(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getControllerT1e1InfoTotalStats

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVPNInstances')
def getVPNInstances(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVPNInstances

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVRRPInterface')
def getVRRPInterface(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVRRPInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWirelessClients')
def getWirelessClients(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWirelessClients

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWirelessRadios')
def getWirelessRadios(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWirelessRadios

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWirelessSsid')
def getWirelessSsid(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWirelessSsid

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWLANClients')
def getWLANClients(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWLANClients

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWLANInterfaces')
def getWLANInterfaces(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWLANInterfaces

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWLANRadios')
def getWLANRadios(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWLANRadios

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWLANRadius')
def getWLANRadius(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWLANRadius

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getClusterInfo')
def getClusterInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getClusterInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConfigDBRestoreStatus')
def getConfigDBRestoreStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConfigDBRestoreStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDetails')
def getDetails():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDisasterRecoveryStatus')
def getDisasterRecoveryStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDisasterRecoveryStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getHistory')
def getHistory():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getHistory

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLocalHistory')
def getLocalHistory():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLocalHistory

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLocalDataCenterState')
def getLocalDataCenterState():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLocalDataCenterState

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRemoteDCMembersState')
def getRemoteDCMembersState():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRemoteDCMembersState

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRemoteDataCenterState')
def getRemoteDataCenterState():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRemoteDataCenterState

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRemoteDataCenterVersion')
def getRemoteDataCenterVersion():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRemoteDataCenterVersion

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDisasterRecoveryLocalReplicationSchedule')
def getDisasterRecoveryLocalReplicationSchedule():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDisasterRecoveryLocalReplicationSchedule

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getdrStatus')
def getdrStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getdrStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('get')
def get():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.get

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listEntityOwnershipInfo')
def listEntityOwnershipInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listEntityOwnershipInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('entityOwnershipInfo')
def entityOwnershipInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.entityOwnershipInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEvents')
def getEvents(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None, site_id: str = None, includeTenants: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder
    if site_id is not None:
        final_kwargs['site-id'] = site_id
    if includeTenants is not None:
        final_kwargs['includeTenants'] = includeTenants

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEvents

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAggregationData_1')
def getAggregationData_1(query: str, site_id: str = None, includeTenants: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if site_id is not None:
        final_kwargs['site-id'] = site_id
    if includeTenants is not None:
        final_kwargs['includeTenants'] = includeTenants

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationData_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getAggregationData_1'])

@register('getComponentsAsKeyValue')
def getComponentsAsKeyValue():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getComponentsAsKeyValue

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDocCount_2')
def getDocCount_2(query: str, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDocCount_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getDocCount_2'])

@register('enableEventsFromFile')
def enableEventsFromFile():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.enableEventsFromFile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEventNamesByComponent')
def getEventNamesByComponent(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEventNamesByComponent

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getListenersInfo')
def getListenersInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListenersInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPage_1')
def getPage_1(query: str = None, scrollId: str = None, count: int = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPage_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getPage_1'])

@register('getQueryFields')
def getQueryFields():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getQueryFields

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createEventsQueryConfig')
def createEventsQueryConfig():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createEventsQueryConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getBySeverities')
def getBySeverities(severity_level: list, deviceId: list = None, query: str = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if severity_level is not None:
        final_kwargs['severity-level'] = severity_level
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if query is not None:
        final_kwargs['query'] = query
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBySeverities

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSeverityHistogram')
def getSeverityHistogram(deviceId: list, query: str = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if query is not None:
        final_kwargs['query'] = query
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSeverityHistogram

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEventTypesAsKeyValue')
def getEventTypesAsKeyValue():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEventTypesAsKeyValue

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceCertificate')
def getDeviceCertificate(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceCertificate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceCsr')
def getDeviceCsr(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceCsr

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFeatureCaState')
def getFeatureCaState():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFeatureCaState

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('requesDNSSecActions')
def requesDNSSecActions(action: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if action is not None:
        final_kwargs['action'] = action

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.requesDNSSecActions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDNSSecStatus')
def getDNSSecStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDNSSecStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('requestWazuhActions')
def requestWazuhActions(action: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if action is not None:
        final_kwargs['action'] = action

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.requestWazuhActions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWazuhAgentStatus')
def getWazuhAgentStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWazuhAgentStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listDeviceGroupList')
def listDeviceGroupList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listDeviceGroupList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listDeviceGroups')
def listDeviceGroups(siteId: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if siteId is not None:
        final_kwargs['siteId'] = siteId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listDeviceGroups

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listGroupDevices')
def listGroupDevices(groupId: str = None, ssh: bool = None, vpnId: list = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if groupId is not None:
        final_kwargs['groupId'] = groupId
    if ssh is not None:
        final_kwargs['ssh'] = ssh
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listGroupDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listGroupDevicesForMap')
def listGroupDevicesForMap(groupId: str = None, vpnId: list = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if groupId is not None:
        final_kwargs['groupId'] = groupId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listGroupDevicesForMap

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listGroupLinksForMap')
def listGroupLinksForMap(groupId: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if groupId is not None:
        final_kwargs['groupId'] = groupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listGroupLinksForMap

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDevicesHealth')
def getDevicesHealth(page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None, startingDeviceId: str = None, siteId: str = None, group_id: str = None, groupId: str = None, vpnId: str = None, reachable: bool = None, controlStatus: str = None, personality: str = None, health: str = None, site_id: str = None, featureType: str = None, corSaasStatus: bool = None, includeTenantvSmart: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder
    if startingDeviceId is not None:
        final_kwargs['startingDeviceId'] = startingDeviceId
    if siteId is not None:
        final_kwargs['siteId'] = siteId
    if group_id is not None:
        final_kwargs['group_id'] = group_id
    if groupId is not None:
        final_kwargs['groupId'] = groupId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if reachable is not None:
        final_kwargs['reachable'] = reachable
    if controlStatus is not None:
        final_kwargs['controlStatus'] = controlStatus
    if personality is not None:
        final_kwargs['personality'] = personality
    if health is not None:
        final_kwargs['health'] = health
    if site_id is not None:
        final_kwargs['site-id'] = site_id
    if featureType is not None:
        final_kwargs['featureType'] = featureType
    if corSaasStatus is not None:
        final_kwargs['corSaasStatus'] = corSaasStatus
    if includeTenantvSmart is not None:
        final_kwargs['includeTenantvSmart'] = includeTenantvSmart

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDevicesHealth

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDevicesHealthOverview')
def getDevicesHealthOverview(vpn_id: str = None, vpnId: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn_id is not None:
        final_kwargs['vpn_id'] = vpn_id
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDevicesHealthOverview

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('fetchDeviceDetails')
def fetchDeviceDetails():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.fetchDeviceDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('InstallDeviceDetails')
def InstallDeviceDetails():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.InstallDeviceDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('fetchSAVAAccounts')
def fetchSAVAAccounts(username: str = None, pwd: str = None, mode: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if username is not None:
        final_kwargs['username'] = username
    if pwd is not None:
        final_kwargs['pwd'] = pwd
    if mode is not None:
        final_kwargs['mode'] = mode

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.fetchSAVAAccounts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('testbedMode')
def testbedMode():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.testbedMode

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('connect_1')
def connect_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.connect_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['connect_1'])

@register('getIseServerCredentials')
def getIseServerCredentials():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getIseServerCredentials

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPxGridAccount')
def getPxGridAccount():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPxGridAccount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPxgridCert')
def getPxgridCert():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPxgridCert

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSupportedLocales')
def getSupportedLocales():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSupportedLocales

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCategory')
def getCategory():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCategory

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getvManageResourceUtilization')
def getvManageResourceUtilization():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getvManageResourceUtilization

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('retrieveMDPAttachedDevices')
def retrieveMDPAttachedDevices(nmsId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if nmsId is not None:
        final_kwargs['nmsId'] = nmsId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.retrieveMDPAttachedDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('retrieveMDPSupportedDevices')
def retrieveMDPSupportedDevices(nmsId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if nmsId is not None:
        final_kwargs['nmsId'] = nmsId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.retrieveMDPSupportedDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('disconnectFromMDP')
def disconnectFromMDP(nmsId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if nmsId is not None:
        final_kwargs['nmsId'] = nmsId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.disconnectFromMDP

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMDPOnboardingStatus')
def getMDPOnboardingStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMDPOnboardingStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('retrieveMDPConfigObject')
def retrieveMDPConfigObject(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.retrieveMDPConfigObject

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('retrieveMDPPolicies')
def retrieveMDPPolicies(nmsId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if nmsId is not None:
        final_kwargs['nmsId'] = nmsId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.retrieveMDPPolicies

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDeviceVmanageConnectionList')
def createDeviceVmanageConnectionList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceVmanageConnectionList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudConnectorDomainAppRules')
def getCloudConnectorDomainAppRules():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudConnectorDomainAppRules

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudConnectorIpAddressAppRules')
def getCloudConnectorIpAddressAppRules():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudConnectorIpAddressAppRules

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWebexAppData')
def getWebexAppData():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWebexAppData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMSLADevices_1')
def getMSLADevices_1(site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMSLADevices_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getMSLADevices_1'])

@register('getLicenseByUuid_1')
def getLicenseByUuid_1(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLicenseByUuid_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getLicenseByUuid_1'])

@register('getMslaLicenses')
def getMslaLicenses(uuid: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMslaLicenses

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLicensesCompliance')
def getLicensesCompliance():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLicensesCompliance

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceDetailsForDashboard')
def getDeviceDetailsForDashboard():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceDetailsForDashboard

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLicenseDistributionDetails')
def getLicenseDistributionDetails():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLicenseDistributionDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPackagingDistributionDetails')
def getPackagingDistributionDetails():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPackagingDistributionDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllTemplate')
def getAllTemplate():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllTemplate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSubscriptions')
def getSubscriptions(virtual_account_id: str = None, licenseType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if virtual_account_id is not None:
        final_kwargs['virtual_account_id'] = virtual_account_id
    if licenseType is not None:
        final_kwargs['licenseType'] = licenseType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSubscriptions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllCloudAccounts')
def getAllCloudAccounts(cloudType: str = None, cloudGatewayEnabled: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if cloudGatewayEnabled is not None:
        final_kwargs['cloudGatewayEnabled'] = cloudGatewayEnabled

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllCloudAccounts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeAccounts')
def getEdgeAccounts(edgeType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeAccounts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeAccountDetails')
def getEdgeAccountDetails(accountId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountId is not None:
        final_kwargs['accountId'] = accountId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeAccountDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudAccountDetails')
def getCloudAccountDetails(accountId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountId is not None:
        final_kwargs['accountId'] = accountId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudAccountDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('auditDryRun')
def auditDryRun(cloudType: str, cloudRegion: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if cloudRegion is not None:
        final_kwargs['cloudRegion'] = cloudRegion
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.auditDryRun

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeBillingAccounts')
def getEdgeBillingAccounts(edgeType: str, edgeAccountId: str, region: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType
    if edgeAccountId is not None:
        final_kwargs['edgeAccountId'] = edgeAccountId
    if region is not None:
        final_kwargs['region'] = region

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeBillingAccounts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudRoutersAndAttachments')
def getCloudRoutersAndAttachments(accountId: str = None, region: str = None, network: str = None, connectivityGatewayName: str = None, cloudGatewayName: str = None, state: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if region is not None:
        final_kwargs['region'] = region
    if network is not None:
        final_kwargs['network'] = network
    if connectivityGatewayName is not None:
        final_kwargs['connectivityGatewayName'] = connectivityGatewayName
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName
    if state is not None:
        final_kwargs['state'] = state
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudRoutersAndAttachments

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCgws')
def getCgws(cloudType: str = None, accountId: str = None, region: str = None, cloudGatewayName: str = None, connectivityState: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if region is not None:
        final_kwargs['region'] = region
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName
    if connectivityState is not None:
        final_kwargs['connectivityState'] = connectivityState

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCgws

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNvaSecurityRules')
def getNvaSecurityRules(cloudGatewayName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNvaSecurityRules

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAzureNetworkVirtualAppliances')
def getAzureNetworkVirtualAppliances(cloudType: str, accountId: str, region: str, resourceGroupName: str, resourceGroupSource: str, vhubName: str, vhubSource: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if region is not None:
        final_kwargs['region'] = region
    if resourceGroupName is not None:
        final_kwargs['resourceGroupName'] = resourceGroupName
    if resourceGroupSource is not None:
        final_kwargs['resourceGroupSource'] = resourceGroupSource
    if vhubName is not None:
        final_kwargs['vhubName'] = vhubName
    if vhubSource is not None:
        final_kwargs['vhubSource'] = vhubSource

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAzureNetworkVirtualAppliances

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAzureNvaSkuResources')
def getAzureNvaSkuResources(cloudType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAzureNvaSkuResources

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCgwOrgResources')
def getCgwOrgResources(cloudGatewayName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCgwOrgResources

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAzureResourceGroups')
def getAzureResourceGroups(cloudType: str, accountId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountId is not None:
        final_kwargs['accountId'] = accountId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAzureResourceGroups

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAzureVirtualHubs')
def getAzureVirtualHubs(cloudType: str, accountId: str, region: str, resourceGroupName: str, resourceGroupSource: str, vwanName: str, vwanSource: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if region is not None:
        final_kwargs['region'] = region
    if resourceGroupName is not None:
        final_kwargs['resourceGroupName'] = resourceGroupName
    if resourceGroupSource is not None:
        final_kwargs['resourceGroupSource'] = resourceGroupSource
    if vwanName is not None:
        final_kwargs['vwanName'] = vwanName
    if vwanSource is not None:
        final_kwargs['vwanSource'] = vwanSource

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAzureVirtualHubs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAzureVirtualVnetsAttached')
def getAzureVirtualVnetsAttached(cloudType: str, cloudGatewayName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAzureVirtualVnetsAttached

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAzureVpnGateways')
def getAzureVpnGateways(cloudType: str, accountId: str, region: str, resourceGroupName: str, resourceGroupSource: str, vhubName: str, vhubSource: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if region is not None:
        final_kwargs['region'] = region
    if resourceGroupName is not None:
        final_kwargs['resourceGroupName'] = resourceGroupName
    if resourceGroupSource is not None:
        final_kwargs['resourceGroupSource'] = resourceGroupSource
    if vhubName is not None:
        final_kwargs['vhubName'] = vhubName
    if vhubSource is not None:
        final_kwargs['vhubSource'] = vhubSource

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAzureVpnGateways

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAzureVirtualWans')
def getAzureVirtualWans(cloudType: str, accountId: str, resourceGroupName: str, resourceGroupSource: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if resourceGroupName is not None:
        final_kwargs['resourceGroupName'] = resourceGroupName
    if resourceGroupSource is not None:
        final_kwargs['resourceGroupSource'] = resourceGroupSource

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAzureVirtualWans

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCgwDetails')
def getCgwDetails(cloudGatewayName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCgwDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCgwAttachedSites')
def getCgwAttachedSites(cloudGatewayName: str, systemIp: str = None, siteId: str = None, color: str = None, vpnTunnelStatus: str = None, solution: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName
    if systemIp is not None:
        final_kwargs['systemIp'] = systemIp
    if siteId is not None:
        final_kwargs['siteId'] = siteId
    if color is not None:
        final_kwargs['color'] = color
    if vpnTunnelStatus is not None:
        final_kwargs['vpnTunnelStatus'] = vpnTunnelStatus
    if solution is not None:
        final_kwargs['solution'] = solution

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCgwAttachedSites

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAvailableDevicesOrByCGId')
def getAvailableDevicesOrByCGId(cloudType: str, config_group_id: str = None, device_solution_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if config_group_id is not None:
        final_kwargs['config-group-id'] = config_group_id
    if device_solution_type is not None:
        final_kwargs['device-solution-type'] = device_solution_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAvailableDevicesOrByCGId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudGateways')
def getCloudGateways(cloudType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudGateways

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCgwCustomSettingDetails')
def getCgwCustomSettingDetails(cloudGatewayName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCgwCustomSettingDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCgwTypes')
def getCgwTypes(cloudType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCgwTypes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudConnectedSites_1')
def getCloudConnectedSites_1(edgeType: str, edgeGatewayName: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType
    if edgeGatewayName is not None:
        final_kwargs['edgeGatewayName'] = edgeGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudConnectedSites_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getCloudConnectedSites_1'])

@register('getCloudConnectedSites')
def getCloudConnectedSites(cloudType: str, cloudGatewayName: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudConnectedSites

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeConnectivityDetails')
def getEdgeConnectivityDetails(edgeType: str = None, connectivityName: str = None, connectivityType: str = None, edgeGatewayName: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType
    if connectivityName is not None:
        final_kwargs['connectivityName'] = connectivityName
    if connectivityType is not None:
        final_kwargs['connectivityType'] = connectivityType
    if edgeGatewayName is not None:
        final_kwargs['edgeGatewayName'] = edgeGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeConnectivityDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeConnectivityDetailByName')
def getEdgeConnectivityDetailByName(connectivityName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if connectivityName is not None:
        final_kwargs['connectivityName'] = connectivityName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeConnectivityDetailByName

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConnectivityGateways')
def getConnectivityGateways(accountId: str = None, cloudType: str = None, connectivityType: str = None, connectivityGatewayName: str = None, region: str = None, network: str = None, state: str = None, refresh: str = None, edgeType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if connectivityType is not None:
        final_kwargs['connectivityType'] = connectivityType
    if connectivityGatewayName is not None:
        final_kwargs['connectivityGatewayName'] = connectivityGatewayName
    if region is not None:
        final_kwargs['region'] = region
    if network is not None:
        final_kwargs['network'] = network
    if state is not None:
        final_kwargs['state'] = state
    if refresh is not None:
        final_kwargs['refresh'] = refresh
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConnectivityGateways

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConnectivityGatewayCreationOptions')
def getConnectivityGatewayCreationOptions(accountId: str = None, cloudType: str = None, connectivityType: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if connectivityType is not None:
        final_kwargs['connectivityType'] = connectivityType
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConnectivityGatewayCreationOptions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCwanCoreNetworkPolicy')
def getCwanCoreNetworkPolicy():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCwanCoreNetworkPolicy

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDashboardEdgeInfo')
def getDashboardEdgeInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDashboardEdgeInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWanDevices')
def getWanDevices():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWanDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceLinks')
def getDeviceLinks(edgeType: str = None, deviceLinkName: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType
    if deviceLinkName is not None:
        final_kwargs['deviceLinkName'] = deviceLinkName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceLinks

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDlPortSpeed')
def getDlPortSpeed(edgeType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDlPortSpeed

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudDevices_1')
def getCloudDevices_1(edgeType: str, edgeGatewayName: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType
    if edgeGatewayName is not None:
        final_kwargs['edgeGatewayName'] = edgeGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudDevices_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getCloudDevices_1'])

@register('getCloudDevices')
def getCloudDevices(cloudType: str, cloudGatewayName: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeWanDevices')
def getEdgeWanDevices(edgeType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeWanDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getIcgws')
def getIcgws(edgeType: str = None, accountId: str = None, region: str = None, regionId: str = None, resourceState: str = None, edgeGatewayName: str = None, billingAccountId: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if region is not None:
        final_kwargs['region'] = region
    if regionId is not None:
        final_kwargs['regionId'] = regionId
    if resourceState is not None:
        final_kwargs['resourceState'] = resourceState
    if edgeGatewayName is not None:
        final_kwargs['edgeGatewayName'] = edgeGatewayName
    if billingAccountId is not None:
        final_kwargs['billingAccountId'] = billingAccountId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getIcgws

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getIcgwCustomSettingDetails')
def getIcgwCustomSettingDetails(edgeGatewayName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeGatewayName is not None:
        final_kwargs['edgeGatewayName'] = edgeGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getIcgwCustomSettingDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getIcgwTypes')
def getIcgwTypes(edgeType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getIcgwTypes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getIcgwDetails')
def getIcgwDetails(edgeGatewayName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeGatewayName is not None:
        final_kwargs['edgeGatewayName'] = edgeGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getIcgwDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeGateways')
def getEdgeGateways(edgeType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeGateways

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getHostVpcs')
def getHostVpcs(cloudType: str, accountIds: str = None, region: str = None, untagged: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountIds is not None:
        final_kwargs['accountIds'] = accountIds
    if region is not None:
        final_kwargs['region'] = region
    if untagged is not None:
        final_kwargs['untagged'] = untagged

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getHostVpcs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVpcTags')
def getVpcTags(cloudType: str = None, region: str = None, tagName: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if region is not None:
        final_kwargs['region'] = region
    if tagName is not None:
        final_kwargs['tagName'] = tagName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVpcTags

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSupportedEdgeImageNames')
def getSupportedEdgeImageNames(edgeType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSupportedEdgeImageNames

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSupportedInstanceSize')
def getSupportedInstanceSize(cloudType: str, accountId: str = None, cloudRegion: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if cloudRegion is not None:
        final_kwargs['cloudRegion'] = cloudRegion

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSupportedInstanceSize

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSupportedEdgeInstanceSize')
def getSupportedEdgeInstanceSize(edgeType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSupportedEdgeInstanceSize

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectAccounts')
def getInterconnectAccounts(interconnect_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectAccounts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectAccount')
def getInterconnectAccount(interconnect_account_id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_account_id is not None:
        final_kwargs['interconnect-account-id'] = interconnect_account_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectAccount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAuditReport')
def getAuditReport(interconnect_type: str, connection_type: str = None, cloud_type: str = None, device_links: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if connection_type is not None:
        final_kwargs['connection-type'] = connection_type
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if device_links is not None:
        final_kwargs['device-links'] = device_links
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAuditReport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getGoogleCloudRouterAndAttachments')
def getGoogleCloudRouterAndAttachments(cloud_type: str, cloud_account_id: str, connectivity_gateway_name: str = None, cloud_gateway_name: str = None, region: str = None, network: str = None, resource_state: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if cloud_account_id is not None:
        final_kwargs['cloud-account-id'] = cloud_account_id
    if connectivity_gateway_name is not None:
        final_kwargs['connectivity-gateway-name'] = connectivity_gateway_name
    if cloud_gateway_name is not None:
        final_kwargs['cloud-gateway-name'] = cloud_gateway_name
    if region is not None:
        final_kwargs['region'] = region
    if network is not None:
        final_kwargs['network'] = network
    if resource_state is not None:
        final_kwargs['resource-state'] = resource_state
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getGoogleCloudRouterAndAttachments

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAwsTransitGateways')
def getAwsTransitGateways(cloud_type: str, cloud_account_id: str, transit_gateway_name: str = None, region: str = None, tag_name: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if cloud_account_id is not None:
        final_kwargs['cloud-account-id'] = cloud_account_id
    if transit_gateway_name is not None:
        final_kwargs['transit-gateway-name'] = transit_gateway_name
    if region is not None:
        final_kwargs['region'] = region
    if tag_name is not None:
        final_kwargs['tag-name'] = tag_name
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAwsTransitGateways

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAzVirtualHubs')
def getAzVirtualHubs(cloud_type: str, cloud_account_id: str, resource_group: str = None, refresh: str = None, vwan_name: str = None, tag_name: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if cloud_account_id is not None:
        final_kwargs['cloud-account-id'] = cloud_account_id
    if resource_group is not None:
        final_kwargs['resource-group'] = resource_group
    if refresh is not None:
        final_kwargs['refresh'] = refresh
    if vwan_name is not None:
        final_kwargs['vwan-name'] = vwan_name
    if tag_name is not None:
        final_kwargs['tag-name'] = tag_name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAzVirtualHubs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAzVirtualWans')
def getAzVirtualWans(cloud_type: str, cloud_account_id: str, resource_group: str, refresh: str = None, vwan_name: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if cloud_account_id is not None:
        final_kwargs['cloud-account-id'] = cloud_account_id
    if resource_group is not None:
        final_kwargs['resource-group'] = resource_group
    if refresh is not None:
        final_kwargs['refresh'] = refresh
    if vwan_name is not None:
        final_kwargs['vwan-name'] = vwan_name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAzVirtualWans

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudConnectivityGateways')
def getCloudConnectivityGateways(cloud_type: str, cloud_account_id: str, connectivity_gateway_name: str = None, connectivity_gateway_type: str = None, interconnect_type: str = None, region: str = None, network: str = None, resource_state: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if cloud_account_id is not None:
        final_kwargs['cloud-account-id'] = cloud_account_id
    if connectivity_gateway_name is not None:
        final_kwargs['connectivity-gateway-name'] = connectivity_gateway_name
    if connectivity_gateway_type is not None:
        final_kwargs['connectivity-gateway-type'] = connectivity_gateway_type
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if region is not None:
        final_kwargs['region'] = region
    if network is not None:
        final_kwargs['network'] = network
    if resource_state is not None:
        final_kwargs['resource-state'] = resource_state
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudConnectivityGateways

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudConnectivityGatewayCreateOptions')
def getCloudConnectivityGatewayCreateOptions(cloud_type: str, cloud_account_id: str, connectivity_gateway_type: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if cloud_account_id is not None:
        final_kwargs['cloud-account-id'] = cloud_account_id
    if connectivity_gateway_type is not None:
        final_kwargs['connectivity-gateway-type'] = connectivity_gateway_type
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudConnectivityGatewayCreateOptions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectColors')
def getInterconnectColors(tunnel_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if tunnel_type is not None:
        final_kwargs['tunnel-type'] = tunnel_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectColors

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectOnRampGatewayConnections')
def getInterconnectOnRampGatewayConnections(cloud_type: str = None, cloud_account_id: str = None, connection_name: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if cloud_account_id is not None:
        final_kwargs['cloud-account-id'] = cloud_account_id
    if connection_name is not None:
        final_kwargs['connection-name'] = connection_name
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectOnRampGatewayConnections

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectOnRampGatewayConnection')
def getInterconnectOnRampGatewayConnection(connection_name: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if connection_name is not None:
        final_kwargs['connection-name'] = connection_name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectOnRampGatewayConnection

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectMappingTags')
def getInterconnectMappingTags(cloud_type: str, cloud_account_id: str, resource_group: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if cloud_account_id is not None:
        final_kwargs['cloud-account-id'] = cloud_account_id
    if resource_group is not None:
        final_kwargs['resource-group'] = resource_group

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectMappingTags

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectDeviceLinks')
def getInterconnectDeviceLinks(device_link_name: str = None, interconnect_type: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if device_link_name is not None:
        final_kwargs['device-link-name'] = device_link_name
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectDeviceLinks

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectDeviceLink')
def getInterconnectDeviceLink(device_link_name: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if device_link_name is not None:
        final_kwargs['device-link-name'] = device_link_name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectDeviceLink

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectCrossConnections')
def getInterconnectCrossConnections(interconnect_type: str = None, interconnect_gateway_name: str = None, connection_name: str = None, connection_type: str = None, cloud_type: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if interconnect_gateway_name is not None:
        final_kwargs['interconnect-gateway-name'] = interconnect_gateway_name
    if connection_name is not None:
        final_kwargs['connection-name'] = connection_name
    if connection_type is not None:
        final_kwargs['connection-type'] = connection_type
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectCrossConnections

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectCrossConnection')
def getInterconnectCrossConnection(connection_name: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if connection_name is not None:
        final_kwargs['connection-name'] = connection_name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectCrossConnection

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectVirtualNetworkConnections')
def getInterconnectVirtualNetworkConnections(connection_name: str = None, cloud_type: str = None, cloud_account_id: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if connection_name is not None:
        final_kwargs['connection-name'] = connection_name
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if cloud_account_id is not None:
        final_kwargs['cloud-account-id'] = cloud_account_id
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectVirtualNetworkConnections

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectVirtualNetworkConnection')
def getInterconnectVirtualNetworkConnection(connection_name: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if connection_name is not None:
        final_kwargs['connection-name'] = connection_name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectVirtualNetworkConnection

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectDashboard')
def getInterconnectDashboard():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectDashboard

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectLicenses')
def getInterconnectLicenses(interconnect_type: str, interconnect_account_id: str, refresh: str = None, product_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if interconnect_account_id is not None:
        final_kwargs['interconnect-account-id'] = interconnect_account_id
    if refresh is not None:
        final_kwargs['refresh'] = refresh
    if product_type is not None:
        final_kwargs['product-type'] = product_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectLicenses

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectGateways')
def getInterconnectGateways(interconnect_type: str = None, interconnect_account_id: str = None, region: str = None, region_id: str = None, interconnect_gateway_name: str = None, resource_state: str = None, interconnect_billing_account_id: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if interconnect_account_id is not None:
        final_kwargs['interconnect-account-id'] = interconnect_account_id
    if region is not None:
        final_kwargs['region'] = region
    if region_id is not None:
        final_kwargs['region-id'] = region_id
    if interconnect_gateway_name is not None:
        final_kwargs['interconnect-gateway-name'] = interconnect_gateway_name
    if resource_state is not None:
        final_kwargs['resource-state'] = resource_state
    if interconnect_billing_account_id is not None:
        final_kwargs['interconnect-billing-account-id'] = interconnect_billing_account_id
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectGateways

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectGatewayImageNames')
def getInterconnectGatewayImageNames(interconnect_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectGatewayImageNames

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectGatewayInstanceSizes')
def getInterconnectGatewayInstanceSizes(interconnect_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectGatewayInstanceSizes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnetGatewayTypes')
def getInterconnetGatewayTypes(interconnect_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnetGatewayTypes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectGateway')
def getInterconnectGateway(interconnect_gateway_name: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_gateway_name is not None:
        final_kwargs['interconnect-gateway-name'] = interconnect_gateway_name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectGateway

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectGatewayCustomSettings')
def getInterconnectGatewayCustomSettings(interconnect_gateway_name: str, interconnect_account_id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_gateway_name is not None:
        final_kwargs['interconnect-gateway-name'] = interconnect_gateway_name
    if interconnect_account_id is not None:
        final_kwargs['interconnect-account-id'] = interconnect_account_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectGatewayCustomSettings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectIpTransit')
def getInterconnectIpTransit(interconnect_service_type: str, interconnect_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_service_type is not None:
        final_kwargs['interconnect-service-type'] = interconnect_service_type
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectIpTransit

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectServiceSwPkg')
def getInterconnectServiceSwPkg(interconnect_provider_name: str, interconnect_account_id: str, interconnect_service_type: str, interconnect_service_vendor_name: str, region: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_provider_name is not None:
        final_kwargs['interconnect-provider-name'] = interconnect_provider_name
    if interconnect_account_id is not None:
        final_kwargs['interconnect-account-id'] = interconnect_account_id
    if interconnect_service_type is not None:
        final_kwargs['interconnect-service-type'] = interconnect_service_type
    if interconnect_service_vendor_name is not None:
        final_kwargs['interconnect-service-vendor-name'] = interconnect_service_vendor_name
    if region is not None:
        final_kwargs['region'] = region

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectServiceSwPkg

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectServices')
def getInterconnectServices(interconnect_service_vendor_name: str, interconnect_type: str, interconnect_service_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_service_vendor_name is not None:
        final_kwargs['interconnect-service-vendor-name'] = interconnect_service_vendor_name
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if interconnect_service_type is not None:
        final_kwargs['interconnect-service-type'] = interconnect_service_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectServices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectGlobalSettings')
def getInterconnectGlobalSettings(interconnect_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectGlobalSettings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectSshKeys')
def getInterconnectSshKeys(interconnect_provider_name: str, interconnect_account_id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_provider_name is not None:
        final_kwargs['interconnect-provider-name'] = interconnect_provider_name
    if interconnect_account_id is not None:
        final_kwargs['interconnect-account-id'] = interconnect_account_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectSshKeys

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectTypes')
def getInterconnectTypes():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectTypes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllInterconnectWidgets')
def getAllInterconnectWidgets():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllInterconnectWidgets

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectBillingAccounts')
def getInterconnectBillingAccounts(interconnect_type: str, interconnect_account_id: str, region: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if interconnect_account_id is not None:
        final_kwargs['interconnect-account-id'] = interconnect_account_id
    if region is not None:
        final_kwargs['region'] = region

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectBillingAccounts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectPartnerPorts')
def getInterconnectPartnerPorts(interconnect_type: str, interconnect_account_id: str, cloud_type: str, connect_type: str = None, vxc_permitted: str = None, authorization_key: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if interconnect_account_id is not None:
        final_kwargs['interconnect-account-id'] = interconnect_account_id
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if connect_type is not None:
        final_kwargs['connect-type'] = connect_type
    if vxc_permitted is not None:
        final_kwargs['vxc-permitted'] = vxc_permitted
    if authorization_key is not None:
        final_kwargs['authorization-key'] = authorization_key
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectPartnerPorts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectPortSpeeds')
def getInterconnectPortSpeeds(interconnect_type: str, interconnect_account_id: str, connection_type: str, cloud_type: str = None, cloud_account_id: str = None, connect_type: str = None, connect_subtype: str = None, connectivity_gateway_name: str = None, partner_port: str = None, authorization_key: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if interconnect_account_id is not None:
        final_kwargs['interconnect-account-id'] = interconnect_account_id
    if connection_type is not None:
        final_kwargs['connection-type'] = connection_type
    if cloud_type is not None:
        final_kwargs['cloud-type'] = cloud_type
    if cloud_account_id is not None:
        final_kwargs['cloud-account-id'] = cloud_account_id
    if connect_type is not None:
        final_kwargs['connect-type'] = connect_type
    if connect_subtype is not None:
        final_kwargs['connect-subtype'] = connect_subtype
    if connectivity_gateway_name is not None:
        final_kwargs['connectivity-gateway-name'] = connectivity_gateway_name
    if partner_port is not None:
        final_kwargs['partner-port'] = partner_port
    if authorization_key is not None:
        final_kwargs['authorization-key'] = authorization_key

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectPortSpeeds

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectLocationInfo')
def getInterconnectLocationInfo(interconnect_type: str, interconnect_account_id: str, region: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if interconnect_account_id is not None:
        final_kwargs['interconnect-account-id'] = interconnect_account_id
    if region is not None:
        final_kwargs['region'] = region

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectLocationInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectConfigGroupTopology')
def getInterconnectConfigGroupTopology(interconnect_type: str, config_group_id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if config_group_id is not None:
        final_kwargs['config-group-id'] = config_group_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectConfigGroupTopology

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectDeviceLinkPortSpeeds')
def getInterconnectDeviceLinkPortSpeeds(interconnect_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectDeviceLinkPortSpeeds

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAvailableDevicesOrByCGId_1')
def getAvailableDevicesOrByCGId_1(interconnect_type: str, config_group_id: str = None, device_solution_type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if config_group_id is not None:
        final_kwargs['config-group-id'] = config_group_id
    if device_solution_type is not None:
        final_kwargs['device-solution-type'] = device_solution_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAvailableDevicesOrByCGId_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getAvailableDevicesOrByCGId_1'])

@register('getInterconnectGatewayDevices')
def getInterconnectGatewayDevices(interconnect_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectGatewayDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMonitoringInterconnectConnectedSites')
def getMonitoringInterconnectConnectedSites(interconnect_type: str, interconnect_gateway_name: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if interconnect_gateway_name is not None:
        final_kwargs['interconnect-gateway-name'] = interconnect_gateway_name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMonitoringInterconnectConnectedSites

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMonitoringInterconnectDevices')
def getMonitoringInterconnectDevices(interconnect_type: str, interconnect_gateway_name: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type
    if interconnect_gateway_name is not None:
        final_kwargs['interconnect-gateway-name'] = interconnect_gateway_name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMonitoringInterconnectDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMonitoringInterconnectGateways')
def getMonitoringInterconnectGateways(interconnect_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMonitoringInterconnectGateways

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterconnectWidget')
def getInterconnectWidget(interconnect_type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if interconnect_type is not None:
        final_kwargs['interconnect-type'] = interconnect_type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterconnectWidget

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWanInterfaceColors')
def getWanInterfaceColors():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWanInterfaceColors

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLicenses')
def getLicenses(edgeType: str = None, accountId: str = None, productType: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if productType is not None:
        final_kwargs['productType'] = productType
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLicenses

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeLocationsInfo')
def getEdgeLocationsInfo(edgeType: str, accountId: str = None, region: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if region is not None:
        final_kwargs['region'] = region

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeLocationsInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSupportedLoopbackCgwColors')
def getSupportedLoopbackCgwColors():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSupportedLoopbackCgwColors

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSupportedLoopbackTransportColors')
def getSupportedLoopbackTransportColors():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSupportedLoopbackTransportColors

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMappingMatrix')
def getMappingMatrix(cloudType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMappingMatrix

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDefaultMappingValues')
def getDefaultMappingValues(cloudType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefaultMappingValues

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMappingStatus')
def getMappingStatus(cloudType: str, region: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if region is not None:
        final_kwargs['region'] = region

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMappingStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMappingSummary')
def getMappingSummary(cloudType: str = None, vpnTunnelStatus: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if vpnTunnelStatus is not None:
        final_kwargs['vpnTunnelStatus'] = vpnTunnelStatus

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMappingSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMappingTags')
def getMappingTags(cloudType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMappingTags

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeMappingTags')
def getEdgeMappingTags(cloudType: str, accountId: str = None, resourceGroup: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if resourceGroup is not None:
        final_kwargs['resourceGroup'] = resourceGroup

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeMappingTags

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMappingVpns')
def getMappingVpns():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMappingVpns

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCgwAssociatedMappings')
def getCgwAssociatedMappings(cloudType: str, cloudGatewayName: str, siteUuid: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName
    if siteUuid is not None:
        final_kwargs['siteUuid'] = siteUuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCgwAssociatedMappings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPartnerPorts')
def getPartnerPorts(edgeType: str = None, accountId: str = None, cloudType: str = None, connectType: str = None, vxcPermitted: str = None, authorizationKey: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if connectType is not None:
        final_kwargs['connectType'] = connectType
    if vxcPermitted is not None:
        final_kwargs['vxcPermitted'] = vxcPermitted
    if authorizationKey is not None:
        final_kwargs['authorizationKey'] = authorizationKey
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPartnerPorts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPortSpeed')
def getPortSpeed(edgeType: str, edgeAccountId: str, connectivityType: str, cloudType: str = None, cloudAccountId: str = None, connectType: str = None, connectSubType: str = None, connectivityGateway: str = None, partnerPort: str = None, authorizationKey: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType
    if edgeAccountId is not None:
        final_kwargs['edgeAccountId'] = edgeAccountId
    if connectivityType is not None:
        final_kwargs['connectivityType'] = connectivityType
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if cloudAccountId is not None:
        final_kwargs['cloudAccountId'] = cloudAccountId
    if connectType is not None:
        final_kwargs['connectType'] = connectType
    if connectSubType is not None:
        final_kwargs['connectSubType'] = connectSubType
    if connectivityGateway is not None:
        final_kwargs['connectivityGateway'] = connectivityGateway
    if partnerPort is not None:
        final_kwargs['partnerPort'] = partnerPort
    if authorizationKey is not None:
        final_kwargs['authorizationKey'] = authorizationKey

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPortSpeed

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudRegions')
def getCloudRegions(cloudType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudRegions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeGlobalSettings')
def getEdgeGlobalSettings(edgeType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeGlobalSettings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getGlobalSettings')
def getGlobalSettings(cloudType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getGlobalSettings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSites')
def getSites(color: str = None, attached: str = None, solution: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if color is not None:
        final_kwargs['color'] = color
    if attached is not None:
        final_kwargs['attached'] = attached
    if solution is not None:
        final_kwargs['solution'] = solution

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSites

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSshKeyList')
def getSshKeyList(cloudType: str, accountId: str, cloudRegion: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if cloudRegion is not None:
        final_kwargs['cloudRegion'] = cloudRegion

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSshKeyList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSupportedSoftwareImageList')
def getSupportedSoftwareImageList(cloudType: str, accountId: str = None, cloudRegion: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if cloudRegion is not None:
        final_kwargs['cloudRegion'] = cloudRegion

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSupportedSoftwareImageList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTunnelNames')
def getTunnelNames(cloudType: str, cloudGatewayName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if cloudGatewayName is not None:
        final_kwargs['cloudGatewayName'] = cloudGatewayName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTunnelNames

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudTypes')
def getCloudTypes():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudTypes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeTypes')
def getEdgeTypes():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeTypes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVHubs')
def getVHubs(cloudType: str = None, accountId: str = None, resourceGroup: str = None, vWanName: str = None, vNetTags: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if resourceGroup is not None:
        final_kwargs['resourceGroup'] = resourceGroup
    if vWanName is not None:
        final_kwargs['vWanName'] = vWanName
    if vNetTags is not None:
        final_kwargs['vNetTags'] = vNetTags

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVHubs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVWans')
def getVWans(accountId: str = None, cloudType: str = None, resourceGroup: str = None, refresh: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if resourceGroup is not None:
        final_kwargs['resourceGroup'] = resourceGroup
    if refresh is not None:
        final_kwargs['refresh'] = refresh

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVWans

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllCloudWidgets')
def getAllCloudWidgets():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllCloudWidgets

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllEdgeWidgets')
def getAllEdgeWidgets():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllEdgeWidgets

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEdgeWidget')
def getEdgeWidget(edgeType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if edgeType is not None:
        final_kwargs['edgeType'] = edgeType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEdgeWidget

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudWidget')
def getCloudWidget(cloudType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudWidget

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMultiCloudConfigGroupTopology')
def getMultiCloudConfigGroupTopology(cloudType: str, config_group_id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudType is not None:
        final_kwargs['cloudType'] = cloudType
    if config_group_id is not None:
        final_kwargs['config-group-id'] = config_group_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMultiCloudConfigGroupTopology

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVmanageControlStatus')
def getVmanageControlStatus(isCached: bool = None, vpnId: list = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isCached is not None:
        final_kwargs['isCached'] = isCached
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVmanageControlStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRebootCount')
def getRebootCount(isCached: bool):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isCached is not None:
        final_kwargs['isCached'] = isCached

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRebootCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNetworkIssuesSummary')
def getNetworkIssuesSummary():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNetworkIssuesSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNetworkStatusSummary')
def getNetworkStatusSummary():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNetworkStatusSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNetworkDesign')
def getNetworkDesign():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNetworkDesign

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCircuits')
def getCircuits():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCircuits

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getGlobalParameters')
def getGlobalParameters():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getGlobalParameters

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getGlobalTemplate')
def getGlobalTemplate(templateId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if templateId is not None:
        final_kwargs['templateId'] = templateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getGlobalTemplate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('runMyTest')
def runMyTest(name: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if name is not None:
        final_kwargs['name'] = name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.runMyTest

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceProfileFeatureTemplateList')
def getDeviceProfileFeatureTemplateList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceProfileFeatureTemplateList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceProfileConfigStatus')
def getDeviceProfileConfigStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceProfileConfigStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceProfileConfigStatusByProfileId')
def getDeviceProfileConfigStatusByProfileId(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceProfileConfigStatusByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceProfileTaskCount')
def getDeviceProfileTaskCount():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceProfileTaskCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceProfileTaskStatus')
def getDeviceProfileTaskStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceProfileTaskStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceProfileTaskStatusByProfileId')
def getDeviceProfileTaskStatusByProfileId(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceProfileTaskStatusByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateProfileTemplateList')
def generateProfileTemplateList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateProfileTemplateList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceProfileTemplate')
def getDeviceProfileTemplate(templateId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if templateId is not None:
        final_kwargs['templateId'] = templateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceProfileTemplate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getServiceProfileConfig')
def getServiceProfileConfig(profileId: str, deviceModel: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId
    if deviceModel is not None:
        final_kwargs['deviceModel'] = deviceModel

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getServiceProfileConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNotificationRule')
def getNotificationRule(ruleId: str = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if ruleId is not None:
        final_kwargs['ruleId'] = ruleId
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNotificationRule

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDevices')
def getDevices(status: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if status is not None:
        final_kwargs['status'] = status

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('oauthAccess')
def oauthAccess(code: str = None, redirect: str = None, isRefreshNeeded: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if code is not None:
        final_kwargs['code'] = code
    if redirect is not None:
        final_kwargs['redirect'] = redirect
    if isRefreshNeeded is not None:
        final_kwargs['isRefreshNeeded'] = isRefreshNeeded

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.oauthAccess

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getClientID')
def getClientID():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getClientID

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCall')
def getCall():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCall

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPartners')
def getPartners():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPartners

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getACIDefinitions')
def getACIDefinitions():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getACIDefinitions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDscpMappings')
def getDscpMappings(partnerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if partnerId is not None:
        final_kwargs['partnerId'] = partnerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDscpMappings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEvents_1')
def getEvents_1(partnerId: str, starttime: int = None, endtime: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if partnerId is not None:
        final_kwargs['partnerId'] = partnerId
    if starttime is not None:
        final_kwargs['starttime'] = starttime
    if endtime is not None:
        final_kwargs['endtime'] = endtime

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEvents_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getEvents_1'])

@register('getDataPrefixMappings')
def getDataPrefixMappings(partnerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if partnerId is not None:
        final_kwargs['partnerId'] = partnerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDataPrefixMappings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDataPrefixSequences')
def getDataPrefixSequences():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDataPrefixSequences

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSDAEnabledDevices')
def getSDAEnabledDevices(partnerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if partnerId is not None:
        final_kwargs['partnerId'] = partnerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSDAEnabledDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceDetails')
def getDeviceDetails(partnerId: str, uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if partnerId is not None:
        final_kwargs['partnerId'] = partnerId
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSitesForPartner')
def getSitesForPartner(partnerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if partnerId is not None:
        final_kwargs['partnerId'] = partnerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSitesForPartner

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getOverlayVPNList')
def getOverlayVPNList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getOverlayVPNList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVPNList')
def getVPNList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVPNList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPartnersByPartnerType')
def getPartnersByPartnerType(partnerType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if partnerType is not None:
        final_kwargs['partnerType'] = partnerType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPartnersByPartnerType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPartnerDevices')
def getPartnerDevices(partnerType: str, nmsId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if partnerType is not None:
        final_kwargs['partnerType'] = partnerType
    if nmsId is not None:
        final_kwargs['nmsId'] = nmsId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPartnerDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPartner')
def getPartner(partnerType: str, nmsId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if partnerType is not None:
        final_kwargs['partnerType'] = partnerType
    if nmsId is not None:
        final_kwargs['nmsId'] = nmsId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPartner

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSecureXRefreshToken')
def getSecureXRefreshToken(clientId: str, regionBaseUri: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if clientId is not None:
        final_kwargs['clientId'] = clientId
    if regionBaseUri is not None:
        final_kwargs['regionBaseUri'] = regionBaseUri

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSecureXRefreshToken

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getResources')
def getResources(tenantId: str, tenantVpn: int):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if tenantId is not None:
        final_kwargs['tenantId'] = tenantId
    if tenantVpn is not None:
        final_kwargs['tenantVpn'] = tenantVpn

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getResources

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listSchedules')
def listSchedules(limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listSchedules

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getScheduleRecordForBackup')
def getScheduleRecordForBackup(schedulerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schedulerId is not None:
        final_kwargs['schedulerId'] = schedulerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getScheduleRecordForBackup

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getExtendedApplications')
def getExtendedApplications(offset: int = None, limit: int = None, sortBy: str = None, orderBy: str = None, applicationFamily: str = None, applicationGroup: str = None, trafficClass: str = None, businessRelevance: str = None, status: str = None, appName: str = None, source: str = None, searchKeyword: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if orderBy is not None:
        final_kwargs['orderBy'] = orderBy
    if applicationFamily is not None:
        final_kwargs['applicationFamily'] = applicationFamily
    if applicationGroup is not None:
        final_kwargs['applicationGroup'] = applicationGroup
    if trafficClass is not None:
        final_kwargs['trafficClass'] = trafficClass
    if businessRelevance is not None:
        final_kwargs['businessRelevance'] = businessRelevance
    if status is not None:
        final_kwargs['status'] = status
    if appName is not None:
        final_kwargs['appName'] = appName
    if source is not None:
        final_kwargs['source'] = source
    if searchKeyword is not None:
        final_kwargs['searchKeyword'] = searchKeyword

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getExtendedApplications

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudConnector')
def getCloudConnector():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudConnector

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudConnectorStatus')
def getCloudConnectorStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudConnectorStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCustomApp')
def getCustomApp():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCustomApp

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllProtocolPacks')
def getAllProtocolPacks():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllProtocolPacks

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getBaseSystemPack')
def getBaseSystemPack():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBaseSystemPack

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllSDAVCDevice')
def getAllSDAVCDevice():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllSDAVCDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDefaultApplicationComplianceDetails')
def getDefaultApplicationComplianceDetails():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefaultApplicationComplianceDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('isApplicationComplianceDetected')
def isApplicationComplianceDetected():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.isApplicationComplianceDetected

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getApplicationComplianceStatus')
def getApplicationComplianceStatus(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getApplicationComplianceStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getApplicationComplianceDetails')
def getApplicationComplianceDetails(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getApplicationComplianceDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCustomApplicationList')
def getCustomApplicationList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCustomApplicationList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNonCompliantDevicesForProtocolPack')
def getNonCompliantDevicesForProtocolPack(protocolPackName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if protocolPackName is not None:
        final_kwargs['protocolPackName'] = protocolPackName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNonCompliantDevicesForProtocolPack

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceComplianceStatus')
def getDeviceComplianceStatus(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceComplianceStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNewApplicationList')
def getNewApplicationList(deviceUUID: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceUUID is not None:
        final_kwargs['deviceUUID'] = deviceUUID

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNewApplicationList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCompliancePolicy')
def getCompliancePolicy(offset: int = None, limit: int = None, protocolPackName: str = None, oldApplicationSource: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if protocolPackName is not None:
        final_kwargs['protocolPackName'] = protocolPackName
    if oldApplicationSource is not None:
        final_kwargs['oldApplicationSource'] = oldApplicationSource

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCompliancePolicy

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyComplianceStatus')
def getPolicyComplianceStatus(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyComplianceStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDefaultSystemPack')
def getDefaultSystemPack():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefaultSystemPack

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLatestSystemPack')
def getLatestSystemPack():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLatestSystemPack

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeployJobStatus')
def getDeployJobStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeployJobStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeployJobStatus_1')
def getDeployJobStatus_1(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeployJobStatus_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getDeployJobStatus_1'])

@register('getProtocolPackUploadStatus')
def getProtocolPackUploadStatus(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getProtocolPackUploadStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSecurityDeviceHealth')
def getSecurityDeviceHealth(deviceIp: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceIp is not None:
        final_kwargs['deviceIp'] = deviceIp

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSecurityDeviceHealth

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSecurityPolicyDeviceList')
def getSecurityPolicyDeviceList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSecurityPolicyDeviceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSegments')
def getSegments():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSegments

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSegment')
def getSegment(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSegment

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createServerInfo_1')
def createServerInfo_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createServerInfo_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['createServerInfo_1'])

@register('getDataChangeInfo')
def getDataChangeInfo(partnerId: str, event_id: str = None, eventNames: list = None, wait_time: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if partnerId is not None:
        final_kwargs['partnerId'] = partnerId
    if event_id is not None:
        final_kwargs['event_id'] = event_id
    if eventNames is not None:
        final_kwargs['eventNames'] = eventNames
    if wait_time is not None:
        final_kwargs['wait_time'] = wait_time

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDataChangeInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('showInfo')
def showInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.showInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCertificate')
def getCertificate():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCertificate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getBanner')
def getBanner():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBanner

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSessionTimout')
def getSessionTimout():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSessionTimout

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCertConfiguration')
def getCertConfiguration(type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCertConfiguration

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudxConfiguration')
def getCloudxConfiguration():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudxConfiguration

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getGoogleMapKey')
def getGoogleMapKey():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getGoogleMapKey

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMaintenanceWindow')
def getMaintenanceWindow():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMaintenanceWindow

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMicrosoftTelemetryConfiguration')
def getMicrosoftTelemetryConfiguration():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMicrosoftTelemetryConfiguration

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWaniConfiguration')
def getWaniConfiguration():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWaniConfiguration

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConfigurationBySettingType')
def getConfigurationBySettingType(type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConfigurationBySettingType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPasswordPolicy')
def getPasswordPolicy():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPasswordPolicy

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSigDynamicDataCenterList')
def getSigDynamicDataCenterList(type: str, tunneltype: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if tunneltype is not None:
        final_kwargs['tunneltype'] = tunneltype

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSigDynamicDataCenterList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSigDataCenterList')
def getSigDataCenterList(type: str, tunneltype: str, devicetype: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if tunneltype is not None:
        final_kwargs['tunneltype'] = tunneltype
    if devicetype is not None:
        final_kwargs['devicetype'] = devicetype

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSigDataCenterList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSigGlobalCredentials')
def getSigGlobalCredentials(featureTemplateType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if featureTemplateType is not None:
        final_kwargs['featureTemplateType'] = featureTemplateType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSigGlobalCredentials

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getChildOrgs')
def getChildOrgs(type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getChildOrgs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('fetchAccounts')
def fetchAccounts(mode: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if mode is not None:
        final_kwargs['mode'] = mode

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.fetchAccounts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('fetchReports_1')
def fetchReports_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.fetchReports_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['fetchReports_1'])

@register('fetchReports')
def fetchReports(saDomain: str, saId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if saDomain is not None:
        final_kwargs['saDomain'] = saDomain
    if saId is not None:
        final_kwargs['saId'] = saId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.fetchReports

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSettings')
def getSettings():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSettings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getProxyCertOfEdge')
def getProxyCertOfEdge(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getProxyCertOfEdge

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSslProxyCSR')
def getSslProxyCSR(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSslProxyCSR

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSslProxyList')
def getSslProxyList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSslProxyList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCertificateState')
def getCertificateState():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCertificateState

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEnterpriseCertificate')
def getEnterpriseCertificate():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEnterpriseCertificate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVManageEnterpriseRootCertificate')
def getVManageEnterpriseRootCertificate():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVManageEnterpriseRootCertificate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getvManageCertificate')
def getvManageCertificate():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getvManageCertificate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getvManageCSR')
def getvManageCSR():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getvManageCSR

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getvManageRootCA')
def getvManageRootCA():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getvManageRootCA

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatisticType')
def getStatisticType():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatisticType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAggregationDataByQuery_14')
def getAggregationDataByQuery_14(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getAggregationDataByQuery_14'])

@register('getStatDataRawData_1')
def getStatDataRawData_1(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getStatDataRawData_1'])

@register('getAggregationDataByQuery_1')
def getAggregationDataByQuery_1(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getAggregationDataByQuery_1'])

@register('getStatDataRawDataAsCSV_1')
def getStatDataRawDataAsCSV_1(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getStatDataRawDataAsCSV_1'])

@register('getCount_2')
def getCount_2(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getCount_2'])

@register('getStatDataFields_2')
def getStatDataFields_2():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getStatDataFields_2'])

@register('getStatsPaginationRawData_1')
def getStatsPaginationRawData_1(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getStatsPaginationRawData_1'])

@register('getStatQueryFields_2')
def getStatQueryFields_2():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getStatQueryFields_2'])

@register('getStatDataRawData')
def getStatDataRawData(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAggregationDataByQuery')
def getAggregationDataByQuery(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawDataAsCSV')
def getStatDataRawDataAsCSV(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCount_1')
def getCount_1(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getCount_1'])

@register('getStatDataFields_1')
def getStatDataFields_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getStatDataFields_1'])

@register('getStatsPaginationRawData')
def getStatsPaginationRawData(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatQueryFields_1')
def getStatQueryFields_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getStatQueryFields_1'])

@register('getStatDataRawData_2')
def getStatDataRawData_2(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getStatDataRawData_2'])

@register('getAggregationDataByQuery_2')
def getAggregationDataByQuery_2(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getAggregationDataByQuery_2'])

@register('getStatDataRawDataAsCSV_2')
def getStatDataRawDataAsCSV_2(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getStatDataRawDataAsCSV_2'])

@register('getStatsAppRouteDeviceTunnelSummary')
def getStatsAppRouteDeviceTunnelSummary(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsAppRouteDeviceTunnelSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatsAppRouteDeviceTunnels')
def getStatsAppRouteDeviceTunnels(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsAppRouteDeviceTunnels

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDocCount_1')
def getDocCount_1(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDocCount_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getDocCount_1'])

@register('getStatDataFields_3')
def getStatDataFields_3():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['getStatDataFields_3'])

@register('getStatBulkRawData')
def getStatBulkRawData(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatBulkRawData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatQueryFields_3')
def getStatQueryFields_3():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['getStatQueryFields_3'])

@register('getAppRouteTransportSummaryType')
def getAppRouteTransportSummaryType(type: str, limit: int = None, query: str = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if limit is not None:
        final_kwargs['limit'] = limit
    if query is not None:
        final_kwargs['query'] = query
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppRouteTransportSummaryType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppRouteTransportType')
def getAppRouteTransportType(type: str, limit: int, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if query is not None:
        final_kwargs['query'] = query
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppRouteTransportType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppRouteTunnelSummaryType')
def getAppRouteTunnelSummaryType(type: str, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppRouteTunnelSummaryType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppRouteTunnelHealth')
def getAppRouteTunnelHealth(type: str, limit: int = None, last_n_hours: int = None, last_n_minutes: int = None, deviceIP: str = None, site_id: str = None, regionName: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if limit is not None:
        final_kwargs['limit'] = limit
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours
    if last_n_minutes is not None:
        final_kwargs['last_n_minutes'] = last_n_minutes
    if deviceIP is not None:
        final_kwargs['deviceIP'] = deviceIP
    if site_id is not None:
        final_kwargs['site-id'] = site_id
    if regionName is not None:
        final_kwargs['regionName'] = regionName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppRouteTunnelHealth

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppRouteTunnelsSummaryType')
def getAppRouteTunnelsSummaryType(type: str, query: str = None, limit: int = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if query is not None:
        final_kwargs['query'] = query
    if limit is not None:
        final_kwargs['limit'] = limit
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppRouteTunnelsSummaryType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppRouteTunnelType')
def getAppRouteTunnelType(type: str, query: str = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if query is not None:
        final_kwargs['query'] = query
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppRouteTunnelType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawData_4')
def getStatDataRawData_4(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getStatDataRawData_4'])

@register('getAggregationDataByQuery_4')
def getAggregationDataByQuery_4(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getAggregationDataByQuery_4'])

@register('getStatDataRawDataAsCSV_4')
def getStatDataRawDataAsCSV_4(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getStatDataRawDataAsCSV_4'])

@register('getCount_4')
def getCount_4(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getCount_4'])

@register('getStatDataFields_5')
def getStatDataFields_5():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getStatDataFields_5'])

@register('getStatsPaginationRawData_3')
def getStatsPaginationRawData_3(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['getStatsPaginationRawData_3'])

@register('getStatQueryFields_5')
def getStatQueryFields_5():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getStatQueryFields_5'])

@register('getStatDataRawData_5')
def getStatDataRawData_5(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getStatDataRawData_5'])

@register('getAggregationDataByQuery_5')
def getAggregationDataByQuery_5(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getAggregationDataByQuery_5'])

@register('getStatDataRawDataAsCSV_5')
def getStatDataRawDataAsCSV_5(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getStatDataRawDataAsCSV_5'])

@register('getCount_5')
def getCount_5(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getCount_5'])

@register('getStatDataFields_6')
def getStatDataFields_6():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getStatDataFields_6'])

@register('getStatsPaginationRawData_4')
def getStatsPaginationRawData_4(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getStatsPaginationRawData_4'])

@register('getStatQueryFields_6')
def getStatQueryFields_6():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getStatQueryFields_6'])

@register('getStatDataRawData_6')
def getStatDataRawData_6(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getStatDataRawData_6'])

@register('getAggregationDataByQuery_6')
def getAggregationDataByQuery_6(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getAggregationDataByQuery_6'])

@register('getStatDataRawDataAsCSV_6')
def getStatDataRawDataAsCSV_6(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getStatDataRawDataAsCSV_6'])

@register('getCount_6')
def getCount_6(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getCount_6'])

@register('getStatDataFields_7')
def getStatDataFields_7():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getStatDataFields_7'])

@register('getStatsPaginationRawData_5')
def getStatsPaginationRawData_5(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getStatsPaginationRawData_5'])

@register('getStatQueryFields_7')
def getStatQueryFields_7():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getStatQueryFields_7'])

@register('getStatDataRawData_7')
def getStatDataRawData_7(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getStatDataRawData_7'])

@register('getAggregationDataByQuery_7')
def getAggregationDataByQuery_7(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getAggregationDataByQuery_7'])

@register('getStatDataRawDataAsCSV_7')
def getStatDataRawDataAsCSV_7(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getStatDataRawDataAsCSV_7'])

@register('getCount_7')
def getCount_7(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getCount_7'])

@register('getStatDataFields_8')
def getStatDataFields_8():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getStatDataFields_8'])

@register('getStatsPaginationRawData_6')
def getStatsPaginationRawData_6(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getStatsPaginationRawData_6'])

@register('getStatQueryFields_8')
def getStatQueryFields_8():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getStatQueryFields_8'])

@register('getStatDataRawData_9')
def getStatDataRawData_9(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getStatDataRawData_9'])

@register('getAggregationDataByQuery_9')
def getAggregationDataByQuery_9(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getAggregationDataByQuery_9'])

@register('createFlowsGrid')
def createFlowsGrid(vpn: str = None, deviceId: str = None, limit: int = None, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vpn is not None:
        final_kwargs['vpn'] = vpn
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if limit is not None:
        final_kwargs['limit'] = limit
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createFlowsGrid

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createFlowssummary')
def createFlowssummary(limit: int = None, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if limit is not None:
        final_kwargs['limit'] = limit
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createFlowssummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawDataAsCSV_9')
def getStatDataRawDataAsCSV_9(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getStatDataRawDataAsCSV_9'])

@register('createFlowDeviceData')
def createFlowDeviceData(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createFlowDeviceData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCount_9')
def getCount_9(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getCount_9'])

@register('getStatDataFields_10')
def getStatDataFields_10():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getStatDataFields_10'])

@register('getStatsPaginationRawData_8')
def getStatsPaginationRawData_8(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getStatsPaginationRawData_8'])

@register('getStatQueryFields_10')
def getStatQueryFields_10():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getStatQueryFields_10'])

@register('getStatDataRawData_10')
def getStatDataRawData_10(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getStatDataRawData_10'])

@register('getAggregationDataByQuery_10')
def getAggregationDataByQuery_10(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getAggregationDataByQuery_10'])

@register('getStatDataRawDataAsCSV_10')
def getStatDataRawDataAsCSV_10(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getStatDataRawDataAsCSV_10'])

@register('getCount_10')
def getCount_10(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getCount_10'])

@register('getStatDataFields_11')
def getStatDataFields_11():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getStatDataFields_11'])

@register('getStatsPaginationRawData_9')
def getStatsPaginationRawData_9(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getStatsPaginationRawData_9'])

@register('getStatQueryFields_11')
def getStatQueryFields_11():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getStatQueryFields_11'])

@register('startStatsCollection')
def startStatsCollection():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.startStatsCollection

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateStatsCollectThreadReport')
def generateStatsCollectThreadReport():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateStatsCollectThreadReport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('resetStatsCollection')
def resetStatsCollection(processQueue: int):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if processQueue is not None:
        final_kwargs['processQueue'] = processQueue

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.resetStatsCollection

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawDataAsCSV_13')
def getStatDataRawDataAsCSV_13(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getStatDataRawDataAsCSV_13'])

@register('enableStatisticsDemoMode')
def enableStatisticsDemoMode(enable: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if enable is not None:
        final_kwargs['enable'] = enable

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.enableStatisticsDemoMode

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawData_16')
def getStatDataRawData_16(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getStatDataRawData_16'])

@register('getAggregationDataByQuery_18')
def getAggregationDataByQuery_18(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getAggregationDataByQuery_18'])

@register('getStatDataRawDataAsCSV_16')
def getStatDataRawDataAsCSV_16(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getStatDataRawDataAsCSV_16'])

@register('getCount_15')
def getCount_15(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getCount_15'])

@register('getStatDataFields_17')
def getStatDataFields_17():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getStatDataFields_17'])

@register('getStatsPaginationRawData_14')
def getStatsPaginationRawData_14(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getStatsPaginationRawData_14'])

@register('getStatQueryFields_18')
def getStatQueryFields_18():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getStatQueryFields_18'])

@register('getDeviceHealthHistory')
def getDeviceHealthHistory(last_n_hours: int = None, site: str = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours
    if site is not None:
        final_kwargs['site'] = site
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceHealthHistory

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceHealthOverview')
def getDeviceHealthOverview(type: str, last_n_hours: int = None, site: str = None, personality: str = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours
    if site is not None:
        final_kwargs['site'] = site
    if personality is not None:
        final_kwargs['personality'] = personality
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceHealthOverview

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCount_12')
def getCount_12(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getCount_12'])

@register('fetchList')
def fetchList(processType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if processType is not None:
        final_kwargs['processType'] = processType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.fetchList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('download')
def download(processType: str, fileType: str, queue: str, deviceIp: str, token: str, fileName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if processType is not None:
        final_kwargs['processType'] = processType
    if fileType is not None:
        final_kwargs['fileType'] = fileType
    if queue is not None:
        final_kwargs['queue'] = queue
    if deviceIp is not None:
        final_kwargs['deviceIp'] = deviceIp
    if token is not None:
        final_kwargs['token'] = token
    if fileName is not None:
        final_kwargs['fileName'] = fileName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.download

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIStatsRawData')
def getDPIStatsRawData(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIStatsRawData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIStatsAggregationData')
def getDPIStatsAggregationData(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIStatsAggregationData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAggAppFlows')
def getAggAppFlows(query: str, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggAppFlows

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAggAppFlowsSummary')
def getAggAppFlowsSummary(query: str, limit: int = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if limit is not None:
        final_kwargs['limit'] = limit
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggAppFlowsSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIStatsRawDataAsCSV')
def getDPIStatsRawDataAsCSV(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIStatsRawDataAsCSV

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIDeviceAppUniqueFlowCount')
def getDPIDeviceAppUniqueFlowCount(deviceId: str, interval: str, window: int, application: str = None, family: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if interval is not None:
        final_kwargs['interval'] = interval
    if application is not None:
        final_kwargs['application'] = application
    if window is not None:
        final_kwargs['window'] = window
    if family is not None:
        final_kwargs['family'] = family

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIDeviceAppUniqueFlowCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIDeviceAppAggregationData')
def getDPIDeviceAppAggregationData(query: str, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIDeviceAppAggregationData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIDeviceAppDetails')
def getDPIDeviceAppDetails(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIDeviceAppDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIStatsCount')
def getDPIStatsCount(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIStatsCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIFields')
def getDPIFields():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIFields

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIStatsPaginationRawData')
def getDPIStatsPaginationRawData(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIStatsPaginationRawData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDPIQueryFields')
def getDPIQueryFields():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDPIQueryFields

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawData_8')
def getStatDataRawData_8(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getStatDataRawData_8'])

@register('getAggregationDataByQuery_8')
def getAggregationDataByQuery_8(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getAggregationDataByQuery_8'])

@register('getStatDataRawDataAsCSV_8')
def getStatDataRawDataAsCSV_8(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getStatDataRawDataAsCSV_8'])

@register('getCount_8')
def getCount_8(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getCount_8'])

@register('getStatDataFields_9')
def getStatDataFields_9():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getStatDataFields_9'])

@register('getStatsPaginationRawData_7')
def getStatsPaginationRawData_7(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getStatsPaginationRawData_7'])

@register('getStatQueryFields_9')
def getStatQueryFields_9():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getStatQueryFields_9'])

@register('getStatDataRawData_19')
def getStatDataRawData_19(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getStatDataRawData_19'])

@register('getAggregationDataByQuery_21')
def getAggregationDataByQuery_21(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getAggregationDataByQuery_21'])

@register('getStatDataRawDataAsCSV_19')
def getStatDataRawDataAsCSV_19(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getStatDataRawDataAsCSV_19'])

@register('getCount_18')
def getCount_18(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getCount_18'])

@register('getStatDataFields_20')
def getStatDataFields_20():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getStatDataFields_20'])

@register('getStatsPaginationRawData_17')
def getStatsPaginationRawData_17(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getStatsPaginationRawData_17'])

@register('getStatQueryFields_21')
def getStatQueryFields_21():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getStatQueryFields_21'])

@register('getStatDataFields_14')
def getStatDataFields_14():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getStatDataFields_14'])

@register('getStatDataRawData_14')
def getStatDataRawData_14(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None, site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getStatDataRawData_14'])

@register('getAggregationDataByQuery_28')
def getAggregationDataByQuery_28(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_28

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('28')(globals()['getAggregationDataByQuery_28'])

@register('getStatDataRawDataAsCSV_26')
def getStatDataRawDataAsCSV_26(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['getStatDataRawDataAsCSV_26'])

@register('getFlowlogCount')
def getFlowlogCount(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFlowlogCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFlowlogFields')
def getFlowlogFields():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFlowlogFields

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatsPaginationRawData_24')
def getStatsPaginationRawData_24(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getStatsPaginationRawData_24'])

@register('getFlowlogQueryFields')
def getFlowlogQueryFields():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFlowlogQueryFields

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawData_24')
def getStatDataRawData_24(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getStatDataRawData_24'])

@register('getAggregationDataByQuery_26')
def getAggregationDataByQuery_26(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['getAggregationDataByQuery_26'])

@register('getStatDataRawDataAsCSV_24')
def getStatDataRawDataAsCSV_24(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getStatDataRawDataAsCSV_24'])

@register('getCount_23')
def getCount_23(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getCount_23'])

@register('getStatDataFields_25')
def getStatDataFields_25():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getStatDataFields_25'])

@register('getStatsPaginationRawData_22')
def getStatsPaginationRawData_22(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getStatsPaginationRawData_22'])

@register('getStatQueryFields_26')
def getStatQueryFields_26():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['getStatQueryFields_26'])

@register('getStatDataRawData_11')
def getStatDataRawData_11(query: str, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getStatDataRawData_11'])

@register('getAggregationDataByQuery_11')
def getAggregationDataByQuery_11(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getAggregationDataByQuery_11'])

@register('getBandwidthDistribution')
def getBandwidthDistribution(site_id: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if site_id is not None:
        final_kwargs['site-id'] = site_id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBandwidthDistribution

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawDataAsCSV_11')
def getStatDataRawDataAsCSV_11(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getStatDataRawDataAsCSV_11'])

@register('getCount10')
def getCount10(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataFields_12')
def getStatDataFields_12():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getStatDataFields_12'])

@register('getStatBulkRawData_1')
def getStatBulkRawData_1(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatBulkRawData_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getStatBulkRawData_1'])

@register('getStatQueryFields_12')
def getStatQueryFields_12():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getStatQueryFields_12'])

@register('getStatisticsPerInterface')
def getStatisticsPerInterface(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatisticsPerInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawData_22')
def getStatDataRawData_22(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getStatDataRawData_22'])

@register('getAggregationDataByQuery_24')
def getAggregationDataByQuery_24(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getAggregationDataByQuery_24'])

@register('getStatDataRawDataAsCSV_22')
def getStatDataRawDataAsCSV_22(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getStatDataRawDataAsCSV_22'])

@register('getCount_21')
def getCount_21(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getCount_21'])

@register('getStatDataFields_23')
def getStatDataFields_23():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getStatDataFields_23'])

@register('getStatsPaginationRawData_20')
def getStatsPaginationRawData_20(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getStatsPaginationRawData_20'])

@register('getStatQueryFields_24')
def getStatQueryFields_24():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getStatQueryFields_24'])

@register('getQueueEntries')
def getQueueEntries():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getQueueEntries

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getQueueProperties')
def getQueueProperties():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getQueueProperties

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatsPaginationRawData_11')
def getStatsPaginationRawData_11(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getStatsPaginationRawData_11'])

@register('getApplicationHeatMapDetail')
def getApplicationHeatMapDetail(application: str, start_time: int, heatmap_time: int, siteid: str = None, last_n_hours: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if application is not None:
        final_kwargs['application'] = application
    if siteid is not None:
        final_kwargs['siteid'] = siteid
    if start_time is not None:
        final_kwargs['start_time'] = start_time
    if heatmap_time is not None:
        final_kwargs['heatmap_time'] = heatmap_time
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getApplicationHeatMapDetail

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getApplicationSitesHealth')
def getApplicationSitesHealth(application: str, isHeatMap: bool = None, last_n_hours: str = None, health: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if application is not None:
        final_kwargs['application'] = application
    if isHeatMap is not None:
        final_kwargs['isHeatMap'] = isHeatMap
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours
    if health is not None:
        final_kwargs['health'] = health

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getApplicationSitesHealth

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getApplicationsSiteHealth')
def getApplicationsSiteHealth(siteid: str, isHeatMap: bool = None, last_n_hours: str = None, health: str = None, includeUsage: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if siteid is not None:
        final_kwargs['siteid'] = siteid
    if isHeatMap is not None:
        final_kwargs['isHeatMap'] = isHeatMap
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours
    if health is not None:
        final_kwargs['health'] = health
    if includeUsage is not None:
        final_kwargs['includeUsage'] = includeUsage

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getApplicationsSiteHealth

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getApplicationsSitesHealth')
def getApplicationsSitesHealth(isHeatMap: bool = None, last_n_hours: str = None, health: str = None, includeUsage: bool = None, useCache: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isHeatMap is not None:
        final_kwargs['isHeatMap'] = isHeatMap
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours
    if health is not None:
        final_kwargs['health'] = health
    if includeUsage is not None:
        final_kwargs['includeUsage'] = includeUsage
    if useCache is not None:
        final_kwargs['useCache'] = useCache

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getApplicationsSitesHealth

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSupportedDeviceList')
def getSupportedDeviceList(last_n_hours: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSupportedDeviceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('processStatisticsData')
def processStatisticsData():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.processStatisticsData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatisticsProcessingCounters')
def getStatisticsProcessingCounters():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatisticsProcessingCounters

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateStatsProcessReport')
def generateStatsProcessReport(processQueue: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if processQueue is not None:
        final_kwargs['processQueue'] = processQueue

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateStatsProcessReport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateStatsProcessThreadReport')
def generateStatsProcessThreadReport():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateStatsProcessThreadReport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawData_3')
def getStatDataRawData_3(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['getStatDataRawData_3'])

@register('getAggregationDataByQuery_15')
def getAggregationDataByQuery_15(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getAggregationDataByQuery_15'])

@register('getStatDataRawDataAsCSV_3')
def getStatDataRawDataAsCSV_3(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['getStatDataRawDataAsCSV_3'])

@register('getCount_3')
def getCount_3(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['getCount_3'])

@register('getStatDataFields_4')
def getStatDataFields_4():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getStatDataFields_4'])

@register('getStatsPaginationRawData_2')
def getStatsPaginationRawData_2(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getStatsPaginationRawData_2'])

@register('getStatQueryFields_4')
def getStatQueryFields_4():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getStatQueryFields_4'])

@register('getStatDataRawData_13')
def getStatDataRawData_13(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getStatDataRawData_13'])

@register('getAggregationDataByQuery_13')
def getAggregationDataByQuery_13(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getAggregationDataByQuery_13'])

@register('getStatDataRawDataAsCSV12')
def getStatDataRawDataAsCSV12(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCount13')
def getCount13(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataFields13')
def getStatDataFields13():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatBulkRawData_2')
def getStatBulkRawData_2(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatBulkRawData_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getStatBulkRawData_2'])

@register('getStatQueryFields_14')
def getStatQueryFields_14():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getStatQueryFields_14'])

@register('getStatQueryFields_15')
def getStatQueryFields_15():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getStatQueryFields_15'])

@register('getSdraHeadendSummary')
def getSdraHeadendSummary(site: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if site is not None:
        final_kwargs['site'] = site

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSdraHeadendSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSdraSessionSummary')
def getSdraSessionSummary(site: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if site is not None:
        final_kwargs['site'] = site

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSdraSessionSummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDisabledDeviceList')
def getDisabledDeviceList(indexName: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if indexName is not None:
        final_kwargs['indexName'] = indexName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDisabledDeviceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatisticsSettings')
def getStatisticsSettings():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatisticsSettings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEnabledIndexForDevice')
def getEnabledIndexForDevice(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEnabledIndexForDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawData_15')
def getStatDataRawData_15(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getStatDataRawData_15'])

@register('getAggregationDataByQuery_16')
def getAggregationDataByQuery_16(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getAggregationDataByQuery_16'])

@register('getSiteHealth')
def getSiteHealth(isHeatMap: str = None, last_n_hours: int = None, interval: int = None, health: str = None, start_time: int = None, end_time: int = None, includeDetails: str = None, includeRegion: str = None, regionName: str = None, deviceType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if isHeatMap is not None:
        final_kwargs['isHeatMap'] = isHeatMap
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours
    if interval is not None:
        final_kwargs['interval'] = interval
    if health is not None:
        final_kwargs['health'] = health
    if start_time is not None:
        final_kwargs['start_time'] = start_time
    if end_time is not None:
        final_kwargs['end_time'] = end_time
    if includeDetails is not None:
        final_kwargs['includeDetails'] = includeDetails
    if includeRegion is not None:
        final_kwargs['includeRegion'] = includeRegion
    if regionName is not None:
        final_kwargs['regionName'] = regionName
    if deviceType is not None:
        final_kwargs['deviceType'] = deviceType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSiteHealth

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawDataAsCSV_14')
def getStatDataRawDataAsCSV_14(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getStatDataRawDataAsCSV_14'])

@register('getCount_13')
def getCount_13(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getCount_13'])

@register('getStatDataFields_15')
def getStatDataFields_15():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getStatDataFields_15'])

@register('getStatsPaginationRawData_12')
def getStatsPaginationRawData_12(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getStatsPaginationRawData_12'])

@register('getStatQueryFields_16')
def getStatQueryFields_16():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getStatQueryFields_16'])

@register('getSiteHealthTopology')
def getSiteHealthTopology(last_n_hours: int = None, start_time: int = None, end_time: int = None, interval: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours
    if start_time is not None:
        final_kwargs['start_time'] = start_time
    if end_time is not None:
        final_kwargs['end_time'] = end_time
    if interval is not None:
        final_kwargs['interval'] = interval

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSiteHealthTopology

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawData_26')
def getStatDataRawData_26(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['getStatDataRawData_26'])

@register('getAggregationDataByQuery_29')
def getAggregationDataByQuery_29(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_29

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('29')(globals()['getAggregationDataByQuery_29'])

@register('getStatDataRawDataAsCSV_27')
def getStatDataRawDataAsCSV_27(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_27

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('27')(globals()['getStatDataRawDataAsCSV_27'])

@register('getCount_25')
def getCount_25(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getCount_25'])

@register('getStatDataFields_27')
def getStatDataFields_27():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_27

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('27')(globals()['getStatDataFields_27'])

@register('getStatsPaginationRawData_25')
def getStatsPaginationRawData_25(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getStatsPaginationRawData_25'])

@register('getStatQueryFields_29')
def getStatQueryFields_29():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_29

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('29')(globals()['getStatQueryFields_29'])

@register('getSulStatDataRawData')
def getSulStatDataRawData(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSulStatDataRawData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAggregationDataByQuery_17')
def getAggregationDataByQuery_17(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getAggregationDataByQuery_17'])

@register('getStatDataRawDataAsCSV_15')
def getStatDataRawDataAsCSV_15(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getStatDataRawDataAsCSV_15'])

@register('getCount_14')
def getCount_14(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getCount_14'])

@register('getStatDataFields_16')
def getStatDataFields_16():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getStatDataFields_16'])

@register('getFilterPolicyNameList')
def getFilterPolicyNameList(policyType: str, query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyType is not None:
        final_kwargs['policyType'] = policyType
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFilterPolicyNameList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatsPaginationRawData_13')
def getStatsPaginationRawData_13(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getStatsPaginationRawData_13'])

@register('getStatQueryFields_17')
def getStatQueryFields_17():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getStatQueryFields_17'])

@register('getStatDataRawData_17')
def getStatDataRawData_17(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getStatDataRawData_17'])

@register('getAggregationDataByQuery_19')
def getAggregationDataByQuery_19(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getAggregationDataByQuery_19'])

@register('createDeviceSystemCPUStat')
def createDeviceSystemCPUStat(query: str, deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceSystemCPUStat

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawDataAsCSV_17')
def getStatDataRawDataAsCSV_17(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getStatDataRawDataAsCSV_17'])

@register('getCount_16')
def getCount_16(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getCount_16'])

@register('getStatDataFields_18')
def getStatDataFields_18():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getStatDataFields_18'])

@register('createDeviceSystemMemoryStat')
def createDeviceSystemMemoryStat(query: str, deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceSystemMemoryStat

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatsPaginationRawData_15')
def getStatsPaginationRawData_15(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getStatsPaginationRawData_15'])

@register('getStatQueryFields_19')
def getStatQueryFields_19():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getStatQueryFields_19'])

@register('getStatDataRawData_18')
def getStatDataRawData_18(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getStatDataRawData_18'])

@register('getAggregationDataByQuery_20')
def getAggregationDataByQuery_20(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getAggregationDataByQuery_20'])

@register('getStatDataRawDataAsCSV_18')
def getStatDataRawDataAsCSV_18(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getStatDataRawDataAsCSV_18'])

@register('getCount_17')
def getCount_17(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getCount_17'])

@register('getStatDataFields_19')
def getStatDataFields_19():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getStatDataFields_19'])

@register('getStatsPaginationRawData_16')
def getStatsPaginationRawData_16(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getStatsPaginationRawData_16'])

@register('getStatQueryFields_20')
def getStatQueryFields_20():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getStatQueryFields_20'])

@register('statisticsApprouteTunnelhealthHistoryGet')
def statisticsApprouteTunnelhealthHistoryGet(last_n_hours: int = None, site: str = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours
    if site is not None:
        final_kwargs['site'] = site
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.statisticsApprouteTunnelhealthHistoryGet

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('statisticsApprouteTunnelhealthOverviewTypeGet')
def statisticsApprouteTunnelhealthOverviewTypeGet(type: str, last_n_hours: int = None, site: str = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours
    if site is not None:
        final_kwargs['site'] = site
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.statisticsApprouteTunnelhealthOverviewTypeGet

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataRawData_25')
def getStatDataRawData_25(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getStatDataRawData_25'])

@register('getAggregationDataByQuery_27')
def getAggregationDataByQuery_27(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_27

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('27')(globals()['getAggregationDataByQuery_27'])

@register('getStatDataRawDataAsCSV_25')
def getStatDataRawDataAsCSV_25(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getStatDataRawDataAsCSV_25'])

@register('getCount_24')
def getCount_24(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getCount_24'])

@register('getStatDataFields_26')
def getStatDataFields_26():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['getStatDataFields_26'])

@register('getStatsPaginationRawData_23')
def getStatsPaginationRawData_23(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getStatsPaginationRawData_23'])

@register('getStatQueryFields_27')
def getStatQueryFields_27():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_27

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('27')(globals()['getStatQueryFields_27'])

@register('getStatDataRawData_23')
def getStatDataRawData_23(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getStatDataRawData_23'])

@register('getAggregationDataByQuery_25')
def getAggregationDataByQuery_25(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getAggregationDataByQuery_25'])

@register('getStatDataRawDataAsCSV_23')
def getStatDataRawDataAsCSV_23(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getStatDataRawDataAsCSV_23'])

@register('getCount_22')
def getCount_22(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getCount_22'])

@register('getStatDataFields_24')
def getStatDataFields_24():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getStatDataFields_24'])

@register('getStatsPaginationRawData_21')
def getStatsPaginationRawData_21(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getStatsPaginationRawData_21'])

@register('getStatQueryFields_25')
def getStatQueryFields_25():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getStatQueryFields_25'])

@register('getStatDataRawData_12')
def getStatDataRawData_12(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getStatDataRawData_12'])

@register('getAggregationDataByQuery_12')
def getAggregationDataByQuery_12(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getAggregationDataByQuery_12'])

@register('getStatDataRawDataAsCSV_12')
def getStatDataRawDataAsCSV_12(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getStatDataRawDataAsCSV_12'])

@register('getCount_11')
def getCount_11(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getCount_11'])

@register('getStatDataFields_13')
def getStatDataFields_13():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getStatDataFields_13'])

@register('getStatsPaginationRawData_10')
def getStatsPaginationRawData_10(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getStatsPaginationRawData_10'])

@register('getStatQueryFields_13')
def getStatQueryFields_13():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getStatQueryFields_13'])

@register('getStatDataRawData_20')
def getStatDataRawData_20(query: str = None, page: int = None, pageSize: int = None, sortBy: str = None, sortOrder: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if page is not None:
        final_kwargs['page'] = page
    if pageSize is not None:
        final_kwargs['pageSize'] = pageSize
    if sortBy is not None:
        final_kwargs['sortBy'] = sortBy
    if sortOrder is not None:
        final_kwargs['sortOrder'] = sortOrder

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawData_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getStatDataRawData_20'])

@register('getAggregationDataByQuery_22')
def getAggregationDataByQuery_22(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggregationDataByQuery_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getAggregationDataByQuery_22'])

@register('getStatDataRawDataAsCSV_20')
def getStatDataRawDataAsCSV_20(query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataRawDataAsCSV_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getStatDataRawDataAsCSV_20'])

@register('getCount_19')
def getCount_19(query: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCount_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getCount_19'])

@register('getStatDataFields_21')
def getStatDataFields_21():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFields_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getStatDataFields_21'])

@register('getStatsPaginationRawData_18')
def getStatsPaginationRawData_18(query: str = None, scrollId: str = None, count: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if query is not None:
        final_kwargs['query'] = query
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsPaginationRawData_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getStatsPaginationRawData_18'])

@register('getStatQueryFields_22')
def getStatQueryFields_22():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getStatQueryFields_22'])

@register('disablePacketCaptureSession')
def disablePacketCaptureSession(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.disablePacketCaptureSession

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('downloadFile')
def downloadFile(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.downloadFile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('forceStopPcapSession')
def forceStopPcapSession(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.forceStopPcapSession

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('startPcapSession')
def startPcapSession(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.startPcapSession

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFileDownloadStatus')
def getFileDownloadStatus(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFileDownloadStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('stopPcapSession')
def stopPcapSession(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.stopPcapSession

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVnicInfoByVnfId')
def getVnicInfoByVnfId(vnfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if vnfId is not None:
        final_kwargs['vnfId'] = vnfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVnicInfoByVnfId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('disableDeviceLog')
def disableDeviceLog(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.disableDeviceLog

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('downloadDebugLog')
def downloadDebugLog(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.downloadDebugLog

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('renewSessionInfo')
def renewSessionInfo(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.renewSessionInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSessions')
def getSessions():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSessions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('clearSession')
def clearSession(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.clearSession

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLogType')
def getLogType(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLogType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceLog')
def getDeviceLog(sessionId: str, logId: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId
    if logId is not None:
        final_kwargs['logId'] = logId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceLog

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('activeFlowWithQuery')
def activeFlowWithQuery(traceId: int, timestamp: int, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.activeFlowWithQuery

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAggFlow')
def getAggFlow(traceId: int, timestamp: int, traceState: str, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if traceState is not None:
        final_kwargs['traceState'] = traceState
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAggFlow

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppQosData')
def getAppQosData(traceId: int, timestamp: int, receivedTimestamp: int, systemIp: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if receivedTimestamp is not None:
        final_kwargs['receivedTimestamp'] = receivedTimestamp
    if systemIp is not None:
        final_kwargs['systemIp'] = systemIp

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppQosData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppQosState')
def getAppQosState(traceId: int, timestamp: int, traceState: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if traceState is not None:
        final_kwargs['traceState'] = traceState

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppQosState

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConcurrentData')
def getConcurrentData(traceId: int, timestamp: int):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConcurrentData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConcurrentDomainData')
def getConcurrentDomainData(traceId: int, timestamp: int, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConcurrentDomainData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCurrentTimestamp')
def getCurrentTimestamp():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCurrentTimestamp

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceBList')
def getDeviceBList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceBList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDevicesAndInterfacesBySite')
def getDevicesAndInterfacesBySite(site_id: str, mode: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if site_id is not None:
        final_kwargs['site_id'] = site_id
    if mode is not None:
        final_kwargs['mode'] = mode

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDevicesAndInterfacesBySite

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDomainMetric')
def getDomainMetric(traceId: int, timestamp: int, domain: str, firstTimestamp: int, lastTimestamp: int, traceModel: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if domain is not None:
        final_kwargs['domain'] = domain
    if firstTimestamp is not None:
        final_kwargs['firstTimestamp'] = firstTimestamp
    if lastTimestamp is not None:
        final_kwargs['lastTimestamp'] = lastTimestamp
    if traceModel is not None:
        final_kwargs['traceModel'] = traceModel

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDomainMetric

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEventAppHopList')
def getEventAppHopList(traceId: int, timestamp: int, state: str = None, version: str = None, serverSideKey: str = None, clientSideKey: str = None, vpn: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if state is not None:
        final_kwargs['state'] = state
    if version is not None:
        final_kwargs['version'] = version
    if serverSideKey is not None:
        final_kwargs['serverSideKey'] = serverSideKey
    if clientSideKey is not None:
        final_kwargs['clientSideKey'] = clientSideKey
    if vpn is not None:
        final_kwargs['vpn'] = vpn

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEventAppHopList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEventAppScoreBandwidth')
def getEventAppScoreBandwidth(traceId: int, timestamp: int, receivedTimestamp: int, state: str = None, serverSideKey: str = None, clientSideKey: str = None, version: str = None, vpn: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if receivedTimestamp is not None:
        final_kwargs['receivedTimestamp'] = receivedTimestamp
    if state is not None:
        final_kwargs['state'] = state
    if serverSideKey is not None:
        final_kwargs['serverSideKey'] = serverSideKey
    if clientSideKey is not None:
        final_kwargs['clientSideKey'] = clientSideKey
    if version is not None:
        final_kwargs['version'] = version
    if vpn is not None:
        final_kwargs['vpn'] = vpn

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEventAppScoreBandwidth

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEventFlowFromAppHop')
def getEventFlowFromAppHop(traceId: int, timestamp: int, direction: str, from_arg: str, to: str, deviceTraceId: int, state: str = None, application: str = None, version: str = None, serverSideKey: str = None, clientSideKey: str = None, vpn: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if direction is not None:
        final_kwargs['direction'] = direction
    if from_arg is not None:
        final_kwargs['from'] = from_arg
    if to is not None:
        final_kwargs['to'] = to
    if deviceTraceId is not None:
        final_kwargs['deviceTraceId'] = deviceTraceId
    if state is not None:
        final_kwargs['state'] = state
    if application is not None:
        final_kwargs['application'] = application
    if version is not None:
        final_kwargs['version'] = version
    if serverSideKey is not None:
        final_kwargs['serverSideKey'] = serverSideKey
    if clientSideKey is not None:
        final_kwargs['clientSideKey'] = clientSideKey
    if vpn is not None:
        final_kwargs['vpn'] = vpn

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEventFlowFromAppHop

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEventReadout')
def getEventReadout(traceId: int, timestamp: int, state: str = None, vpn: str = None, userName: str = None, version: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if state is not None:
        final_kwargs['state'] = state
    if vpn is not None:
        final_kwargs['vpn'] = vpn
    if userName is not None:
        final_kwargs['userName'] = userName
    if version is not None:
        final_kwargs['version'] = version

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEventReadout

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEventReadoutBySite')
def getEventReadoutBySite(site_id: str, last_n_hours: int, mode: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if site_id is not None:
        final_kwargs['site_id'] = site_id
    if last_n_hours is not None:
        final_kwargs['last_n_hours'] = last_n_hours
    if mode is not None:
        final_kwargs['mode'] = mode

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEventReadoutBySite

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEventReadoutByTraces')
def getEventReadoutByTraces(trace_id: list, entry_time: list, vpn: str = None, userName: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if trace_id is not None:
        final_kwargs['trace_id'] = trace_id
    if entry_time is not None:
        final_kwargs['entry_time'] = entry_time
    if vpn is not None:
        final_kwargs['vpn'] = vpn
    if userName is not None:
        final_kwargs['userName'] = userName

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEventReadoutByTraces

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('exportTrace')
def exportTrace(traceId: int, timestamp: int):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.exportTrace

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFinalizedData')
def getFinalizedData(traceId: int, timestamp: int):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFinalizedData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFinalizedDomainData')
def getFinalizedDomainData(traceId: int, timestamp: int, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFinalizedDomainData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFlowDetail')
def getFlowDetail(traceId: int, timestamp: int, flowId: int):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if flowId is not None:
        final_kwargs['flowId'] = flowId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFlowDetail

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFlowMetric')
def getFlowMetric(traceId: int, timestamp: int, flowId: int, firstTimestamp: int, lastTimestamp: int):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if flowId is not None:
        final_kwargs['flowId'] = flowId
    if firstTimestamp is not None:
        final_kwargs['firstTimestamp'] = firstTimestamp
    if lastTimestamp is not None:
        final_kwargs['lastTimestamp'] = lastTimestamp

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFlowMetric

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMonitorState')
def getMonitorState(traceId: int, state: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMonitorState

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNwpiDscp')
def getNwpiDscp():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNwpiDscp

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNwpiNbarAppGroup')
def getNwpiNbarAppGroup():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNwpiNbarAppGroup

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNwpiProtocol')
def getNwpiProtocol():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNwpiProtocol

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('nwpiSettingView')
def nwpiSettingView(type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.nwpiSettingView

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPacketFeatures')
def getPacketFeatures(traceId: int, timestamp: int, flowId: int):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if flowId is not None:
        final_kwargs['flowId'] = flowId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPacketFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPreloadInfo')
def getPreloadInfo(mode: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if mode is not None:
        final_kwargs['mode'] = mode

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPreloadInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatQueryFields_28')
def getStatQueryFields_28():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatQueryFields_28

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('28')(globals()['getStatQueryFields_28'])

@register('getRoutingDetailFromLocal')
def getRoutingDetailFromLocal(traceId: int, timestamp: int, traceState: str, routePrefixs: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if traceState is not None:
        final_kwargs['traceState'] = traceState
    if routePrefixs is not None:
        final_kwargs['routePrefixs'] = routePrefixs

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRoutingDetailFromLocal

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getEventStatsData')
def getEventStatsData(taskId: int, state: str, taskEndTime: int, duration: int):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if taskId is not None:
        final_kwargs['taskId'] = taskId
    if state is not None:
        final_kwargs['state'] = state
    if taskEndTime is not None:
        final_kwargs['taskEndTime'] = taskEndTime
    if duration is not None:
        final_kwargs['duration'] = duration

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getEventStatsData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTaskHistory')
def getTaskHistory():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTaskHistory

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTaskTrace')
def getTaskTrace(taskId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if taskId is not None:
        final_kwargs['taskId'] = taskId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTaskTrace

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTraceCftRecord')
def getTraceCftRecord(traceId: int, entryTime: int, traceState: str, vpnIds: list = None, localColors: list = None, devices: list = None, vrfNames: list = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if entryTime is not None:
        final_kwargs['entryTime'] = entryTime
    if traceState is not None:
        final_kwargs['traceState'] = traceState
    if vpnIds is not None:
        final_kwargs['vpnIds'] = vpnIds
    if localColors is not None:
        final_kwargs['localColors'] = localColors
    if devices is not None:
        final_kwargs['devices'] = devices
    if vrfNames is not None:
        final_kwargs['vrfNames'] = vrfNames

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTraceCftRecord

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFinalizedFlowCount')
def getFinalizedFlowCount(traceId: int, timestamp: int):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFinalizedFlowCount

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getFinFlowTimeRange')
def getFinFlowTimeRange(traceId: int, timestamp: int, state: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getFinFlowTimeRange

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('traceFinFlowWithQuery')
def traceFinFlowWithQuery(traceId: int, timestamp: int, query: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if query is not None:
        final_kwargs['query'] = query

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.traceFinFlowWithQuery

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTraceFlow')
def getTraceFlow(traceId: int, timestamp: int, state: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if timestamp is not None:
        final_kwargs['timestamp'] = timestamp
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTraceFlow

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTraceHistory')
def getTraceHistory(traceModel: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceModel is not None:
        final_kwargs['traceModel'] = traceModel

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTraceHistory

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTraceInfoByBaseKey')
def getTraceInfoByBaseKey(traceId: int, entryTime: int, traceModel: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if traceId is not None:
        final_kwargs['traceId'] = traceId
    if entryTime is not None:
        final_kwargs['entryTime'] = entryTime
    if traceModel is not None:
        final_kwargs['traceModel'] = traceModel

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTraceInfoByBaseKey

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTraceReadoutFilter')
def getTraceReadoutFilter(trace_id: list, entry_time: list):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if trace_id is not None:
        final_kwargs['trace_id'] = trace_id
    if entry_time is not None:
        final_kwargs['entry_time'] = entry_time

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTraceReadoutFilter

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('disableSpeedTestSession')
def disableSpeedTestSession(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.disableSpeedTestSession

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInterfaceBandwidth')
def getInterfaceBandwidth(deviceUUID: str, circuit: str = None, sourceInterface: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceUUID is not None:
        final_kwargs['deviceUUID'] = deviceUUID
    if circuit is not None:
        final_kwargs['circuit'] = circuit
    if sourceInterface is not None:
        final_kwargs['sourceInterface'] = sourceInterface

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInterfaceBandwidth

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('startSpeedTest')
def startSpeedTest(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.startSpeedTest

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSpeedTestStatus')
def getSpeedTestStatus(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSpeedTestStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('stopSpeedTest')
def stopSpeedTest(sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.stopSpeedTest

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSpeedTest')
def getSpeedTest(sessionId: str, logId: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId
    if logId is not None:
        final_kwargs['logId'] = logId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSpeedTest

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUMTSData')
def getUMTSData(deviceUUID: str, eventType: str, lastNHours: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceUUID is not None:
        final_kwargs['deviceUUID'] = deviceUUID
    if eventType is not None:
        final_kwargs['eventType'] = eventType
    if lastNHours is not None:
        final_kwargs['lastNHours'] = lastNHours

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUMTSData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('updateUmtsSessionStatus')
def updateUmtsSessionStatus(operation: str, sessionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if operation is not None:
        final_kwargs['operation'] = operation
    if sessionId is not None:
        final_kwargs['sessionId'] = sessionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.updateUmtsSessionStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateBootstrapConfigForVedge')
def generateBootstrapConfigForVedge(uuid: str, configtype: str, inclDefRootCert: bool, version: str = None, wanif: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid
    if configtype is not None:
        final_kwargs['configtype'] = configtype
    if inclDefRootCert is not None:
        final_kwargs['inclDefRootCert'] = inclDefRootCert
    if version is not None:
        final_kwargs['version'] = version
    if wanif is not None:
        final_kwargs['wanif'] = wanif

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateBootstrapConfigForVedge

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getBootstrapConfigZip')
def getBootstrapConfigZip(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getBootstrapConfigZip

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateGenericBootstrapConfigForVedges')
def generateGenericBootstrapConfigForVedges(wanif: str = None, sdRoutingDevice: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if wanif is not None:
        final_kwargs['wanif'] = wanif
    if sdRoutingDevice is not None:
        final_kwargs['sdRoutingDevice'] = sdRoutingDevice

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateGenericBootstrapConfigForVedges

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getControllerVEdgeSyncStatus_1')
def getControllerVEdgeSyncStatus_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getControllerVEdgeSyncStatus_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getControllerVEdgeSyncStatus_1'])

@register('devicesWithoutSubjectSudi')
def devicesWithoutSubjectSudi():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.devicesWithoutSubjectSudi

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getManagementSystemIPInfo_1')
def getManagementSystemIPInfo_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getManagementSystemIPInfo_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getManagementSystemIPInfo_1'])

@register('getRMACandidates')
def getRMACandidates(deviceType: str, uuid: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceType is not None:
        final_kwargs['deviceType'] = deviceType
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRMACandidates

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRootCertStatusAll')
def getRootCertStatusAll(state: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if state is not None:
        final_kwargs['state'] = state

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRootCertStatusAll

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('checkSelfSignedCert_1')
def checkSelfSignedCert_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.checkSelfSignedCert_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['checkSelfSignedCert_1'])

@register('syncRootCertChain')
def syncRootCertChain():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.syncRootCertChain

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTenantManagementSystemIPs')
def getTenantManagementSystemIPs():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTenantManagementSystemIPs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudDockDataBasedOnDeviceType')
def getCloudDockDataBasedOnDeviceType(deviceCategory: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceCategory is not None:
        final_kwargs['deviceCategory'] = deviceCategory

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudDockDataBasedOnDeviceType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudDockDefaultConfigBasedOnDeviceType')
def getCloudDockDefaultConfigBasedOnDeviceType(deviceCategory: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceCategory is not None:
        final_kwargs['deviceCategory'] = deviceCategory

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudDockDefaultConfigBasedOnDeviceType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllUnclaimedDevices')
def getAllUnclaimedDevices():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllUnclaimedDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('checkvEdgeDevicePresence')
def checkvEdgeDevicePresence():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.checkvEdgeDevicePresence

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDevicesDetails')
def getDevicesDetails(deviceCategory: str, model: str = None, state: list = None, uuid: list = None, deviceIP: list = None, validity: list = None, family: str = None, siteId: int = None, topology: str = None, tag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceCategory is not None:
        final_kwargs['deviceCategory'] = deviceCategory
    if model is not None:
        final_kwargs['model'] = model
    if state is not None:
        final_kwargs['state'] = state
    if uuid is not None:
        final_kwargs['uuid'] = uuid
    if deviceIP is not None:
        final_kwargs['deviceIP'] = deviceIP
    if validity is not None:
        final_kwargs['validity'] = validity
    if family is not None:
        final_kwargs['family'] = family
    if siteId is not None:
        final_kwargs['siteId'] = siteId
    if topology is not None:
        final_kwargs['topology'] = topology
    if tag is not None:
        final_kwargs['tag'] = tag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDevicesDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getReverseProxyMappings')
def getReverseProxyMappings(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getReverseProxyMappings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudXStatus')
def getCloudXStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudXStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAttachedClientList')
def getAttachedClientList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAttachedClientList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAttachedDiaList')
def getAttachedDiaList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAttachedDiaList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAttachedGatewayList')
def getAttachedGatewayList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAttachedGatewayList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudXAvailableApps')
def getCloudXAvailableApps():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudXAvailableApps

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSiteList')
def getSiteList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSiteList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDiaList')
def getDiaList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDiaList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getGatewayList')
def getGatewayList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getGatewayList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getApps')
def getApps():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getApps

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSigTunnelList_1')
def getSigTunnelList_1(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSigTunnelList_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getSigTunnelList_1'])

@register('sitePerApp')
def sitePerApp(appName: str, vpnId: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if appName is not None:
        final_kwargs['appName'] = appName
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.sitePerApp

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAttachedConfig')
def getAttachedConfig(deviceId: str, type: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if type is not None:
        final_kwargs['type'] = type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAttachedConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateCLIModeDevices')
def generateCLIModeDevices(type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateCLIModeDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generatevManageModeDevices')
def generatevManageModeDevices(type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generatevManageModeDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceDiff')
def getDeviceDiff(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceDiff

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCompatibleDevices')
def getCompatibleDevices(oldDeviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if oldDeviceId is not None:
        final_kwargs['oldDeviceId'] = oldDeviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCompatibleDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRunningConfig')
def getRunningConfig(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRunningConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVpnForDevice')
def getVpnForDevice(deviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVpnForDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCORStatus')
def getCORStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCORStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAmiList')
def getAmiList(accountid: str, cloudregion: str, cloudtype: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountid is not None:
        final_kwargs['accountid'] = accountid
    if cloudregion is not None:
        final_kwargs['cloudregion'] = cloudregion
    if cloudtype is not None:
        final_kwargs['cloudtype'] = cloudtype

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAmiList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudList')
def getCloudList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudAccounts')
def getCloudAccounts(cloudtype: str, cloudEnvironment: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudtype is not None:
        final_kwargs['cloudtype'] = cloudtype
    if cloudEnvironment is not None:
        final_kwargs['cloudEnvironment'] = cloudEnvironment

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudAccounts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudHostVpcAccountDetails')
def getCloudHostVpcAccountDetails():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudHostVpcAccountDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudMappedHostAccounts')
def getCloudMappedHostAccounts(accountid: str, cloudtype: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountid is not None:
        final_kwargs['accountid'] = accountid
    if cloudtype is not None:
        final_kwargs['cloudtype'] = cloudtype

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudMappedHostAccounts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudOnRampDevices')
def getCloudOnRampDevices():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudOnRampDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getHostVPCs')
def getHostVPCs(transitVpcId: str, devicePairId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transitVpcId is not None:
        final_kwargs['transitVpcId'] = transitVpcId
    if devicePairId is not None:
        final_kwargs['devicePairId'] = devicePairId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getHostVPCs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getExternalId')
def getExternalId():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getExternalId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTransitDevicePairAndHostList')
def getTransitDevicePairAndHostList(accountId: str, cloudRegion: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountId is not None:
        final_kwargs['accountId'] = accountId
    if cloudRegion is not None:
        final_kwargs['cloudRegion'] = cloudRegion

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTransitDevicePairAndHostList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTransitVpcVpnList')
def getTransitVpcVpnList(accountId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountId is not None:
        final_kwargs['accountId'] = accountId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTransitVpcVpnList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudHostVPCs')
def getCloudHostVPCs(accountid: str, cloudregion: str, cloudtype: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountid is not None:
        final_kwargs['accountid'] = accountid
    if cloudregion is not None:
        final_kwargs['cloudregion'] = cloudregion
    if cloudtype is not None:
        final_kwargs['cloudtype'] = cloudtype

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudHostVPCs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMappedVPCs')
def getMappedVPCs(accountid: str, cloudregion: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountid is not None:
        final_kwargs['accountid'] = accountid
    if cloudregion is not None:
        final_kwargs['cloudregion'] = cloudregion

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMappedVPCs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPemKeyList')
def getPemKeyList(accountid: str, cloudregion: str, cloudtype: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountid is not None:
        final_kwargs['accountid'] = accountid
    if cloudregion is not None:
        final_kwargs['cloudregion'] = cloudregion
    if cloudtype is not None:
        final_kwargs['cloudtype'] = cloudtype

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPemKeyList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTransitVPCs')
def getTransitVPCs(accountid: str, cloudregion: str, cloudtype: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountid is not None:
        final_kwargs['accountid'] = accountid
    if cloudregion is not None:
        final_kwargs['cloudregion'] = cloudregion
    if cloudtype is not None:
        final_kwargs['cloudtype'] = cloudtype

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTransitVPCs

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTransitVPCSupportedSize')
def getTransitVPCSupportedSize(cloudEnvironment: str, cloudtype: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cloudtype is not None:
        final_kwargs['cloudtype'] = cloudtype
    if cloudEnvironment is not None:
        final_kwargs['cloudEnvironment'] = cloudEnvironment

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTransitVPCSupportedSize

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCortexStatus')
def getCortexStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCortexStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMappedWanResourceGroups')
def getMappedWanResourceGroups(accountid: str, cloudregion: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountid is not None:
        final_kwargs['accountid'] = accountid
    if cloudregion is not None:
        final_kwargs['cloudregion'] = cloudregion

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMappedWanResourceGroups

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWanResourceGroups')
def getWanResourceGroups(accountid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountid is not None:
        final_kwargs['accountid'] = accountid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWanResourceGroups

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateMasterTemplateList')
def generateMasterTemplateList(feature: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if feature is not None:
        final_kwargs['feature'] = feature

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateMasterTemplateList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAttachedDeviceList')
def getAttachedDeviceList(masterTemplateId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if masterTemplateId is not None:
        final_kwargs['masterTemplateId'] = masterTemplateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAttachedDeviceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAttachedConfigToDevice')
def getAttachedConfigToDevice(deviceId: str, policyId: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId
    if policyId is not None:
        final_kwargs['policyId'] = policyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAttachedConfigToDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceListByMasterTemplateId')
def getDeviceListByMasterTemplateId(masterTemplateId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if masterTemplateId is not None:
        final_kwargs['masterTemplateId'] = masterTemplateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceListByMasterTemplateId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('checkVbond')
def checkVbond():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.checkVbond

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('isMigrationRequired')
def isMigrationRequired():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.isMigrationRequired

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateTemplateForMigration')
def generateTemplateForMigration(hasAAA: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if hasAAA is not None:
        final_kwargs['hasAAA'] = hasAAA

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateTemplateForMigration

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('migrationInfo')
def migrationInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.migrationInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMasterTemplateDefinition')
def getMasterTemplateDefinition(templateId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if templateId is not None:
        final_kwargs['templateId'] = templateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMasterTemplateDefinition

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getOutOfSyncTemplates')
def getOutOfSyncTemplates():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getOutOfSyncTemplates

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getOutOfSyncDevices')
def getOutOfSyncDevices(templateId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if templateId is not None:
        final_kwargs['templateId'] = templateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getOutOfSyncDevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAssociatedFeatureTemplatesDetails')
def getAssociatedFeatureTemplatesDetails(templateId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if templateId is not None:
        final_kwargs['templateId'] = templateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAssociatedFeatureTemplatesDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateFeatureTemplateList')
def generateFeatureTemplateList(summary: bool = None, offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if summary is not None:
        final_kwargs['summary'] = summary
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateFeatureTemplateList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNetworkInterface')
def getNetworkInterface(deviceModel: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceModel is not None:
        final_kwargs['deviceModel'] = deviceModel

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNetworkInterface

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDefaultNetworks')
def getDefaultNetworks(deviceModel: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceModel is not None:
        final_kwargs['deviceModel'] = deviceModel

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefaultNetworks

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTemplateDefinition')
def getTemplateDefinition(templateId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if templateId is not None:
        final_kwargs['templateId'] = templateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTemplateDefinition

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceTemplatesAttachedToFeature')
def getDeviceTemplatesAttachedToFeature(templateId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if templateId is not None:
        final_kwargs['templateId'] = templateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceTemplatesAttachedToFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listLITemplate')
def listLITemplate():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listLITemplate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateMasterTemplateDefinition')
def generateMasterTemplateDefinition(type_name: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type_name is not None:
        final_kwargs['type_name'] = type_name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateMasterTemplateDefinition

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTemplateForMigration')
def getTemplateForMigration():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTemplateForMigration

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getGeneralTemplate')
def getGeneralTemplate(templateId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if templateId is not None:
        final_kwargs['templateId'] = templateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getGeneralTemplate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateTemplateTypes')
def generateTemplateTypes(type: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type is not None:
        final_kwargs['type'] = type

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateTemplateTypes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateTemplateTypeDefinition')
def generateTemplateTypeDefinition(type_name: str, version: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if type_name is not None:
        final_kwargs['type_name'] = type_name
    if version is not None:
        final_kwargs['version'] = version

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateTemplateTypeDefinition

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateTemplateByDeviceType')
def generateTemplateByDeviceType(deviceType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceType is not None:
        final_kwargs['deviceType'] = deviceType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateTemplateByDeviceType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('previewById')
def previewById(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('previewById_1')
def previewById_1(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewById_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['previewById_1'])

@register('previewById_2')
def previewById_2(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewById_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['previewById_2'])

@register('previewById_3')
def previewById_3(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewById_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['previewById_3'])

@register('getCloudDiscoveredApps')
def getCloudDiscoveredApps():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudDiscoveredApps

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCustomApps')
def getCustomApps():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCustomApps

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCustomAppById')
def getCustomAppById(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCustomAppById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDefinitions_8')
def getDefinitions_8():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getDefinitions_8'])

@register('previewPolicyDefinitionById_8')
def previewPolicyDefinitionById_8(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['previewPolicyDefinitionById_8'])

@register('getPolicyDefinition_8')
def getPolicyDefinition_8(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getPolicyDefinition_8'])

@register('getDefinitions_9')
def getDefinitions_9():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getDefinitions_9'])

@register('previewPolicyDefinitionById_9')
def previewPolicyDefinitionById_9(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['previewPolicyDefinitionById_9'])

@register('getPolicyDefinition_9')
def getPolicyDefinition_9(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getPolicyDefinition_9'])

@register('getDefinitions_11')
def getDefinitions_11():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getDefinitions_11'])

@register('previewPolicyDefinitionById_11')
def previewPolicyDefinitionById_11(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['previewPolicyDefinitionById_11'])

@register('getPolicyDefinition_11')
def getPolicyDefinition_11(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getPolicyDefinition_11'])

@register('getDefinitions_10')
def getDefinitions_10():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getDefinitions_10'])

@register('previewPolicyDefinitionById_10')
def previewPolicyDefinitionById_10(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['previewPolicyDefinitionById_10'])

@register('getPolicyDefinition_10')
def getPolicyDefinition_10(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getPolicyDefinition_10'])

@register('getDefinitions_12')
def getDefinitions_12():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getDefinitions_12'])

@register('previewPolicyDefinitionById_12')
def previewPolicyDefinitionById_12(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['previewPolicyDefinitionById_12'])

@register('getPolicyDefinition_12')
def getPolicyDefinition_12(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getPolicyDefinition_12'])

@register('getDefinitions_13')
def getDefinitions_13():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getDefinitions_13'])

@register('previewPolicyDefinitionById_13')
def previewPolicyDefinitionById_13(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['previewPolicyDefinitionById_13'])

@register('getPolicyDefinition_13')
def getPolicyDefinition_13(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getPolicyDefinition_13'])

@register('getDefinitions_14')
def getDefinitions_14():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getDefinitions_14'])

@register('previewPolicyDefinitionById_14')
def previewPolicyDefinitionById_14(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['previewPolicyDefinitionById_14'])

@register('getPolicyDefinition_14')
def getPolicyDefinition_14(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getPolicyDefinition_14'])

@register('getDefinitions_15')
def getDefinitions_15():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getDefinitions_15'])

@register('previewPolicyDefinitionById_15')
def previewPolicyDefinitionById_15(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['previewPolicyDefinitionById_15'])

@register('getPolicyDefinition_15')
def getPolicyDefinition_15(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getPolicyDefinition_15'])

@register('getDefinitions_16')
def getDefinitions_16():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getDefinitions_16'])

@register('previewPolicyDefinitionById_16')
def previewPolicyDefinitionById_16(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['previewPolicyDefinitionById_16'])

@register('getPolicyDefinition_16')
def getPolicyDefinition_16(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getPolicyDefinition_16'])

@register('getDefinitions_17')
def getDefinitions_17():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getDefinitions_17'])

@register('previewPolicyDefinitionById_17')
def previewPolicyDefinitionById_17(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['previewPolicyDefinitionById_17'])

@register('getPolicyDefinition_17')
def getPolicyDefinition_17(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getPolicyDefinition_17'])

@register('getDefinitions_25')
def getDefinitions_25():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getDefinitions_25'])

@register('previewPolicyDefinitionById_25')
def previewPolicyDefinitionById_25(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['previewPolicyDefinitionById_25'])

@register('getPolicyDefinition_25')
def getPolicyDefinition_25(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getPolicyDefinition_25'])

@register('getDefinitions')
def getDefinitions():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('previewPolicyDefinitionById')
def previewPolicyDefinitionById(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyDefinition')
def getPolicyDefinition(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDefinitions_26')
def getDefinitions_26():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['getDefinitions_26'])

@register('previewPolicyDefinitionById_26')
def previewPolicyDefinitionById_26(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['previewPolicyDefinitionById_26'])

@register('getPolicyDefinition_26')
def getPolicyDefinition_26(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['getPolicyDefinition_26'])

@register('getDefinitions_28')
def getDefinitions_28():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_28

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('28')(globals()['getDefinitions_28'])

@register('previewPolicyDefinitionById_28')
def previewPolicyDefinitionById_28(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_28

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('28')(globals()['previewPolicyDefinitionById_28'])

@register('getPolicyDefinition_28')
def getPolicyDefinition_28(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_28

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('28')(globals()['getPolicyDefinition_28'])

@register('getDefinitions_27')
def getDefinitions_27():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_27

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('27')(globals()['getDefinitions_27'])

@register('previewPolicyDefinitionById_27')
def previewPolicyDefinitionById_27(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_27

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('27')(globals()['previewPolicyDefinitionById_27'])

@register('getPolicyDefinition_27')
def getPolicyDefinition_27(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_27

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('27')(globals()['getPolicyDefinition_27'])

@register('getDefinitions_4')
def getDefinitions_4():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getDefinitions_4'])

@register('previewPolicyDefinitionById_4')
def previewPolicyDefinitionById_4(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['previewPolicyDefinitionById_4'])

@register('getPolicyDefinition_4')
def getPolicyDefinition_4(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getPolicyDefinition_4'])

@register('getDefinitions_18')
def getDefinitions_18():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getDefinitions_18'])

@register('previewPolicyDefinitionById_18')
def previewPolicyDefinitionById_18(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['previewPolicyDefinitionById_18'])

@register('getPolicyDefinition_18')
def getPolicyDefinition_18(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getPolicyDefinition_18'])

@register('getDefinitions_5')
def getDefinitions_5():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getDefinitions_5'])

@register('previewPolicyDefinitionById_5')
def previewPolicyDefinitionById_5(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['previewPolicyDefinitionById_5'])

@register('getPolicyDefinition_5')
def getPolicyDefinition_5(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getPolicyDefinition_5'])

@register('getDefinitions_29')
def getDefinitions_29():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_29

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('29')(globals()['getDefinitions_29'])

@register('previewPolicyDefinitionById_29')
def previewPolicyDefinitionById_29(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_29

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('29')(globals()['previewPolicyDefinitionById_29'])

@register('getPolicyDefinition_29')
def getPolicyDefinition_29(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_29

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('29')(globals()['getPolicyDefinition_29'])

@register('getDefinitions_1')
def getDefinitions_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getDefinitions_1'])

@register('previewPolicyDefinitionById_1')
def previewPolicyDefinitionById_1(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['previewPolicyDefinitionById_1'])

@register('getPolicyDefinition_1')
def getPolicyDefinition_1(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getPolicyDefinition_1'])

@register('getDefinitions_19')
def getDefinitions_19():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getDefinitions_19'])

@register('previewPolicyDefinitionById_19')
def previewPolicyDefinitionById_19(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['previewPolicyDefinitionById_19'])

@register('getPolicyDefinition_19')
def getPolicyDefinition_19(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getPolicyDefinition_19'])

@register('getDefinitions_20')
def getDefinitions_20():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getDefinitions_20'])

@register('previewPolicyDefinitionById_20')
def previewPolicyDefinitionById_20(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['previewPolicyDefinitionById_20'])

@register('getPolicyDefinition_20')
def getPolicyDefinition_20(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getPolicyDefinition_20'])

@register('getDefinitions_21')
def getDefinitions_21():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getDefinitions_21'])

@register('previewPolicyDefinitionById_21')
def previewPolicyDefinitionById_21(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['previewPolicyDefinitionById_21'])

@register('getPolicyDefinition_21')
def getPolicyDefinition_21(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getPolicyDefinition_21'])

@register('getDefinitions_30')
def getDefinitions_30():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_30

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('30')(globals()['getDefinitions_30'])

@register('previewPolicyDefinitionById_30')
def previewPolicyDefinitionById_30(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_30

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('30')(globals()['previewPolicyDefinitionById_30'])

@register('getPolicyDefinition_30')
def getPolicyDefinition_30(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_30

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('30')(globals()['getPolicyDefinition_30'])

@register('getDefinitions_3')
def getDefinitions_3():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['getDefinitions_3'])

@register('previewPolicyDefinitionById_3')
def previewPolicyDefinitionById_3(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['previewPolicyDefinitionById_3'])

@register('getPolicyDefinition_3')
def getPolicyDefinition_3(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['getPolicyDefinition_3'])

@register('getDefinitions_22')
def getDefinitions_22():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getDefinitions_22'])

@register('previewPolicyDefinitionById_22')
def previewPolicyDefinitionById_22(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['previewPolicyDefinitionById_22'])

@register('getPolicyDefinition_22')
def getPolicyDefinition_22(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getPolicyDefinition_22'])

@register('getDefinitions_23')
def getDefinitions_23():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getDefinitions_23'])

@register('previewPolicyDefinitionById_23')
def previewPolicyDefinitionById_23(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['previewPolicyDefinitionById_23'])

@register('getPolicyDefinition_23')
def getPolicyDefinition_23(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getPolicyDefinition_23'])

@register('getDefinitions_24')
def getDefinitions_24():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getDefinitions_24'])

@register('previewPolicyDefinitionById_24')
def previewPolicyDefinitionById_24(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['previewPolicyDefinitionById_24'])

@register('getPolicyDefinition_24')
def getPolicyDefinition_24(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getPolicyDefinition_24'])

@register('getDefinitions_6')
def getDefinitions_6():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getDefinitions_6'])

@register('previewPolicyDefinitionById_6')
def previewPolicyDefinitionById_6(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['previewPolicyDefinitionById_6'])

@register('getPolicyDefinition_6')
def getPolicyDefinition_6(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getPolicyDefinition_6'])

@register('getDefinitions_2')
def getDefinitions_2():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getDefinitions_2'])

@register('previewPolicyDefinitionById_2')
def previewPolicyDefinitionById_2(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['previewPolicyDefinitionById_2'])

@register('getPolicyDefinition_2')
def getPolicyDefinition_2(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getPolicyDefinition_2'])

@register('getDefinitions_7')
def getDefinitions_7():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDefinitions_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getDefinitions_7'])

@register('previewPolicyDefinitionById_7')
def previewPolicyDefinitionById_7(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyDefinitionById_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['previewPolicyDefinitionById_7'])

@register('getPolicyDefinition_7')
def getPolicyDefinition_7(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyDefinition_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getPolicyDefinition_7'])

@register('getListReference')
def getListReference(listType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if listType is not None:
        final_kwargs['listType'] = listType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListReference

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('sgts')
def sgts():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.sgts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllPolicyLists')
def getAllPolicyLists():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllPolicyLists

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyLists_3')
def getPolicyLists_3():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['getPolicyLists_3'])

@register('getPolicyListsWithInfoTag_3')
def getPolicyListsWithInfoTag_3(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['getPolicyListsWithInfoTag_3'])

@register('previewPolicyListById_3')
def previewPolicyListById_3(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['previewPolicyListById_3'])

@register('getListsById_3')
def getListsById_3(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_3

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('3')(globals()['getListsById_3'])

@register('getPolicyLists_4')
def getPolicyLists_4():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getPolicyLists_4'])

@register('getPolicyListsWithInfoTag_4')
def getPolicyListsWithInfoTag_4(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getPolicyListsWithInfoTag_4'])

@register('previewPolicyListById_4')
def previewPolicyListById_4(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['previewPolicyListById_4'])

@register('getListsById_4')
def getListsById_4(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_4

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('4')(globals()['getListsById_4'])

@register('getPolicyLists_5')
def getPolicyLists_5():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getPolicyLists_5'])

@register('getPolicyListsWithInfoTag_5')
def getPolicyListsWithInfoTag_5(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getPolicyListsWithInfoTag_5'])

@register('previewPolicyListById_5')
def previewPolicyListById_5(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['previewPolicyListById_5'])

@register('getListsById_5')
def getListsById_5(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_5

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('5')(globals()['getListsById_5'])

@register('getPolicyLists_13')
def getPolicyLists_13():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getPolicyLists_13'])

@register('getPolicyListsWithInfoTag_14')
def getPolicyListsWithInfoTag_14(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getPolicyListsWithInfoTag_14'])

@register('previewPolicyListById_14')
def previewPolicyListById_14(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['previewPolicyListById_14'])

@register('getListsById_14')
def getListsById_14(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getListsById_14'])

@register('getPolicyLists_6')
def getPolicyLists_6():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getPolicyLists_6'])

@register('getPolicyListsWithInfoTag_6')
def getPolicyListsWithInfoTag_6(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getPolicyListsWithInfoTag_6'])

@register('previewPolicyListById_6')
def previewPolicyListById_6(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['previewPolicyListById_6'])

@register('getListsById_6')
def getListsById_6(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_6

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('6')(globals()['getListsById_6'])

@register('getPolicyLists_7')
def getPolicyLists_7():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getPolicyLists_7'])

@register('getPolicyListsWithInfoTag_7')
def getPolicyListsWithInfoTag_7(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getPolicyListsWithInfoTag_7'])

@register('previewPolicyListById_7')
def previewPolicyListById_7(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['previewPolicyListById_7'])

@register('getListsById_7')
def getListsById_7(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_7

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('7')(globals()['getListsById_7'])

@register('getPolicyLists_8')
def getPolicyLists_8():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getPolicyLists_8'])

@register('getPolicyListsWithInfoTag_8')
def getPolicyListsWithInfoTag_8(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getPolicyListsWithInfoTag_8'])

@register('previewPolicyListById_8')
def previewPolicyListById_8(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['previewPolicyListById_8'])

@register('getListsById_8')
def getListsById_8(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_8

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('8')(globals()['getListsById_8'])

@register('getPolicyLists_9')
def getPolicyLists_9():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getPolicyLists_9'])

@register('getPolicyListsWithInfoTag_10')
def getPolicyListsWithInfoTag_10(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getPolicyListsWithInfoTag_10'])

@register('previewPolicyListById_10')
def previewPolicyListById_10(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['previewPolicyListById_10'])

@register('getListsById_10')
def getListsById_10(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getListsById_10'])

@register('getListsForAllDataPrefixes')
def getListsForAllDataPrefixes():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsForAllDataPrefixes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyListsWithInfoTag_9')
def getPolicyListsWithInfoTag_9(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getPolicyListsWithInfoTag_9'])

@register('previewPolicyListById_9')
def previewPolicyListById_9(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['previewPolicyListById_9'])

@register('getListsById_9')
def getListsById_9(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_9

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('9')(globals()['getListsById_9'])

@register('getAllDataPrefixAndFQDNLists')
def getAllDataPrefixAndFQDNLists():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllDataPrefixAndFQDNLists

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyListsWithInfoTag_15')
def getPolicyListsWithInfoTag_15(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getPolicyListsWithInfoTag_15'])

@register('previewPolicyListById_15')
def previewPolicyListById_15(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['previewPolicyListById_15'])

@register('getListsById_15')
def getListsById_15(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getListsById_15'])

@register('getPolicyLists_10')
def getPolicyLists_10():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_10

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('10')(globals()['getPolicyLists_10'])

@register('getPolicyListsWithInfoTag_11')
def getPolicyListsWithInfoTag_11(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getPolicyListsWithInfoTag_11'])

@register('previewPolicyListById_11')
def previewPolicyListById_11(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['previewPolicyListById_11'])

@register('getListsById_11')
def getListsById_11(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getListsById_11'])

@register('getPolicyLists_11')
def getPolicyLists_11():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_11

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('11')(globals()['getPolicyLists_11'])

@register('getPolicyListsWithInfoTag_12')
def getPolicyListsWithInfoTag_12(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getPolicyListsWithInfoTag_12'])

@register('previewPolicyListById_12')
def previewPolicyListById_12(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['previewPolicyListById_12'])

@register('getListsById_12')
def getListsById_12(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getListsById_12'])

@register('getPolicyLists_12')
def getPolicyLists_12():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_12

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('12')(globals()['getPolicyLists_12'])

@register('getPolicyListsWithInfoTag_13')
def getPolicyListsWithInfoTag_13(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getPolicyListsWithInfoTag_13'])

@register('previewPolicyListById_13')
def previewPolicyListById_13(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['previewPolicyListById_13'])

@register('getListsById_13')
def getListsById_13(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_13

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('13')(globals()['getListsById_13'])

@register('getPolicyLists_14')
def getPolicyLists_14():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_14

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('14')(globals()['getPolicyLists_14'])

@register('getPolicyListsWithInfoTag_16')
def getPolicyListsWithInfoTag_16(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getPolicyListsWithInfoTag_16'])

@register('previewPolicyListById_16')
def previewPolicyListById_16(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['previewPolicyListById_16'])

@register('getListsById_16')
def getListsById_16(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getListsById_16'])

@register('getPolicyLists_15')
def getPolicyLists_15():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_15

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('15')(globals()['getPolicyLists_15'])

@register('getGeoLocationLists')
def getGeoLocationLists():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getGeoLocationLists

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyListsWithInfoTag_17')
def getPolicyListsWithInfoTag_17(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getPolicyListsWithInfoTag_17'])

@register('previewPolicyListById_17')
def previewPolicyListById_17(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['previewPolicyListById_17'])

@register('getListsById_17')
def getListsById_17(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getListsById_17'])

@register('getPolicyLists_16')
def getPolicyLists_16():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_16

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('16')(globals()['getPolicyLists_16'])

@register('getPolicyListsWithInfoTag_18')
def getPolicyListsWithInfoTag_18(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getPolicyListsWithInfoTag_18'])

@register('previewPolicyListById_18')
def previewPolicyListById_18(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['previewPolicyListById_18'])

@register('getListsById_18')
def getListsById_18(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getListsById_18'])

@register('getListsForAllPrefixes')
def getListsForAllPrefixes():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsForAllPrefixes

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyListsWithInfoTag_21')
def getPolicyListsWithInfoTag_21(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getPolicyListsWithInfoTag_21'])

@register('previewPolicyListById_21')
def previewPolicyListById_21(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['previewPolicyListById_21'])

@register('getListsById_21')
def getListsById_21(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getListsById_21'])

@register('getPolicyLists_17')
def getPolicyLists_17():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_17

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('17')(globals()['getPolicyLists_17'])

@register('getPolicyListsWithInfoTag_19')
def getPolicyListsWithInfoTag_19(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getPolicyListsWithInfoTag_19'])

@register('previewPolicyListById_19')
def previewPolicyListById_19(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['previewPolicyListById_19'])

@register('getListsById_19')
def getListsById_19(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getListsById_19'])

@register('getPolicyLists_18')
def getPolicyLists_18():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_18

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('18')(globals()['getPolicyLists_18'])

@register('getPolicyListsWithInfoTag_20')
def getPolicyListsWithInfoTag_20(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getPolicyListsWithInfoTag_20'])

@register('previewPolicyListById_20')
def previewPolicyListById_20(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['previewPolicyListById_20'])

@register('getListsById_20')
def getListsById_20(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getListsById_20'])

@register('getPolicyLists_19')
def getPolicyLists_19():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_19

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('19')(globals()['getPolicyLists_19'])

@register('getPolicyListsWithInfoTag_22')
def getPolicyListsWithInfoTag_22(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getPolicyListsWithInfoTag_22'])

@register('previewPolicyListById_22')
def previewPolicyListById_22(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['previewPolicyListById_22'])

@register('getListsById_22')
def getListsById_22(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getListsById_22'])

@register('getPolicyLists_20')
def getPolicyLists_20():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_20

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('20')(globals()['getPolicyLists_20'])

@register('getPolicyListsWithInfoTag_23')
def getPolicyListsWithInfoTag_23(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getPolicyListsWithInfoTag_23'])

@register('previewPolicyListById_23')
def previewPolicyListById_23(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['previewPolicyListById_23'])

@register('getListsById_23')
def getListsById_23(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getListsById_23'])

@register('getPolicyLists')
def getPolicyLists():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyListsWithInfoTag')
def getPolicyListsWithInfoTag(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('previewPolicyListById')
def previewPolicyListById(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getListsById')
def getListsById(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyLists_21')
def getPolicyLists_21():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_21

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('21')(globals()['getPolicyLists_21'])

@register('getPolicyListsWithInfoTag_24')
def getPolicyListsWithInfoTag_24(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getPolicyListsWithInfoTag_24'])

@register('previewPolicyListById_24')
def previewPolicyListById_24(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['previewPolicyListById_24'])

@register('getListsById_24')
def getListsById_24(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getListsById_24'])

@register('getPolicyLists_22')
def getPolicyLists_22():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_22

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('22')(globals()['getPolicyLists_22'])

@register('getPolicyListsWithInfoTag_25')
def getPolicyListsWithInfoTag_25(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getPolicyListsWithInfoTag_25'])

@register('previewPolicyListById_25')
def previewPolicyListById_25(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['previewPolicyListById_25'])

@register('getListsById_25')
def getListsById_25(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getListsById_25'])

@register('getPolicyLists_23')
def getPolicyLists_23():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_23

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('23')(globals()['getPolicyLists_23'])

@register('getPolicyListsWithInfoTag_26')
def getPolicyListsWithInfoTag_26(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['getPolicyListsWithInfoTag_26'])

@register('previewPolicyListById_26')
def previewPolicyListById_26(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['previewPolicyListById_26'])

@register('getListsById_26')
def getListsById_26(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['getListsById_26'])

@register('getPolicyLists_24')
def getPolicyLists_24():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_24

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('24')(globals()['getPolicyLists_24'])

@register('getPolicyListsWithInfoTag_27')
def getPolicyListsWithInfoTag_27(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_27

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('27')(globals()['getPolicyListsWithInfoTag_27'])

@register('previewPolicyListById_27')
def previewPolicyListById_27(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_27

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('27')(globals()['previewPolicyListById_27'])

@register('getListsById_27')
def getListsById_27(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_27

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('27')(globals()['getListsById_27'])

@register('getPolicyLists_25')
def getPolicyLists_25():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_25

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('25')(globals()['getPolicyLists_25'])

@register('getPolicyListsWithInfoTag_28')
def getPolicyListsWithInfoTag_28(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_28

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('28')(globals()['getPolicyListsWithInfoTag_28'])

@register('previewPolicyListById_28')
def previewPolicyListById_28(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_28

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('28')(globals()['previewPolicyListById_28'])

@register('getListsById_28')
def getListsById_28(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_28

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('28')(globals()['getListsById_28'])

@register('getPolicyLists_26')
def getPolicyLists_26():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_26

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('26')(globals()['getPolicyLists_26'])

@register('getPolicyListsWithInfoTag_29')
def getPolicyListsWithInfoTag_29(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_29

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('29')(globals()['getPolicyListsWithInfoTag_29'])

@register('previewPolicyListById_29')
def previewPolicyListById_29(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_29

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('29')(globals()['previewPolicyListById_29'])

@register('getListsById_29')
def getListsById_29(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_29

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('29')(globals()['getListsById_29'])

@register('getPolicyLists_27')
def getPolicyLists_27():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_27

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('27')(globals()['getPolicyLists_27'])

@register('getPolicyListsWithInfoTag_30')
def getPolicyListsWithInfoTag_30(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_30

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('30')(globals()['getPolicyListsWithInfoTag_30'])

@register('previewPolicyListById_30')
def previewPolicyListById_30(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_30

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('30')(globals()['previewPolicyListById_30'])

@register('getListsById_30')
def getListsById_30(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_30

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('30')(globals()['getListsById_30'])

@register('getPolicyLists_28')
def getPolicyLists_28():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_28

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('28')(globals()['getPolicyLists_28'])

@register('getPolicyListsWithInfoTag_31')
def getPolicyListsWithInfoTag_31(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_31

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('31')(globals()['getPolicyListsWithInfoTag_31'])

@register('previewPolicyListById_31')
def previewPolicyListById_31(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_31

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('31')(globals()['previewPolicyListById_31'])

@register('getListsById_31')
def getListsById_31(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_31

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('31')(globals()['getListsById_31'])

@register('getPolicyLists_29')
def getPolicyLists_29():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_29

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('29')(globals()['getPolicyLists_29'])

@register('getPolicyListsWithInfoTag_32')
def getPolicyListsWithInfoTag_32(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_32

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('32')(globals()['getPolicyListsWithInfoTag_32'])

@register('previewPolicyListById_32')
def previewPolicyListById_32(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_32

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('32')(globals()['previewPolicyListById_32'])

@register('getListsById_32')
def getListsById_32(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_32

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('32')(globals()['getListsById_32'])

@register('getPolicyLists_30')
def getPolicyLists_30():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_30

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('30')(globals()['getPolicyLists_30'])

@register('getPolicyListsWithInfoTag_33')
def getPolicyListsWithInfoTag_33(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_33

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('33')(globals()['getPolicyListsWithInfoTag_33'])

@register('previewPolicyListById_33')
def previewPolicyListById_33(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_33

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('33')(globals()['previewPolicyListById_33'])

@register('getListsById_33')
def getListsById_33(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_33

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('33')(globals()['getListsById_33'])

@register('getPolicyLists_31')
def getPolicyLists_31():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_31

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('31')(globals()['getPolicyLists_31'])

@register('getPolicyListsWithInfoTag_34')
def getPolicyListsWithInfoTag_34(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_34

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('34')(globals()['getPolicyListsWithInfoTag_34'])

@register('previewPolicyListById_34')
def previewPolicyListById_34(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_34

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('34')(globals()['previewPolicyListById_34'])

@register('getListsById_34')
def getListsById_34(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_34

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('34')(globals()['getListsById_34'])

@register('getPolicyLists_32')
def getPolicyLists_32():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_32

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('32')(globals()['getPolicyLists_32'])

@register('getPolicyListsWithInfoTag_35')
def getPolicyListsWithInfoTag_35(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_35

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('35')(globals()['getPolicyListsWithInfoTag_35'])

@register('previewPolicyListById_35')
def previewPolicyListById_35(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_35

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('35')(globals()['previewPolicyListById_35'])

@register('getListsById_35')
def getListsById_35(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_35

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('35')(globals()['getListsById_35'])

@register('getPolicyLists_33')
def getPolicyLists_33():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_33

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('33')(globals()['getPolicyLists_33'])

@register('getPolicyListsWithInfoTag_36')
def getPolicyListsWithInfoTag_36(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_36

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('36')(globals()['getPolicyListsWithInfoTag_36'])

@register('previewPolicyListById_36')
def previewPolicyListById_36(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_36

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('36')(globals()['previewPolicyListById_36'])

@register('getListsById_36')
def getListsById_36(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_36

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('36')(globals()['getListsById_36'])

@register('getPolicyLists_34')
def getPolicyLists_34():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_34

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('34')(globals()['getPolicyLists_34'])

@register('getPolicyListsWithInfoTag_37')
def getPolicyListsWithInfoTag_37(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_37

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('37')(globals()['getPolicyListsWithInfoTag_37'])

@register('previewPolicyListById_37')
def previewPolicyListById_37(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_37

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('37')(globals()['previewPolicyListById_37'])

@register('getListsById_37')
def getListsById_37(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_37

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('37')(globals()['getListsById_37'])

@register('getPolicyLists_1')
def getPolicyLists_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getPolicyLists_1'])

@register('getPolicyListsWithInfoTag_1')
def getPolicyListsWithInfoTag_1(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getPolicyListsWithInfoTag_1'])

@register('previewPolicyListById_1')
def previewPolicyListById_1(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['previewPolicyListById_1'])

@register('getListsById_1')
def getListsById_1(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getListsById_1'])

@register('getPolicyLists_2')
def getPolicyLists_2():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getPolicyLists_2'])

@register('getPolicyListsWithInfoTag_2')
def getPolicyListsWithInfoTag_2(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getPolicyListsWithInfoTag_2'])

@register('previewPolicyListById_2')
def previewPolicyListById_2(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['previewPolicyListById_2'])

@register('getListsById_2')
def getListsById_2(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_2

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('2')(globals()['getListsById_2'])

@register('getPolicyLists_35')
def getPolicyLists_35():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_35

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('35')(globals()['getPolicyLists_35'])

@register('getPolicyListsWithInfoTag_38')
def getPolicyListsWithInfoTag_38(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_38

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('38')(globals()['getPolicyListsWithInfoTag_38'])

@register('previewPolicyListById_38')
def previewPolicyListById_38(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_38

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('38')(globals()['previewPolicyListById_38'])

@register('getListsById_38')
def getListsById_38(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_38

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('38')(globals()['getListsById_38'])

@register('getPolicyLists_36')
def getPolicyLists_36():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_36

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('36')(globals()['getPolicyLists_36'])

@register('getPolicyListsWithInfoTag_39')
def getPolicyListsWithInfoTag_39(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_39

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('39')(globals()['getPolicyListsWithInfoTag_39'])

@register('previewPolicyListById_39')
def previewPolicyListById_39(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_39

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('39')(globals()['previewPolicyListById_39'])

@register('getListsById_39')
def getListsById_39(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_39

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('39')(globals()['getListsById_39'])

@register('getPolicyLists_37')
def getPolicyLists_37():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_37

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('37')(globals()['getPolicyLists_37'])

@register('getPolicyListsWithInfoTag_40')
def getPolicyListsWithInfoTag_40(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_40

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('40')(globals()['getPolicyListsWithInfoTag_40'])

@register('previewPolicyListById_40')
def previewPolicyListById_40(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_40

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('40')(globals()['previewPolicyListById_40'])

@register('getListsById_40')
def getListsById_40(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_40

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('40')(globals()['getListsById_40'])

@register('getPolicyLists_38')
def getPolicyLists_38():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_38

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('38')(globals()['getPolicyLists_38'])

@register('getPolicyListsWithInfoTag_41')
def getPolicyListsWithInfoTag_41(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_41

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('41')(globals()['getPolicyListsWithInfoTag_41'])

@register('previewPolicyListById_41')
def previewPolicyListById_41(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_41

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('41')(globals()['previewPolicyListById_41'])

@register('getListsById_41')
def getListsById_41(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_41

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('41')(globals()['getListsById_41'])

@register('getPolicyLists_39')
def getPolicyLists_39():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_39

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('39')(globals()['getPolicyLists_39'])

@register('getPolicyListsWithInfoTag_42')
def getPolicyListsWithInfoTag_42(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_42

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('42')(globals()['getPolicyListsWithInfoTag_42'])

@register('previewPolicyListById_42')
def previewPolicyListById_42(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_42

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('42')(globals()['previewPolicyListById_42'])

@register('getListsById_42')
def getListsById_42(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_42

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('42')(globals()['getListsById_42'])

@register('getPolicyLists_40')
def getPolicyLists_40():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyLists_40

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('40')(globals()['getPolicyLists_40'])

@register('getPolicyListsWithInfoTag_43')
def getPolicyListsWithInfoTag_43(infoTag: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if infoTag is not None:
        final_kwargs['infoTag'] = infoTag

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyListsWithInfoTag_43

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('43')(globals()['getPolicyListsWithInfoTag_43'])

@register('previewPolicyListById_43')
def previewPolicyListById_43(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.previewPolicyListById_43

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('43')(globals()['previewPolicyListById_43'])

@register('getListsById_43')
def getListsById_43(id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if id is not None:
        final_kwargs['id'] = id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListsById_43

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('43')(globals()['getListsById_43'])

@register('generateSecurityTemplateList')
def generateSecurityTemplateList(mode: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if mode is not None:
        final_kwargs['mode'] = mode

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateSecurityTemplateList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSecurityTemplate')
def getSecurityTemplate(policyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyId is not None:
        final_kwargs['policyId'] = policyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSecurityTemplate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSecurityPolicyDeviceList_1')
def getSecurityPolicyDeviceList_1():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSecurityPolicyDeviceList_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getSecurityPolicyDeviceList_1'])

@register('getDeviceListById')
def getDeviceListById(policyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyId is not None:
        final_kwargs['policyId'] = policyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceListById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateSecurityPolicySummary')
def generateSecurityPolicySummary():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateSecurityPolicySummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSecurityTemplatesForDevice')
def getSecurityTemplatesForDevice(deviceModel: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceModel is not None:
        final_kwargs['deviceModel'] = deviceModel

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSecurityTemplatesForDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generatePolicyTemplateList')
def generatePolicyTemplateList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generatePolicyTemplateList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVEdgeTemplate')
def getVEdgeTemplate(policyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyId is not None:
        final_kwargs['policyId'] = policyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVEdgeTemplate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVEdgePolicyDeviceList')
def getVEdgePolicyDeviceList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVEdgePolicyDeviceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceListByPolicy')
def getDeviceListByPolicy(policyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyId is not None:
        final_kwargs['policyId'] = policyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceListByPolicy

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateVoiceTemplateList')
def generateVoiceTemplateList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateVoiceTemplateList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTemplateById')
def getTemplateById(policyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyId is not None:
        final_kwargs['policyId'] = policyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTemplateById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVoicePolicyDeviceList')
def getVoicePolicyDeviceList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVoicePolicyDeviceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceListByPolicyId')
def getDeviceListByPolicyId(policyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyId is not None:
        final_kwargs['policyId'] = policyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceListByPolicyId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateVoicePolicySummary')
def generateVoicePolicySummary():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateVoicePolicySummary

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getVoiceTemplatesForDevice')
def getVoiceTemplatesForDevice(deviceModel: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceModel is not None:
        final_kwargs['deviceModel'] = deviceModel

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getVoiceTemplatesForDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateVSmartPolicyTemplateList')
def generateVSmartPolicyTemplateList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateVSmartPolicyTemplateList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('checkVSmartConnectivityStatus')
def checkVSmartConnectivityStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.checkVSmartConnectivityStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTemplateByPolicyId')
def getTemplateByPolicyId(policyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyId is not None:
        final_kwargs['policyId'] = policyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTemplateByPolicyId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('QosmosNbarMigrationWarning')
def QosmosNbarMigrationWarning():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.QosmosNbarMigrationWarning

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllTenants')
def getAllTenants(deviceId: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllTenants

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTenantvSmartMapping')
def getTenantvSmartMapping():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTenantvSmartMapping

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTenantHostingCapacityOnvSmarts')
def getTenantHostingCapacityOnvSmarts():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTenantHostingCapacityOnvSmarts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getTenant')
def getTenant(tenantId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if tenantId is not None:
        final_kwargs['tenantId'] = tenantId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getTenant

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('downloadExistingBackupFile')
def downloadExistingBackupFile(path: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if path is not None:
        final_kwargs['path'] = path

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.downloadExistingBackupFile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('exportTenantBackup')
def exportTenantBackup():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.exportTenantBackup

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listTenantBackup')
def listTenantBackup():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listTenantBackup

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('downloadTenantData')
def downloadTenantData(path: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if path is not None:
        final_kwargs['path'] = path

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.downloadTenantData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMigrationToken')
def getMigrationToken(migrationId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if migrationId is not None:
        final_kwargs['migrationId'] = migrationId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMigrationToken

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('reTriggerNetworkMigration')
def reTriggerNetworkMigration():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.reTriggerNetworkMigration

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllTenantStatuses')
def getAllTenantStatuses():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllTenantStatuses

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createFullTopology')
def createFullTopology():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createFullTopology

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createDeviceTopology')
def createDeviceTopology(deviceId: list):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createDeviceTopology

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSiteTopology')
def getSiteTopology(siteId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if siteId is not None:
        final_kwargs['siteId'] = siteId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSiteTopology

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSiteTopologyMonitorData')
def getSiteTopologyMonitorData(siteId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if siteId is not None:
        final_kwargs['siteId'] = siteId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSiteTopologyMonitorData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('createPhysicalTopology')
def createPhysicalTopology(deviceId: list):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceId is not None:
        final_kwargs['deviceId'] = deviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.createPhysicalTopology

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getControlConnections')
def getControlConnections(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getControlConnections

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceConfiguration')
def getDeviceConfiguration(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceConfiguration

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllKeysFromUmbrella')
def getAllKeysFromUmbrella():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllKeysFromUmbrella

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getManagementKeysFromUmbrella')
def getManagementKeysFromUmbrella():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getManagementKeysFromUmbrella

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNetworkKeysFromUmbrella')
def getNetworkKeysFromUmbrella():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNetworkKeysFromUmbrella

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getReportingKeysFromUmbrella')
def getReportingKeysFromUmbrella():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getReportingKeysFromUmbrella

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('sendMetaDataToUmbrella')
def sendMetaDataToUmbrella():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.sendMetaDataToUmbrella

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatus')
def getStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUrlMonitor')
def getUrlMonitor():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUrlMonitor

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('returnMetric')
def returnMetric(metricName: str, startDate: str, endDate: str = None, start: str = None, end: str = None, pageNo: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if metricName is not None:
        final_kwargs['metricName'] = metricName
    if startDate is not None:
        final_kwargs['startDate'] = startDate
    if endDate is not None:
        final_kwargs['endDate'] = endDate
    if start is not None:
        final_kwargs['start'] = start
    if end is not None:
        final_kwargs['end'] = end
    if pageNo is not None:
        final_kwargs['pageNo'] = pageNo
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.returnMetric

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('returnMetricFiles')
def returnMetricFiles(metricName: str, startDate: str, endDate: str = None, start: str = None, end: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if metricName is not None:
        final_kwargs['metricName'] = metricName
    if startDate is not None:
        final_kwargs['startDate'] = startDate
    if endDate is not None:
        final_kwargs['endDate'] = endDate
    if start is not None:
        final_kwargs['start'] = start
    if end is not None:
        final_kwargs['end'] = end

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.returnMetricFiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMetricsList')
def getMetricsList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMetricsList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDBSizeOnFile')
def getDBSizeOnFile():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDBSizeOnFile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listLogFileDetails')
def listLogFileDetails():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listLogFileDetails

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listVManageServerLogLastNLines')
def listVManageServerLogLastNLines(lines: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if lines is not None:
        final_kwargs['lines'] = lines

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listVManageServerLogLastNLines

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listConfigurations')
def listConfigurations():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listConfigurations

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('listLoggers')
def listLoggers():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.listLoggers

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatsMigrationRangeConfig')
def getStatsMigrationRangeConfig():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsMigrationRangeConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatsMigrationSettings')
def getStatsMigrationSettings():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsMigrationSettings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatsMigrationStatsDbInfo')
def getStatsMigrationStatsDbInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsMigrationStatsDbInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatsMigrationStatus')
def getStatsMigrationStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatsMigrationStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudOnRampSaasStatus')
def getCloudOnRampSaasStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudOnRampSaasStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCloudTunnelList')
def getCloudTunnelList(deviceIp: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceIp is not None:
        final_kwargs['deviceIp'] = deviceIp

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCloudTunnelList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyGroupsWithCorSaasApps')
def getPolicyGroupsWithCorSaasApps():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyGroupsWithCorSaasApps

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCorSitesPerDevice')
def getCorSitesPerDevice():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCorSitesPerDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getInactiveCorSaasSites')
def getInactiveCorSaasSites():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getInactiveCorSaasSites

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLegacyDeviceList')
def getLegacyDeviceList():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLegacyDeviceList

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCorSaasStatusPerDevice')
def getCorSaasStatusPerDevice(deviceIp: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceIp is not None:
        final_kwargs['deviceIp'] = deviceIp

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCorSaasStatusPerDevice

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWebexSyncStatus')
def getWebexSyncStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWebexSyncStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetConfigGroupBySolution')
def GetConfigGroupBySolution(solution: str = None, name: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if solution is not None:
        final_kwargs['solution'] = solution
    if name is not None:
        final_kwargs['name'] = name

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetConfigGroupBySolution

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetConfigGroup')
def GetConfigGroup(configGroupId: str, deviceList: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if configGroupId is not None:
        final_kwargs['configGroupId'] = configGroupId
    if deviceList is not None:
        final_kwargs['deviceList'] = deviceList

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetConfigGroup

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetConfigGroupAssociation')
def GetConfigGroupAssociation(configGroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if configGroupId is not None:
        final_kwargs['configGroupId'] = configGroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetConfigGroupAssociation

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConfigGroupDeviceVariables')
def getConfigGroupDeviceVariables(configGroupId: str, device_id: str = None, suggestions: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if configGroupId is not None:
        final_kwargs['configGroupId'] = configGroupId
    if device_id is not None:
        final_kwargs['device-id'] = device_id
    if suggestions is not None:
        final_kwargs['suggestions'] = suggestions

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConfigGroupDeviceVariables

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getConfigGroupDeviceVariablesSchema')
def getConfigGroupDeviceVariablesSchema(configGroupId: str, all: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if configGroupId is not None:
        final_kwargs['configGroupId'] = configGroupId
    if all is not None:
        final_kwargs['all'] = all

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getConfigGroupDeviceVariablesSchema

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRuleAssociationByConfigGroupId')
def getRuleAssociationByConfigGroupId(configGroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if configGroupId is not None:
        final_kwargs['configGroupId'] = configGroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRuleAssociationByConfigGroupId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRunningIosCliConfig')
def getRunningIosCliConfig(deviceUUID: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceUUID is not None:
        final_kwargs['deviceUUID'] = deviceUUID

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRunningIosCliConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUnsupportedCliConfig')
def getUnsupportedCliConfig(deviceUUID: str, highlightUnsupportedClis: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceUUID is not None:
        final_kwargs['deviceUUID'] = deviceUUID
    if highlightUnsupportedClis is not None:
        final_kwargs['highlightUnsupportedClis'] = highlightUnsupportedClis

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUnsupportedCliConfig

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetMobilityCliFeatureProfile')
def GetMobilityCliFeatureProfile(offset: int = None, limit: int = None, referenceCount: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if referenceCount is not None:
        final_kwargs['referenceCount'] = referenceCount

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetMobilityCliFeatureProfile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetMobilityCliFeatureProfileByCliId')
def GetMobilityCliFeatureProfileByCliId(cliId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetMobilityCliFeatureProfileByCliId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetAllConfigFeatureForMobility')
def GetAllConfigFeatureForMobility(cliId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetAllConfigFeatureForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetConfigFeatureForMobilityByParcelId')
def GetConfigFeatureForMobilityByParcelId(cliId: str, configId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId
    if configId is not None:
        final_kwargs['configId'] = configId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetConfigFeatureForMobilityByParcelId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetMobilityGlobalFeatureProfile')
def GetMobilityGlobalFeatureProfile(offset: int = None, limit: int = None, referenceCount: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if referenceCount is not None:
        final_kwargs['referenceCount'] = referenceCount

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetMobilityGlobalFeatureProfile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetMobilityGlobalBasicParcelSchemaBySchemaType')
def GetMobilityGlobalBasicParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetMobilityGlobalBasicParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetMobilityFeatureProfileByGlobalId')
def GetMobilityFeatureProfileByGlobalId(globalId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if globalId is not None:
        final_kwargs['globalId'] = globalId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetMobilityFeatureProfileByGlobalId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetQosFeatureForGlobal')
def GetQosFeatureForGlobal(globalId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if globalId is not None:
        final_kwargs['globalId'] = globalId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetQosFeatureForGlobal

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetQosFeatureByParcelIdForGlobal')
def GetQosFeatureByParcelIdForGlobal(globalId: str, qosId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if globalId is not None:
        final_kwargs['globalId'] = globalId
    if qosId is not None:
        final_kwargs['qosId'] = qosId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetQosFeatureByParcelIdForGlobal

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetAaaServersProfileParcelForMobility')
def GetAaaServersProfileParcelForMobility(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetAaaServersProfileParcelForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetAaaServersProfileParcelByParcelIdForMobility')
def GetAaaServersProfileParcelByParcelIdForMobility(profileId: str, aaaserversId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId
    if aaaserversId is not None:
        final_kwargs['aaaserversId'] = aaaserversId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetAaaServersProfileParcelByParcelIdForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetBasicProfileParcelForMobility')
def GetBasicProfileParcelForMobility(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetBasicProfileParcelForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetBasicProfileParcelByParcelIdForMobility')
def GetBasicProfileParcelByParcelIdForMobility(profileId: str, parcelId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId
    if parcelId is not None:
        final_kwargs['parcelId'] = parcelId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetBasicProfileParcelByParcelIdForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularProfileParcelListForMobility')
def GetCellularProfileParcelListForMobility(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularProfileParcelListForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularProfileParcelForMobility')
def GetCellularProfileParcelForMobility(profileId: str, cellularId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularProfileParcelForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetEsimCellularProfileFeatureForMobility')
def GetEsimCellularProfileFeatureForMobility(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetEsimCellularProfileFeatureForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetEsimCellularProfileFeatureByEsimCellularIdForMobility')
def GetEsimCellularProfileFeatureByEsimCellularIdForMobility(profileId: str, esimCellularId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId
    if esimCellularId is not None:
        final_kwargs['esimCellularId'] = esimCellularId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetEsimCellularProfileFeatureByEsimCellularIdForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetEthernetProfileParcels')
def GetEthernetProfileParcels(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetEthernetProfileParcels

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetEthernetProfileParcel')
def GetEthernetProfileParcel(profileId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetEthernetProfileParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLoggingProfileFeatureForMobility')
def GetLoggingProfileFeatureForMobility(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLoggingProfileFeatureForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLoggingProfileFeatureByFeatureIdForMobility')
def GetLoggingProfileFeatureByFeatureIdForMobility(profileId: str, loggingId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId
    if loggingId is not None:
        final_kwargs['loggingId'] = loggingId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLoggingProfileFeatureByFeatureIdForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNetworkProtocolProfileParcelListForMobility')
def GetNetworkProtocolProfileParcelListForMobility(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNetworkProtocolProfileParcelListForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNetworkProtocolProfileParcelForMobility')
def GetNetworkProtocolProfileParcelForMobility(profileId: str, networkProtocolId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId
    if networkProtocolId is not None:
        final_kwargs['networkProtocolId'] = networkProtocolId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNetworkProtocolProfileParcelForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSecurityPolicyProfileParcelListForMobility')
def GetSecurityPolicyProfileParcelListForMobility(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSecurityPolicyProfileParcelListForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSecurityPolicyProfileParcelForMobility')
def GetSecurityPolicyProfileParcelForMobility(profileId: str, securityPolicyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId
    if securityPolicyId is not None:
        final_kwargs['securityPolicyId'] = securityPolicyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSecurityPolicyProfileParcelForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetVpnProfileParcelForMobility')
def GetVpnProfileParcelForMobility(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetVpnProfileParcelForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetVpnProfileParcelByParcelIdForMobility')
def GetVpnProfileParcelByParcelIdForMobility(profileId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetVpnProfileParcelByParcelIdForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWifiProfileParcelListForMobility')
def GetWifiProfileParcelListForMobility(profileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWifiProfileParcelListForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWifiProfileParcelForMobility')
def GetWifiProfileParcelForMobility(profileId: str, wifiId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if profileId is not None:
        final_kwargs['profileId'] = profileId
    if wifiId is not None:
        final_kwargs['wifiId'] = wifiId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWifiProfileParcelForMobility

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetAllNfvirtualCLIFeatureProfiles')
def GetAllNfvirtualCLIFeatureProfiles(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetAllNfvirtualCLIFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualCLIFeatureProfileByid')
def GetNfvirtualCLIFeatureProfileByid(cliId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualCLIFeatureProfileByid

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getNfvirtualCLIParcel')
def getNfvirtualCLIParcel(cliId: str, configId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId
    if configId is not None:
        final_kwargs['configId'] = configId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getNfvirtualCLIParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetAllNfvirtualNetworksFeatureProfiles')
def GetAllNfvirtualNetworksFeatureProfiles(offset: int, limit: int):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetAllNfvirtualNetworksFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetAllNfvirtualOvsNetworksFeatureProfileByProfileId')
def GetAllNfvirtualOvsNetworksFeatureProfileByProfileId(networkId: str, details: bool):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if networkId is not None:
        final_kwargs['networkId'] = networkId
    if details is not None:
        final_kwargs['details'] = details

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetAllNfvirtualOvsNetworksFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualNetworksFeatureProfileByProfileId')
def GetNfvirtualNetworksFeatureProfileByProfileId(networkId: str, details: bool):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if networkId is not None:
        final_kwargs['networkId'] = networkId
    if details is not None:
        final_kwargs['details'] = details

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualNetworksFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualLANParcel')
def GetNfvirtualLANParcel(networksId: str, lanId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if networksId is not None:
        final_kwargs['networksId'] = networksId
    if lanId is not None:
        final_kwargs['lanId'] = lanId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualLANParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualOVSNetworkParcel')
def GetNfvirtualOVSNetworkParcel(networksId: str, ovsNetworkId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if networksId is not None:
        final_kwargs['networksId'] = networksId
    if ovsNetworkId is not None:
        final_kwargs['ovsNetworkId'] = ovsNetworkId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualOVSNetworkParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualRoutesParcel')
def GetNfvirtualRoutesParcel(networksId: str, routesId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if networksId is not None:
        final_kwargs['networksId'] = networksId
    if routesId is not None:
        final_kwargs['routesId'] = routesId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualRoutesParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualSwitchParcel')
def GetNfvirtualSwitchParcel(networksId: str, switchId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if networksId is not None:
        final_kwargs['networksId'] = networksId
    if switchId is not None:
        final_kwargs['switchId'] = switchId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualSwitchParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualVNFAttributesParcel')
def GetNfvirtualVNFAttributesParcel(networksId: str, vnfAttributesId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if networksId is not None:
        final_kwargs['networksId'] = networksId
    if vnfAttributesId is not None:
        final_kwargs['vnfAttributesId'] = vnfAttributesId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualVNFAttributesParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualVNFParcel')
def GetNfvirtualVNFParcel(networksId: str, vnfAttributesId: str, vnfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if networksId is not None:
        final_kwargs['networksId'] = networksId
    if vnfAttributesId is not None:
        final_kwargs['vnfAttributesId'] = vnfAttributesId
    if vnfId is not None:
        final_kwargs['vnfId'] = vnfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualVNFParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualWANParcel')
def GetNfvirtualWANParcel(networksId: str, wanId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if networksId is not None:
        final_kwargs['networksId'] = networksId
    if wanId is not None:
        final_kwargs['wanId'] = wanId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualWANParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetAllNfvirtualSystemFeatureProfiles')
def GetAllNfvirtualSystemFeatureProfiles(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetAllNfvirtualSystemFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualSystemFeatureProfileByProfileId')
def GetNfvirtualSystemFeatureProfileByProfileId(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualSystemFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualAAAParcel')
def GetNfvirtualAAAParcel(systemId: str, aaaId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if aaaId is not None:
        final_kwargs['aaaId'] = aaaId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualAAAParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualBannerParcel')
def GetNfvirtualBannerParcel(systemId: str, bannerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if bannerId is not None:
        final_kwargs['bannerId'] = bannerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualBannerParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualLoggingParcel')
def GetNfvirtualLoggingParcel(systemId: str, loggingId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if loggingId is not None:
        final_kwargs['loggingId'] = loggingId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualLoggingParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualNTPParcel')
def GetNfvirtualNTPParcel(systemId: str, ntpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if ntpId is not None:
        final_kwargs['ntpId'] = ntpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualNTPParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualSNMPParcel')
def GetNfvirtualSNMPParcel(systemId: str, snmpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if snmpId is not None:
        final_kwargs['snmpId'] = snmpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualSNMPParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNfvirtualSystemSettingsParcel')
def GetNfvirtualSystemSettingsParcel(systemId: str, systemSettingsId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if systemSettingsId is not None:
        final_kwargs['systemSettingsId'] = systemSettingsId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNfvirtualSystemSettingsParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingFeatureProfiles')
def GetSdroutingFeatureProfiles(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingCliFeatureProfiles')
def GetSdroutingCliFeatureProfiles(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingCliFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('Get')
def Get(offset: int = None, limit: int = None, featureType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if featureType is not None:
        final_kwargs['featureType'] = featureType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.Get

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingCliFeatureProfile')
def GetSdroutingCliFeatureProfile(cliId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingCliFeatureProfile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingCLIAddOnFeatures')
def GetSdroutingCLIAddOnFeatures(cliId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingCLIAddOnFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingCLIAddOnFeature')
def GetSdroutingCLIAddOnFeature(cliId: str, configId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId
    if configId is not None:
        final_kwargs['configId'] = configId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingCLIAddOnFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingCliConfigGroupFeatures')
def GetSdroutingCliConfigGroupFeatures(cliId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingCliConfigGroupFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingCliConfigGroupFeature')
def GetSdroutingCliConfigGroupFeature(cliId: str, fullConfigId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId
    if fullConfigId is not None:
        final_kwargs['fullConfigId'] = fullConfigId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingCliConfigGroupFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingIosCLassicCLIAddOnFeatures')
def GetSdroutingIosCLassicCLIAddOnFeatures(cliId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingIosCLassicCLIAddOnFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingIosClassicCLIAddOnFeature')
def GetSdroutingIosClassicCLIAddOnFeature(cliId: str, iosConfigId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId
    if iosConfigId is not None:
        final_kwargs['iosConfigId'] = iosConfigId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingIosClassicCLIAddOnFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdRoutingEmbeddedSecurityFeatureProfiles')
def GetSdRoutingEmbeddedSecurityFeatureProfiles(offset: int = None, limit: int = None, referenceCount: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if referenceCount is not None:
        final_kwargs['referenceCount'] = referenceCount

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdRoutingEmbeddedSecurityFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdRoutingEmbeddedSecurityFeatureProfileByProfileId')
def GetSdRoutingEmbeddedSecurityFeatureProfileByProfileId(embeddedSecurityId: str, details: bool = None, references: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if embeddedSecurityId is not None:
        final_kwargs['embeddedSecurityId'] = embeddedSecurityId
    if details is not None:
        final_kwargs['details'] = details
    if references is not None:
        final_kwargs['references'] = references

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdRoutingEmbeddedSecurityFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSecurityFeature')
def GetSecurityFeature(securityId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if securityId is not None:
        final_kwargs['securityId'] = securityId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSecurityFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSecurityFeatureByFeatureId')
def GetSecurityFeatureByFeatureId(securityId: str, securityProfileParcelId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if securityId is not None:
        final_kwargs['securityId'] = securityId
    if securityProfileParcelId is not None:
        final_kwargs['securityProfileParcelId'] = securityProfileParcelId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSecurityFeatureByFeatureId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNgfirewallFeature')
def GetNgfirewallFeature(securityId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if securityId is not None:
        final_kwargs['securityId'] = securityId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNgfirewallFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNgfirewallFeatureByFeatureId')
def GetNgfirewallFeatureByFeatureId(securityId: str, securityProfileParcelId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if securityId is not None:
        final_kwargs['securityId'] = securityId
    if securityProfileParcelId is not None:
        final_kwargs['securityProfileParcelId'] = securityProfileParcelId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNgfirewallFeatureByFeatureId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCybervisionProfileFeatureForOther')
def GetCybervisionProfileFeatureForOther(otherId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if otherId is not None:
        final_kwargs['otherId'] = otherId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCybervisionProfileFeatureForOther

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCybervisionProfileFeatureByFeatureIdForOther')
def GetCybervisionProfileFeatureByFeatureIdForOther(otherId: str, cybervisionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if otherId is not None:
        final_kwargs['otherId'] = otherId
    if cybervisionId is not None:
        final_kwargs['cybervisionId'] = cybervisionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCybervisionProfileFeatureByFeatureIdForOther

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceFeatureProfiles')
def GetSdroutingServiceFeatureProfiles(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceFeatureProfile')
def GetSdroutingServiceFeatureProfile(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceFeatureProfile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingDhcpServerProfileParcels')
def GetSdroutingDhcpServerProfileParcels(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingDhcpServerProfileParcels

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingDhcpServerProfileParcel')
def GetSdroutingDhcpServerProfileParcel(serviceId: str, dhcpServerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if dhcpServerId is not None:
        final_kwargs['dhcpServerId'] = dhcpServerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingDhcpServerProfileParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceIpsecProfileFeatures')
def GetSdroutingServiceIpsecProfileFeatures(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceIpsecProfileFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceIpsecProfileFeature')
def GetSdroutingServiceIpsecProfileFeature(serviceId: str, ipsecProfileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if ipsecProfileId is not None:
        final_kwargs['ipsecProfileId'] = ipsecProfileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceIpsecProfileFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceIpv4AclFeatures')
def GetSdroutingServiceIpv4AclFeatures(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceIpv4AclFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceIpv4AclFeature')
def GetSdroutingServiceIpv4AclFeature(serviceId: str, ipv4AclId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if ipv4AclId is not None:
        final_kwargs['ipv4AclId'] = ipv4AclId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceIpv4AclFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetListOfProfileParcels')
def GetListOfProfileParcels(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetListOfProfileParcels

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetMultiCloudConnection')
def GetMultiCloudConnection(serviceId: str, multiCloudConnectionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if multiCloudConnectionId is not None:
        final_kwargs['multiCloudConnectionId'] = multiCloudConnectionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetMultiCloudConnection

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceObjectTrackerFeatures')
def GetSdroutingServiceObjectTrackerFeatures(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceObjectTrackerFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceObjectTrackerFeature')
def GetSdroutingServiceObjectTrackerFeature(serviceId: str, objectTrackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if objectTrackerId is not None:
        final_kwargs['objectTrackerId'] = objectTrackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceObjectTrackerFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceObjectTrackerGroupFeatures')
def GetSdroutingServiceObjectTrackerGroupFeatures(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceObjectTrackerGroupFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceObjectTrackerGroupFeature')
def GetSdroutingServiceObjectTrackerGroupFeature(serviceId: str, objectTrackerGroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if objectTrackerGroupId is not None:
        final_kwargs['objectTrackerGroupId'] = objectTrackerGroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceObjectTrackerGroupFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceRoutePolicyFeatures')
def GetSdroutingServiceRoutePolicyFeatures(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceRoutePolicyFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceRoutePolicyFeature')
def GetSdroutingServiceRoutePolicyFeature(serviceId: str, routePolicyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if routePolicyId is not None:
        final_kwargs['routePolicyId'] = routePolicyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceRoutePolicyFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfOspfFeatures')
def GetSdroutingServiceVrfOspfFeatures(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfOspfFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfOspfFeature')
def GetSdroutingServiceVrfOspfFeature(serviceId: str, ospfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if ospfId is not None:
        final_kwargs['ospfId'] = ospfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfOspfFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfOspfv3Ipv4Features')
def GetSdroutingServiceVrfOspfv3Ipv4Features(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfOspfv3Ipv4Features

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfOspfv3Ipv4Feature')
def GetSdroutingServiceVrfOspfv3Ipv4Feature(serviceId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfOspfv3Ipv4Feature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfOspfv3Ipv6Features')
def GetSdroutingServiceVrfOspfv3Ipv6Features(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfOspfv3Ipv6Features

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfOspfv3Ipv6Feature')
def GetSdroutingServiceVrfOspfv3Ipv6Feature(serviceId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfOspfv3Ipv6Feature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVRFFeatures')
def GetSdroutingServiceVRFFeatures(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVRFFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfBgpFeatures')
def GetSdroutingServiceVrfBgpFeatures(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfBgpFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfBgpFeature')
def GetSdroutingServiceVrfBgpFeature(serviceId: str, bgpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if bgpId is not None:
        final_kwargs['bgpId'] = bgpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfBgpFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfEigrpFeatures')
def GetSdroutingServiceVrfEigrpFeatures(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfEigrpFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfEigrpFeature')
def GetSdroutingServiceVrfEigrpFeature(serviceId: str, eigrpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if eigrpId is not None:
        final_kwargs['eigrpId'] = eigrpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfEigrpFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVRFFeature')
def GetSdroutingServiceVRFFeature(serviceId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVRFFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVRFDmvpnTunnelFeatures')
def GetSdroutingServiceVRFDmvpnTunnelFeatures(serviceId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVRFDmvpnTunnelFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVRFDmvpnTunnelFeature')
def GetSdroutingServiceVRFDmvpnTunnelFeature(serviceId: str, vrfId: str, tunnelId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if tunnelId is not None:
        final_kwargs['tunnelId'] = tunnelId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVRFDmvpnTunnelFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfInterfaceEthernetFeaturesForService')
def GetSdroutingServiceVrfInterfaceEthernetFeaturesForService(serviceId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfInterfaceEthernetFeaturesForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfInterfaceEthernetFeatureByFeatureIdForServ')
def GetSdroutingServiceVrfInterfaceEthernetFeatureByFeatureIdForServ(serviceId: str, vrfId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfInterfaceEthernetFeatureByFeatureIdForServ

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetVrfInterfaceEthernetAssociatedDhcpServerParcelsForService')
def GetVrfInterfaceEthernetAssociatedDhcpServerParcelsForService(serviceId: str, vrfId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetVrfInterfaceEthernetAssociatedDhcpServerParcelsForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetVrfInterfaceEthernetAssociatedDhcpServerParcelByFeatureIdForS')
def GetVrfInterfaceEthernetAssociatedDhcpServerParcelByFeatureIdForS(serviceId: str, vrfId: str, ethernetId: str, dhcpServerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId
    if dhcpServerId is not None:
        final_kwargs['dhcpServerId'] = dhcpServerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetVrfInterfaceEthernetAssociatedDhcpServerParcelByFeatureIdForS

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfInterfaceIpsecFeaturesForService')
def GetSdroutingServiceVrfInterfaceIpsecFeaturesForService(serviceId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfInterfaceIpsecFeaturesForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingServiceVrfInterfaceIpsecFeatureByFeatureIdForService')
def GetSdroutingServiceVrfInterfaceIpsecFeatureByFeatureIdForService(serviceId: str, vrfId: str, ipsecId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ipsecId is not None:
        final_kwargs['ipsecId'] = ipsecId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingServiceVrfInterfaceIpsecFeatureByFeatureIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetServiceVrfAssociatedRoutingBgpFeatures')
def GetServiceVrfAssociatedRoutingBgpFeatures(serviceId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetServiceVrfAssociatedRoutingBgpFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetServiceVrfAssociatedRoutingBgpParcelByParcelId')
def GetServiceVrfAssociatedRoutingBgpParcelByParcelId(serviceId: str, vrfId: str, bgpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if bgpId is not None:
        final_kwargs['bgpId'] = bgpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetServiceVrfAssociatedRoutingBgpParcelByParcelId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetServiceVrfAssociatedRoutingEigrpFeatures')
def GetServiceVrfAssociatedRoutingEigrpFeatures(serviceId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetServiceVrfAssociatedRoutingEigrpFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetServiceVrfAssociatedRoutingEigrpFeatureByFeatureId')
def GetServiceVrfAssociatedRoutingEigrpFeatureByFeatureId(serviceId: str, vrfId: str, eigrpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if eigrpId is not None:
        final_kwargs['eigrpId'] = eigrpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetServiceVrfAssociatedRoutingEigrpFeatureByFeatureId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetServiceVrfAssociatedRoutingOspfFeatures')
def GetServiceVrfAssociatedRoutingOspfFeatures(serviceId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetServiceVrfAssociatedRoutingOspfFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetServiceVrfAssociatedRoutingOspfFeatureById')
def GetServiceVrfAssociatedRoutingOspfFeatureById(serviceId: str, vrfId: str, ospfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ospfId is not None:
        final_kwargs['ospfId'] = ospfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetServiceVrfAssociatedRoutingOspfFeatureById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetServiceVrfAssociatedRoutingOspfv3Ipv4Features')
def GetServiceVrfAssociatedRoutingOspfv3Ipv4Features(serviceId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetServiceVrfAssociatedRoutingOspfv3Ipv4Features

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetServiceVrfAssociatedRoutingOspfv3Ipv4FeatureById')
def GetServiceVrfAssociatedRoutingOspfv3Ipv4FeatureById(serviceId: str, vrfId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetServiceVrfAssociatedRoutingOspfv3Ipv4FeatureById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetServiceVrfAssociatedRoutingOspfv3Ipv6Parcels')
def GetServiceVrfAssociatedRoutingOspfv3Ipv6Parcels(serviceId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetServiceVrfAssociatedRoutingOspfv3Ipv6Parcels

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetServiceVrfAssociatedRoutingOspfv3Ipv6FeatureById')
def GetServiceVrfAssociatedRoutingOspfv3Ipv6FeatureById(serviceId: str, vrfId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetServiceVrfAssociatedRoutingOspfv3Ipv6FeatureById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdRoutingSseFeatureProfiles')
def GetSdRoutingSseFeatureProfiles(offset: int = None, limit: int = None, referenceCount: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if referenceCount is not None:
        final_kwargs['referenceCount'] = referenceCount

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdRoutingSseFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdRoutingSseFeatureProfileByProfileId')
def GetSdRoutingSseFeatureProfileByProfileId(sseId: str, references: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sseId is not None:
        final_kwargs['sseId'] = sseId
    if references is not None:
        final_kwargs['references'] = references

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdRoutingSseFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCiscoSseFeatureForSse')
def GetCiscoSseFeatureForSse(sseId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sseId is not None:
        final_kwargs['sseId'] = sseId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCiscoSseFeatureForSse

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCiscoSseFeatureByFeatureIdForSSE')
def GetCiscoSseFeatureByFeatureIdForSSE(sseId: str, ciscoSseId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sseId is not None:
        final_kwargs['sseId'] = sseId
    if ciscoSseId is not None:
        final_kwargs['ciscoSseId'] = ciscoSseId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCiscoSseFeatureByFeatureIdForSSE

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingSystemFeatureProfiles')
def GetSdroutingSystemFeatureProfiles(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingSystemFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingSystemFeatureProfile')
def GetSdroutingSystemFeatureProfile(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingSystemFeatureProfile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingAaaFeatures')
def GetSdroutingAaaFeatures(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingAaaFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingAaaFeature')
def GetSdroutingAaaFeature(systemId: str, aaaId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if aaaId is not None:
        final_kwargs['aaaId'] = aaaId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingAaaFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingBannerFeatures')
def GetSdroutingBannerFeatures(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingBannerFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingBannerFeature')
def GetSdroutingBannerFeature(systemId: str, bannerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if bannerId is not None:
        final_kwargs['bannerId'] = bannerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingBannerFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingCertificateFeatures')
def GetSdroutingCertificateFeatures(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingCertificateFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingCertificateFeature')
def GetSdroutingCertificateFeature(systemId: str, certificateId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if certificateId is not None:
        final_kwargs['certificateId'] = certificateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingCertificateFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingFlexiblePortSpeedFeatures')
def GetSdroutingFlexiblePortSpeedFeatures(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingFlexiblePortSpeedFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingFlexiblePortSpeedFeature')
def GetSdroutingFlexiblePortSpeedFeature(systemId: str, flexiblePortSpeedId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if flexiblePortSpeedId is not None:
        final_kwargs['flexiblePortSpeedId'] = flexiblePortSpeedId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingFlexiblePortSpeedFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingGlobalSettingFeatures')
def GetSdroutingGlobalSettingFeatures(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingGlobalSettingFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingGlobalSettingFeature')
def GetSdroutingGlobalSettingFeature(systemId: str, globalId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if globalId is not None:
        final_kwargs['globalId'] = globalId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingGlobalSettingFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingLoggingFeatures')
def GetSdroutingLoggingFeatures(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingLoggingFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingLoggingFeature')
def GetSdroutingLoggingFeature(systemId: str, loggingId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if loggingId is not None:
        final_kwargs['loggingId'] = loggingId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingLoggingFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingNtpFeatures')
def GetSdroutingNtpFeatures(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingNtpFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingNtpFeature')
def GetSdroutingNtpFeature(systemId: str, ntpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if ntpId is not None:
        final_kwargs['ntpId'] = ntpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingNtpFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingSnmpFeatures')
def GetSdroutingSnmpFeatures(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingSnmpFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingSnmpFeature')
def GetSdroutingSnmpFeature(systemId: str, snmpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if snmpId is not None:
        final_kwargs['snmpId'] = snmpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingSnmpFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportFeatureProfiles')
def GetSdroutingTransportFeatureProfiles(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportFeatureProfile')
def GetSdroutingTransportFeatureProfile(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportFeatureProfile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularControllerProfileParcelForTransport_1')
def GetCellularControllerProfileParcelForTransport_1(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerProfileParcelForTransport_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetCellularControllerProfileParcelForTransport_1'])

@register('GetCellularControllerProfileParcelByParcelIdForTransport_1')
def GetCellularControllerProfileParcelByParcelIdForTransport_1(transportId: str, cellularControllerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularControllerId is not None:
        final_kwargs['cellularControllerId'] = cellularControllerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerProfileParcelByParcelIdForTransport_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetCellularControllerProfileParcelByParcelIdForTransport_1'])

@register('GetCellularControllerAssociatedCellularProfileParcelsForTranspor')
def GetCellularControllerAssociatedCellularProfileParcelsForTranspor(transportId: str, cellularControllerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularControllerId is not None:
        final_kwargs['cellularControllerId'] = cellularControllerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerAssociatedCellularProfileParcelsForTranspor

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularControllerAssociatedCellularProfileParcelByParcelIdFo')
def GetCellularControllerAssociatedCellularProfileParcelByParcelIdFo(transportId: str, cellularControllerId: str, cellularProfileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularControllerId is not None:
        final_kwargs['cellularControllerId'] = cellularControllerId
    if cellularProfileId is not None:
        final_kwargs['cellularProfileId'] = cellularProfileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerAssociatedCellularProfileParcelByParcelIdFo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularControllerAssociatedGpsParcelsForTransport_1')
def GetCellularControllerAssociatedGpsParcelsForTransport_1(transportId: str, cellularControllerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularControllerId is not None:
        final_kwargs['cellularControllerId'] = cellularControllerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerAssociatedGpsParcelsForTransport_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetCellularControllerAssociatedGpsParcelsForTransport_1'])

@register('GetCellularControllerAssociatedGpsParcelByParcelIdForTransport_1')
def GetCellularControllerAssociatedGpsParcelByParcelIdForTransport_1(transportId: str, cellularControllerId: str, gpsId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularControllerId is not None:
        final_kwargs['cellularControllerId'] = cellularControllerId
    if gpsId is not None:
        final_kwargs['gpsId'] = gpsId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerAssociatedGpsParcelByParcelIdForTransport_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetCellularControllerAssociatedGpsParcelByParcelIdForTransport_1'])

@register('GetCellularProfileParcelForTransport')
def GetCellularProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularProfileParcelByParcelIdForTransport')
def GetCellularProfileParcelByParcelIdForTransport(transportId: str, cellularProfileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularProfileId is not None:
        final_kwargs['cellularProfileId'] = cellularProfileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportGlobalVRFFeatures')
def GetSdroutingTransportGlobalVRFFeatures(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportGlobalVRFFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportGlobalVrfBgpFeatures')
def GetSdroutingTransportGlobalVrfBgpFeatures(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportGlobalVrfBgpFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportGlobalVrfBgpFeature')
def GetSdroutingTransportGlobalVrfBgpFeature(transportId: str, bgpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if bgpId is not None:
        final_kwargs['bgpId'] = bgpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportGlobalVrfBgpFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportGlobalVRFFeature')
def GetSdroutingTransportGlobalVRFFeature(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportGlobalVRFFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGlobalVRFInterfaceCellularParcelsForTransport')
def GetGlobalVRFInterfaceCellularParcelsForTransport(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGlobalVRFInterfaceCellularParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGlobalVRFInterfaceCellularAssociatedTrackerParcelsForTranspor')
def GetGlobalVRFInterfaceCellularAssociatedTrackerParcelsForTranspor(transportId: str, vrfId: str, cellularId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGlobalVRFInterfaceCellularAssociatedTrackerParcelsForTranspor

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGlobalVRFInterfaceCellularAssociatedTrackerParcelByParcelIdFo')
def GetGlobalVRFInterfaceCellularAssociatedTrackerParcelByParcelIdFo(transportId: str, vrfId: str, cellularId: str, trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId
    if trackerId is not None:
        final_kwargs['trackerId'] = trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGlobalVRFInterfaceCellularAssociatedTrackerParcelByParcelIdFo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGlobalVRFInterfaceCellularAssociatedTrackerParcelsForTranspor')
def GetGlobalVRFInterfaceCellularAssociatedTrackerParcelsForTranspor_1(transportId: str, vrfId: str, cellularId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGlobalVRFInterfaceCellularAssociatedTrackerParcelsForTranspor_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGlobalVRFInterfaceCellularAssociatedTrackerParcelByParcelIdFo')
def GetGlobalVRFInterfaceCellularAssociatedTrackerParcelByParcelIdFo_1(transportId: str, vrfId: str, cellularId: str, trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId
    if trackerId is not None:
        final_kwargs['trackerId'] = trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGlobalVRFInterfaceCellularAssociatedTrackerParcelByParcelIdFo_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGlobalVRFInterfaceCellularParcelByParcelIdForTransport')
def GetGlobalVRFInterfaceCellularParcelByParcelIdForTransport(transportId: str, vrfId: str, intfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if intfId is not None:
        final_kwargs['intfId'] = intfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGlobalVRFInterfaceCellularParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportGlobalVrfInterfaceEthernetParcelsForTranspo')
def GetSdroutingTransportGlobalVrfInterfaceEthernetParcelsForTranspo(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportGlobalVrfInterfaceEthernetParcelsForTranspo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportGlobalVrfInterfaceEthernetParcelByParcelIdF')
def GetSdroutingTransportGlobalVrfInterfaceEthernetParcelByParcelIdF(transportId: str, vrfId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportGlobalVrfInterfaceEthernetParcelByParcelIdF

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportGlobalVrfInterfaceIpsecFeaturesForTransport')
def GetSdroutingTransportGlobalVrfInterfaceIpsecFeaturesForTransport(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportGlobalVrfInterfaceIpsecFeaturesForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportGlobalVrfInterfaceIpsecFeatureByFeatureIdFo')
def GetSdroutingTransportGlobalVrfInterfaceIpsecFeatureByFeatureIdFo(transportId: str, vrfId: str, ipsecId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ipsecId is not None:
        final_kwargs['ipsecId'] = ipsecId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportGlobalVrfInterfaceIpsecFeatureByFeatureIdFo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTransportVrfAssociatedRoutingBgpFeatures')
def GetTransportVrfAssociatedRoutingBgpFeatures(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTransportVrfAssociatedRoutingBgpFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetVrfAssociatedRoutingBgpFeatureById')
def GetVrfAssociatedRoutingBgpFeatureById(transportId: str, vrfId: str, bgpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if bgpId is not None:
        final_kwargs['bgpId'] = bgpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetVrfAssociatedRoutingBgpFeatureById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTransportVrfAssociatedRoutingOspfFeatures')
def GetTransportVrfAssociatedRoutingOspfFeatures(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTransportVrfAssociatedRoutingOspfFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetVrfAssociatedRoutingOspfParcelByFeatureId')
def GetVrfAssociatedRoutingOspfParcelByFeatureId(transportId: str, vrfId: str, ospfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ospfId is not None:
        final_kwargs['ospfId'] = ospfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetVrfAssociatedRoutingOspfParcelByFeatureId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTransportVrfAssociatedRoutingOspfv3Ipv4Features')
def GetTransportVrfAssociatedRoutingOspfv3Ipv4Features(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTransportVrfAssociatedRoutingOspfv3Ipv4Features

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetVrfAssociatedRoutingOspfv3Ipv4FeatureById')
def GetVrfAssociatedRoutingOspfv3Ipv4FeatureById(transportId: str, vrfId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetVrfAssociatedRoutingOspfv3Ipv4FeatureById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTransportVrfAssociatedRoutingOspfv3Ipv6Features')
def GetTransportVrfAssociatedRoutingOspfv3Ipv6Features(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTransportVrfAssociatedRoutingOspfv3Ipv6Features

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetVrfAssociatedRoutingOspfv3Ipv6FeatureById')
def GetVrfAssociatedRoutingOspfv3Ipv6FeatureById(transportId: str, vrfId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetVrfAssociatedRoutingOspfv3Ipv6FeatureById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGPSProfileParcelForTransport')
def GetGPSProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGPSProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGPSProfileParcelByParcelIdForTransport')
def GetGPSProfileParcelByParcelIdForTransport(transportId: str, gpsId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if gpsId is not None:
        final_kwargs['gpsId'] = gpsId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGPSProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportIpv4AclFeatures')
def GetSdroutingTransportIpv4AclFeatures(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportIpv4AclFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportIpv4AclFeature')
def GetSdroutingTransportIpv4AclFeature(transportId: str, ipv4AclId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if ipv4AclId is not None:
        final_kwargs['ipv4AclId'] = ipv4AclId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportIpv4AclFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingManagementVRFFeatures')
def GetSdroutingManagementVRFFeatures(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingManagementVRFFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingManagementVRFFeature')
def GetSdroutingManagementVRFFeature(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingManagementVRFFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingManagementVrfInterfaceEthernetParcelsForTransportPro')
def GetSdroutingManagementVrfInterfaceEthernetParcelsForTransportPro(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingManagementVrfInterfaceEthernetParcelsForTransportPro

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingManagementVrfInterfaceEthernetParcelByParcelIdForTra')
def GetSdroutingManagementVrfInterfaceEthernetParcelByParcelIdForTra(transportId: str, vrfId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingManagementVrfInterfaceEthernetParcelByParcelIdForTra

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnProfileParcelForService_1')
def GetLanVpnProfileParcelForService_1(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnProfileParcelForService_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetLanVpnProfileParcelForService_1'])

@register('GetLanVpnProfileParcelByParcelIdForService_1')
def GetLanVpnProfileParcelByParcelIdForService_1(transportId: str, multiCloudConnectionId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if multiCloudConnectionId is not None:
        final_kwargs['multiCloudConnectionId'] = multiCloudConnectionId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnProfileParcelByParcelIdForService_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetLanVpnProfileParcelByParcelIdForService_1'])

@register('GetSdroutingTransportObjectTrackerFeatures')
def GetSdroutingTransportObjectTrackerFeatures(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportObjectTrackerFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportObjectTrackerFeature')
def GetSdroutingTransportObjectTrackerFeature(transportId: str, objectTrackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if objectTrackerId is not None:
        final_kwargs['objectTrackerId'] = objectTrackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportObjectTrackerFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportObjectTrackerGroupFeatures')
def GetSdroutingTransportObjectTrackerGroupFeatures(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportObjectTrackerGroupFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportObjectTrackerGroupFeature')
def GetSdroutingTransportObjectTrackerGroupFeature(transportId: str, objectTrackerGroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if objectTrackerGroupId is not None:
        final_kwargs['objectTrackerGroupId'] = objectTrackerGroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportObjectTrackerGroupFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportRoutePolicyFeatures')
def GetSdroutingTransportRoutePolicyFeatures(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportRoutePolicyFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportRoutePolicyFeature')
def GetSdroutingTransportRoutePolicyFeature(transportId: str, routePolicyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if routePolicyId is not None:
        final_kwargs['routePolicyId'] = routePolicyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportRoutePolicyFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportRoutingOspfFeatures')
def GetSdroutingTransportRoutingOspfFeatures(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportRoutingOspfFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportRoutingOspfFeature')
def GetSdroutingTransportRoutingOspfFeature(transportId: str, ospfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if ospfId is not None:
        final_kwargs['ospfId'] = ospfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportRoutingOspfFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportRoutingOspfv3Ipv4Features')
def GetSdroutingTransportRoutingOspfv3Ipv4Features(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportRoutingOspfv3Ipv4Features

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportRoutingOspfv3Ipv4Feature')
def GetSdroutingTransportRoutingOspfv3Ipv4Feature(transportId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportRoutingOspfv3Ipv4Feature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportRoutingOspfv3Ipv6Features')
def GetSdroutingTransportRoutingOspfv3Ipv6Features(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportRoutingOspfv3Ipv6Features

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportRoutingOspfv3Ipv6Feature')
def GetSdroutingTransportRoutingOspfv3Ipv6Feature(transportId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportRoutingOspfv3Ipv6Feature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTrackerProfileParcelForTransport_1')
def GetTrackerProfileParcelForTransport_1(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerProfileParcelForTransport_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetTrackerProfileParcelForTransport_1'])

@register('GetTrackerProfileParcelByParcelIdForTransport_1')
def GetTrackerProfileParcelByParcelIdForTransport_1(transportId: str, trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if trackerId is not None:
        final_kwargs['trackerId'] = trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerProfileParcelByParcelIdForTransport_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetTrackerProfileParcelByParcelIdForTransport_1'])

@register('GetTrackerGroupProfileParcelForTransport_1')
def GetTrackerGroupProfileParcelForTransport_1(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerGroupProfileParcelForTransport_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetTrackerGroupProfileParcelForTransport_1'])

@register('GetTrackerGroupProfileParcelByParcelIdForTransport_1')
def GetTrackerGroupProfileParcelByParcelIdForTransport_1(transportId: str, trackergroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if trackergroupId is not None:
        final_kwargs['trackergroupId'] = trackergroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerGroupProfileParcelByParcelIdForTransport_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetTrackerGroupProfileParcelByParcelIdForTransport_1'])

@register('GetSdroutingTransportVRFFeatures')
def GetSdroutingTransportVRFFeatures(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportVRFFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportVrfBgpFeatures')
def GetSdroutingTransportVrfBgpFeatures(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportVrfBgpFeatures

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportVrfBgpFeature')
def GetSdroutingTransportVrfBgpFeature(transportId: str, bgpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if bgpId is not None:
        final_kwargs['bgpId'] = bgpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportVrfBgpFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportVRFFeature')
def GetSdroutingTransportVRFFeature(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportVRFFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportVrfInterfaceEthernetParcelsForTransport')
def GetSdroutingTransportVrfInterfaceEthernetParcelsForTransport(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportVrfInterfaceEthernetParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportVrfInterfaceEthernetParcelByParcelIdForTran')
def GetSdroutingTransportVrfInterfaceEthernetParcelByParcelIdForTran(transportId: str, vrfId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportVrfInterfaceEthernetParcelByParcelIdForTran

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportVrfInterfaceIpsecFeaturesForTransport')
def GetSdroutingTransportVrfInterfaceIpsecFeaturesForTransport(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportVrfInterfaceIpsecFeaturesForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdroutingTransportVrfInterfaceIpsecFeatureByFeatureIdForTrans')
def GetSdroutingTransportVrfInterfaceIpsecFeatureByFeatureIdForTrans(transportId: str, vrfId: str, ipsecId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ipsecId is not None:
        final_kwargs['ipsecId'] = ipsecId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdroutingTransportVrfInterfaceIpsecFeatureByFeatureIdForTrans

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTransportVrfAssociatedRoutingBgpFeatures_1')
def GetTransportVrfAssociatedRoutingBgpFeatures_1(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTransportVrfAssociatedRoutingBgpFeatures_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetTransportVrfAssociatedRoutingBgpFeatures_1'])

@register('GetTransportVrfAssociatedRoutingBgpById')
def GetTransportVrfAssociatedRoutingBgpById(transportId: str, vrfId: str, bgpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if bgpId is not None:
        final_kwargs['bgpId'] = bgpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTransportVrfAssociatedRoutingBgpById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTransportVrfAssociatedRoutingOspfFeatures_1')
def GetTransportVrfAssociatedRoutingOspfFeatures_1(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTransportVrfAssociatedRoutingOspfFeatures_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetTransportVrfAssociatedRoutingOspfFeatures_1'])

@register('GetVrfAssociatedRoutingOspfById')
def GetVrfAssociatedRoutingOspfById(transportId: str, vrfId: str, ospfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ospfId is not None:
        final_kwargs['ospfId'] = ospfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetVrfAssociatedRoutingOspfById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTransportVrfAssociatedRoutingOspfv3Ipv4Features_1')
def GetTransportVrfAssociatedRoutingOspfv3Ipv4Features_1(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTransportVrfAssociatedRoutingOspfv3Ipv4Features_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetTransportVrfAssociatedRoutingOspfv3Ipv4Features_1'])

@register('GetVrfAssociatedRoutingOspfv3Ipv4FeatureById_1')
def GetVrfAssociatedRoutingOspfv3Ipv4FeatureById_1(transportId: str, vrfId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetVrfAssociatedRoutingOspfv3Ipv4FeatureById_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetVrfAssociatedRoutingOspfv3Ipv4FeatureById_1'])

@register('GetTransportVrfAssociatedRoutingOspfv3Ipv6Features_1')
def GetTransportVrfAssociatedRoutingOspfv3Ipv6Features_1(transportId: str, vrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTransportVrfAssociatedRoutingOspfv3Ipv6Features_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetTransportVrfAssociatedRoutingOspfv3Ipv6Features_1'])

@register('GetVrfAssociatedRoutingOspfv3Ipv6FeatureById_1')
def GetVrfAssociatedRoutingOspfv3Ipv6FeatureById_1(transportId: str, vrfId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vrfId is not None:
        final_kwargs['vrfId'] = vrfId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetVrfAssociatedRoutingOspfv3Ipv6FeatureById_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetVrfAssociatedRoutingOspfv3Ipv6FeatureById_1'])

@register('GetSdwanFeatureProfileBySdwanFamily')
def GetSdwanFeatureProfileBySdwanFamily(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanFeatureProfileBySdwanFamily

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCloudProbeProfileParcelByParcelIdForapplication-priority')
def GetCloudProbeProfileParcelByParcelIdForapplication_priority(applicationPriorityId: str, cloudProbeId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if applicationPriorityId is not None:
        final_kwargs['applicationPriorityId'] = applicationPriorityId
    if cloudProbeId is not None:
        final_kwargs['cloudProbeId'] = cloudProbeId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCloudProbeProfileParcelByParcelIdForapplication_priority

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyApplicationProfileParcel')
def getPolicyApplicationProfileParcel(applicationPriorityId: str, qosPolicyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if applicationPriorityId is not None:
        final_kwargs['applicationPriorityId'] = applicationPriorityId
    if qosPolicyId is not None:
        final_kwargs['qosPolicyId'] = qosPolicyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyApplicationProfileParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTrafficPolicyProfileParcelByParcelIdForapplication-priority')
def GetTrafficPolicyProfileParcelByParcelIdForapplication_priority(applicationPriorityId: str, trafficPolicyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if applicationPriorityId is not None:
        final_kwargs['applicationPriorityId'] = applicationPriorityId
    if trafficPolicyId is not None:
        final_kwargs['trafficPolicyId'] = trafficPolicyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrafficPolicyProfileParcelByParcelIdForapplication_priority

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanFeatureProfilesByFamilyAndType_1')
def GetSdwanFeatureProfilesByFamilyAndType_1(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanFeatureProfilesByFamilyAndType_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetSdwanFeatureProfilesByFamilyAndType_1'])

@register('GetSdwanCliConfigFeatureSchemaBySchemaType')
def GetSdwanCliConfigFeatureSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanCliConfigFeatureSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanFeatureProfilesByFamilyAndType')
def GetSdwanFeatureProfilesByFamilyAndType(offset: int = None, limit: int = None, featureType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if featureType is not None:
        final_kwargs['featureType'] = featureType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanFeatureProfilesByFamilyAndType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanFeatureProfileByProfileId')
def GetSdwanFeatureProfileByProfileId(cliId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetConfigProfileParcelForCLI')
def GetConfigProfileParcelForCLI(cliId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetConfigProfileParcelForCLI

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetConfigProfileParcelByParcelIdForCLI')
def GetConfigProfileParcelByParcelIdForCLI(cliId: str, configId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if cliId is not None:
        final_kwargs['cliId'] = cliId
    if configId is not None:
        final_kwargs['configId'] = configId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetConfigProfileParcelByParcelIdForCLI

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanDnsSecurityFeatureProfiles')
def GetSdwanDnsSecurityFeatureProfiles(offset: int = None, limit: int = None, referenceCount: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if referenceCount is not None:
        final_kwargs['referenceCount'] = referenceCount

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanDnsSecurityFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanDnsSecurityFeatureProfileByProfileId')
def GetSdwanDnsSecurityFeatureProfileByProfileId(dnsSecurityId: str, references: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if dnsSecurityId is not None:
        final_kwargs['dnsSecurityId'] = dnsSecurityId
    if references is not None:
        final_kwargs['references'] = references

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanDnsSecurityFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSigSecurityProfileParcel')
def GetSigSecurityProfileParcel(dnsSecurityId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if dnsSecurityId is not None:
        final_kwargs['dnsSecurityId'] = dnsSecurityId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSigSecurityProfileParcel

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSigSecurityProfileParcelByParcelId')
def GetSigSecurityProfileParcelByParcelId(dnsSecurityId: str, dnsSecurityProfileParcelId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if dnsSecurityId is not None:
        final_kwargs['dnsSecurityId'] = dnsSecurityId
    if dnsSecurityProfileParcelId is not None:
        final_kwargs['dnsSecurityProfileParcelId'] = dnsSecurityProfileParcelId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSigSecurityProfileParcelByParcelId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSecurityFeature_1')
def GetSdwanSecurityFeature_1(securityId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if securityId is not None:
        final_kwargs['securityId'] = securityId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSecurityFeature_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetSdwanSecurityFeature_1'])

@register('GetSdwanSecurityFeatureByFeatureId_1')
def GetSdwanSecurityFeatureByFeatureId_1(securityId: str, securityProfileParcelId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if securityId is not None:
        final_kwargs['securityId'] = securityId
    if securityProfileParcelId is not None:
        final_kwargs['securityProfileParcelId'] = securityProfileParcelId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSecurityFeatureByFeatureId_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetSdwanSecurityFeatureByFeatureId_1'])

@register('GetSdwanNgfirewallFeature')
def GetSdwanNgfirewallFeature(securityId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if securityId is not None:
        final_kwargs['securityId'] = securityId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanNgfirewallFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanNgfirewallFeatureByFeatureId')
def GetSdwanNgfirewallFeatureByFeatureId(securityId: str, securityProfileParcelId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if securityId is not None:
        final_kwargs['securityId'] = securityId
    if securityProfileParcelId is not None:
        final_kwargs['securityProfileParcelId'] = securityProfileParcelId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanNgfirewallFeatureByFeatureId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanOtherFeatureProfiles')
def GetSdwanOtherFeatureProfiles(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanOtherFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanOtherThousandeyesParcelSchemaBySchemaType')
def GetSdwanOtherThousandeyesParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanOtherThousandeyesParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanOtherFeatureProfileByProfileId')
def GetSdwanOtherFeatureProfileByProfileId(otherId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if otherId is not None:
        final_kwargs['otherId'] = otherId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanOtherFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetThousandeyesProfileParcelForOther')
def GetThousandeyesProfileParcelForOther(otherId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if otherId is not None:
        final_kwargs['otherId'] = otherId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetThousandeyesProfileParcelForOther

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetThousandeyesProfileParcelByParcelIdForOther')
def GetThousandeyesProfileParcelByParcelIdForOther(otherId: str, thousandeyesId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if otherId is not None:
        final_kwargs['otherId'] = otherId
    if thousandeyesId is not None:
        final_kwargs['thousandeyesId'] = thousandeyesId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetThousandeyesProfileParcelByParcelIdForOther

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetUcseProfileFeatureForOther')
def GetUcseProfileFeatureForOther(otherId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if otherId is not None:
        final_kwargs['otherId'] = otherId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetUcseProfileFeatureForOther

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetUcseProfileFeatureByIdFFeatureForOther')
def GetUcseProfileFeatureByIdFFeatureForOther(otherId: str, ucseId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if otherId is not None:
        final_kwargs['otherId'] = otherId
    if ucseId is not None:
        final_kwargs['ucseId'] = ucseId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetUcseProfileFeatureByIdFFeatureForOther

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSecurityFeature')
def GetSdwanSecurityFeature(policyObjectId: str, securityProfileParcelType: str, referenceCount: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyObjectId is not None:
        final_kwargs['policyObjectId'] = policyObjectId
    if securityProfileParcelType is not None:
        final_kwargs['securityProfileParcelType'] = securityProfileParcelType
    if referenceCount is not None:
        final_kwargs['referenceCount'] = referenceCount

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSecurityFeature

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSecurityFeatureByFeatureId')
def GetSdwanSecurityFeatureByFeatureId(policyObjectId: str, securityProfileParcelType: str, securityProfileParcelId: str, references: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyObjectId is not None:
        final_kwargs['policyObjectId'] = policyObjectId
    if securityProfileParcelType is not None:
        final_kwargs['securityProfileParcelType'] = securityProfileParcelType
    if securityProfileParcelId is not None:
        final_kwargs['securityProfileParcelId'] = securityProfileParcelId
    if references is not None:
        final_kwargs['references'] = references

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSecurityFeatureByFeatureId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetDataPrefixProfileParcelForPolicyObject')
def GetDataPrefixProfileParcelForPolicyObject(policyObjectId: str, policyObjectListType: str, referenceCount: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyObjectId is not None:
        final_kwargs['policyObjectId'] = policyObjectId
    if policyObjectListType is not None:
        final_kwargs['policyObjectListType'] = policyObjectListType
    if referenceCount is not None:
        final_kwargs['referenceCount'] = referenceCount

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetDataPrefixProfileParcelForPolicyObject

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetDataPrefixProfileParcelByParcelIdForPolicyObject')
def GetDataPrefixProfileParcelByParcelIdForPolicyObject(policyObjectId: str, policyObjectListType: str, listObjectId: str, references: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyObjectId is not None:
        final_kwargs['policyObjectId'] = policyObjectId
    if policyObjectListType is not None:
        final_kwargs['policyObjectListType'] = policyObjectListType
    if listObjectId is not None:
        final_kwargs['listObjectId'] = listObjectId
    if references is not None:
        final_kwargs['references'] = references

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetDataPrefixProfileParcelByParcelIdForPolicyObject

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanPolicyObjectDataPrefixParcelSchemaBySchemaType')
def GetSdwanPolicyObjectDataPrefixParcelSchemaBySchemaType(schemaType: str, policyObjectListType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType
    if policyObjectListType is not None:
        final_kwargs['policyObjectListType'] = policyObjectListType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanPolicyObjectDataPrefixParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanServiceFeatureProfiles')
def GetSdwanServiceFeatureProfiles(offset: int = None, limit: int = None, details: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if details is not None:
        final_kwargs['details'] = details

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanServiceFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanServiceDhcpServerParcelSchemaBySchemaType')
def GetSdwanServiceDhcpServerParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanServiceDhcpServerParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema')
def GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanServiceLanVpnInterfaceEthernetParcelSchemaBySchema

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCedgeServiceLanVpnInterfaceGreSchemaBySchema')
def GetCedgeServiceLanVpnInterfaceGreSchemaBySchema(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCedgeServiceLanVpnInterfaceGreSchemaBySchema

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSdwanProfileParcelSchema')
def getSdwanProfileParcelSchema(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSdwanProfileParcelSchema

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCedgeServiceLanVpnInterfaceSviParcelSchemaBySchema')
def GetCedgeServiceLanVpnInterfaceSviParcelSchemaBySchema(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCedgeServiceLanVpnInterfaceSviParcelSchemaBySchema

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanServiceLanVpnParcelSchemaBySchemaType')
def GetSdwanServiceLanVpnParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanServiceLanVpnParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanServiceRoutingBgpParcelSchemaBySchemaType')
def GetSdwanServiceRoutingBgpParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanServiceRoutingBgpParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanServiceRoutingMulticastParcelSchemaBySchemaType')
def GetSdwanServiceRoutingMulticastParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanServiceRoutingMulticastParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCedgeServiceSwitchportParcelSchemaBySchemaType')
def GetCedgeServiceSwitchportParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCedgeServiceSwitchportParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanServiceTrackerParcelSchemaBySchemaType')
def GetSdwanServiceTrackerParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanServiceTrackerParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCedgeServiceTrackerGroupParcelSchemaBySchemaType')
def GetCedgeServiceTrackerGroupParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCedgeServiceTrackerGroupParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanServiceWirelesslanParcelSchemaBySchemaType')
def GetSdwanServiceWirelesslanParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanServiceWirelesslanParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanServiceFeatureProfileByProfileId')
def GetSdwanServiceFeatureProfileByProfileId(serviceId: str, details: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if details is not None:
        final_kwargs['details'] = details

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanServiceFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetAppqoeProfileParcelForService')
def GetAppqoeProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetAppqoeProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetAppqoeProfileParcelByParcelIdForService')
def GetAppqoeProfileParcelByParcelIdForService(serviceId: str, appqoeId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if appqoeId is not None:
        final_kwargs['appqoeId'] = appqoeId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetAppqoeProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetDhcpServerProfileParcelForService')
def GetDhcpServerProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetDhcpServerProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetDhcpServerProfileParcelByParcelIdForService')
def GetDhcpServerProfileParcelByParcelIdForService(serviceId: str, dhcpServerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if dhcpServerId is not None:
        final_kwargs['dhcpServerId'] = dhcpServerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetDhcpServerProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnProfileParcelForService')
def GetLanVpnProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnProfileParcelByParcelIdForService')
def GetLanVpnProfileParcelByParcelIdForService(serviceId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetInterfaceEthernetParcelsForServiceLanVpn')
def GetInterfaceEthernetParcelsForServiceLanVpn(serviceId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetInterfaceEthernetParcelsForServiceLanVpn

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceEthernetParcelByParcelIdForService')
def GetLanVpnInterfaceEthernetParcelByParcelIdForService(serviceId: str, vpnId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceEthernetParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceEthernetAssociatedDhcpServerParcelsForTranspor')
def GetLanVpnInterfaceEthernetAssociatedDhcpServerParcelsForTranspor(serviceId: str, vpnId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceEthernetAssociatedDhcpServerParcelsForTranspor

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceEthernetAssociatedDhcpServerParcelByParcelIdFo')
def GetLanVpnInterfaceEthernetAssociatedDhcpServerParcelByParcelIdFo(serviceId: str, vpnId: str, ethernetId: str, dhcpServerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId
    if dhcpServerId is not None:
        final_kwargs['dhcpServerId'] = dhcpServerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceEthernetAssociatedDhcpServerParcelByParcelIdFo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport')
def GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport(serviceId: str, vpnId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTr')
def GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTr(serviceId: str, vpnId: str, ethernetId: str, trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId
    if trackerId is not None:
        final_kwargs['trackerId'] = trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTr

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceEthernetAssociatedTrackerGroupParcelsForTransp')
def GetLanVpnInterfaceEthernetAssociatedTrackerGroupParcelsForTransp(serviceId: str, vpnId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceEthernetAssociatedTrackerGroupParcelsForTransp

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceEthernetAssociatedTrackerGroupParcelByParcelId')
def GetLanVpnInterfaceEthernetAssociatedTrackerGroupParcelByParcelId(serviceId: str, vpnId: str, ethernetId: str, trackergroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId
    if trackergroupId is not None:
        final_kwargs['trackergroupId'] = trackergroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceEthernetAssociatedTrackerGroupParcelByParcelId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetInterfaceGresForServiceLanVpn')
def GetInterfaceGresForServiceLanVpn(serviceId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetInterfaceGresForServiceLanVpn

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceGreByIdForService')
def GetLanVpnInterfaceGreByIdForService(serviceId: str, vpnId: str, greId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if greId is not None:
        final_kwargs['greId'] = greId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceGreByIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getListOfProfileParcels')
def getListOfProfileParcels(serviceId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListOfProfileParcels

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getProfileParcelByParcelId')
def getProfileParcelByParcelId(serviceId: str, vpnId: str, ipsecId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ipsecId is not None:
        final_kwargs['ipsecId'] = ipsecId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getProfileParcelByParcelId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceIpsecAssociatedDhcpServerParcelsForTransport')
def GetLanVpnInterfaceIpsecAssociatedDhcpServerParcelsForTransport(serviceId: str, vpnId: str, ipsecId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ipsecId is not None:
        final_kwargs['ipsecId'] = ipsecId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceIpsecAssociatedDhcpServerParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceIpsecAssociatedDhcpServerParcelByParcelIdForTr')
def GetLanVpnInterfaceIpsecAssociatedDhcpServerParcelByParcelIdForTr(serviceId: str, vpnId: str, ipsecId: str, dhcpServerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ipsecId is not None:
        final_kwargs['ipsecId'] = ipsecId
    if dhcpServerId is not None:
        final_kwargs['dhcpServerId'] = dhcpServerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceIpsecAssociatedDhcpServerParcelByParcelIdForTr

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetInterfaceSviParcelsForServiceLanVpn')
def GetInterfaceSviParcelsForServiceLanVpn(serviceId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetInterfaceSviParcelsForServiceLanVpn

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceSviParcelByParcelIdForService')
def GetLanVpnInterfaceSviParcelByParcelIdForService(serviceId: str, vpnId: str, sviId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if sviId is not None:
        final_kwargs['sviId'] = sviId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceSviParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceSviAssociatedDhcpServerParcelsForTransport')
def GetLanVpnInterfaceSviAssociatedDhcpServerParcelsForTransport(serviceId: str, vpnId: str, sviId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if sviId is not None:
        final_kwargs['sviId'] = sviId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceSviAssociatedDhcpServerParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnInterfaceSviAssociatedDhcpServerParcelByParcelIdForTran')
def GetLanVpnInterfaceSviAssociatedDhcpServerParcelByParcelIdForTran(serviceId: str, vpnId: str, sviId: str, dhcpServerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if sviId is not None:
        final_kwargs['sviId'] = sviId
    if dhcpServerId is not None:
        final_kwargs['dhcpServerId'] = dhcpServerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnInterfaceSviAssociatedDhcpServerParcelByParcelIdForTran

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingBgpParcelsForService')
def GetLanVpnAssociatedRoutingBgpParcelsForService(serviceId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingBgpParcelsForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService')
def GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService(serviceId: str, vpnId: str, bgpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if bgpId is not None:
        final_kwargs['bgpId'] = bgpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingBgpParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingEigrpParcelsForService')
def GetLanVpnAssociatedRoutingEigrpParcelsForService(serviceId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingEigrpParcelsForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingEigrpParcelByParcelIdForService')
def GetLanVpnAssociatedRoutingEigrpParcelByParcelIdForService(serviceId: str, vpnId: str, eigrpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if eigrpId is not None:
        final_kwargs['eigrpId'] = eigrpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingEigrpParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingMulticastParcelsForService')
def GetLanVpnAssociatedRoutingMulticastParcelsForService(serviceId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingMulticastParcelsForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingMulticastParcelByParcelIdForService')
def GetLanVpnAssociatedRoutingMulticastParcelByParcelIdForService(serviceId: str, vpnId: str, multicastId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if multicastId is not None:
        final_kwargs['multicastId'] = multicastId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingMulticastParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingOspfParcelsForService')
def GetLanVpnAssociatedRoutingOspfParcelsForService(serviceId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingOspfParcelsForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService')
def GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService(serviceId: str, vpnId: str, ospfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ospfId is not None:
        final_kwargs['ospfId'] = ospfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingOspfParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingOspfv3IPv4ParcelsForService')
def GetLanVpnAssociatedRoutingOspfv3IPv4ParcelsForService(serviceId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingOspfv3IPv4ParcelsForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingOspfv3IPv4ParcelByParcelIdForService')
def GetLanVpnAssociatedRoutingOspfv3IPv4ParcelByParcelIdForService(serviceId: str, vpnId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingOspfv3IPv4ParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingOspfv3IPv6ParcelsForService')
def GetLanVpnAssociatedRoutingOspfv3IPv6ParcelsForService(serviceId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingOspfv3IPv6ParcelsForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLanVpnAssociatedRoutingOspfv3IPv6ParcelByParcelIdForService')
def GetLanVpnAssociatedRoutingOspfv3IPv6ParcelByParcelIdForService(serviceId: str, vpnId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLanVpnAssociatedRoutingOspfv3IPv6ParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingBgpProfileParcelForService')
def GetRoutingBgpProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingBgpProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingBgpProfileParcelByParcelIdForService')
def GetRoutingBgpProfileParcelByParcelIdForService(serviceId: str, bgpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if bgpId is not None:
        final_kwargs['bgpId'] = bgpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingBgpProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingEigrpProfileParcelForService')
def GetRoutingEigrpProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingEigrpProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingEigrpProfileParcelByParcelIdForService')
def GetRoutingEigrpProfileParcelByParcelIdForService(serviceId: str, eigrpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if eigrpId is not None:
        final_kwargs['eigrpId'] = eigrpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingEigrpProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingMulticastProfileParcelForService')
def GetRoutingMulticastProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingMulticastProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingMulticastProfileParcelByParcelIdForService')
def GetRoutingMulticastProfileParcelByParcelIdForService(serviceId: str, multicastId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if multicastId is not None:
        final_kwargs['multicastId'] = multicastId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingMulticastProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfProfileParcelForService')
def GetRoutingOspfProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfProfileParcelByParcelIdForService')
def GetRoutingOspfProfileParcelByParcelIdForService(serviceId: str, ospfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if ospfId is not None:
        final_kwargs['ospfId'] = ospfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfv3Ipv4AfProfileParcelForService')
def GetRoutingOspfv3Ipv4AfProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfv3Ipv4AfProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfv3IPv4AfProfileParcelByParcelIdForService')
def GetRoutingOspfv3IPv4AfProfileParcelByParcelIdForService(serviceId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfv3IPv4AfProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfv3Ipv6AfProfileParcelForService')
def GetRoutingOspfv3Ipv6AfProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfv3Ipv6AfProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfv3IPv6AfProfileParcelByParcelIdForService')
def GetRoutingOspfv3IPv6AfProfileParcelByParcelIdForService(serviceId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfv3IPv6AfProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSwitchportParcelsForService')
def GetSwitchportParcelsForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSwitchportParcelsForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSwitchportParcelByParcelIdForService')
def GetSwitchportParcelByParcelIdForService(serviceId: str, switchportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if switchportId is not None:
        final_kwargs['switchportId'] = switchportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSwitchportParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTrackerProfileParcelForService')
def GetTrackerProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTrackerProfileParcelByParcelIdForService')
def GetTrackerProfileParcelByParcelIdForService(serviceId: str, trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if trackerId is not None:
        final_kwargs['trackerId'] = trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTrackerGroupProfileParcelForService')
def GetTrackerGroupProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerGroupProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTrackerGroupProfileParcelByParcelIdForService')
def GetTrackerGroupProfileParcelByParcelIdForService(serviceId: str, trackergroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if trackergroupId is not None:
        final_kwargs['trackergroupId'] = trackergroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerGroupProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWirelesslanProfileParcelForService')
def GetWirelesslanProfileParcelForService(serviceId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWirelesslanProfileParcelForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWirelesslanProfileParcelByParcelIdForService')
def GetWirelesslanProfileParcelByParcelIdForService(serviceId: str, wirelesslanId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if serviceId is not None:
        final_kwargs['serviceId'] = serviceId
    if wirelesslanId is not None:
        final_kwargs['wirelesslanId'] = wirelesslanId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWirelesslanProfileParcelByParcelIdForService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSigSecurityFeatureProfiles')
def GetSdwanSigSecurityFeatureProfiles(offset: int = None, limit: int = None, referenceCount: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit
    if referenceCount is not None:
        final_kwargs['referenceCount'] = referenceCount

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSigSecurityFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSigSecurityFeatureProfileByProfileId')
def GetSdwanSigSecurityFeatureProfileByProfileId(sigSecurityId: str, references: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sigSecurityId is not None:
        final_kwargs['sigSecurityId'] = sigSecurityId
    if references is not None:
        final_kwargs['references'] = references

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSigSecurityFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSigSecurityProfileParcel_1')
def GetSigSecurityProfileParcel_1(sigSecurityId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sigSecurityId is not None:
        final_kwargs['sigSecurityId'] = sigSecurityId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSigSecurityProfileParcel_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetSigSecurityProfileParcel_1'])

@register('GetSigSecurityProfileParcelByParcelId_1')
def GetSigSecurityProfileParcelByParcelId_1(sigSecurityId: str, sigSecurityProfileParcelId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if sigSecurityId is not None:
        final_kwargs['sigSecurityId'] = sigSecurityId
    if sigSecurityProfileParcelId is not None:
        final_kwargs['sigSecurityProfileParcelId'] = sigSecurityProfileParcelId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSigSecurityProfileParcelByParcelId_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['GetSigSecurityProfileParcelByParcelId_1'])

@register('GetSdwanSystemFeatureProfiles')
def GetSdwanSystemFeatureProfiles(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSystemFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSystemAaaParcelSchemaBySchemaType')
def GetSdwanSystemAaaParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSystemAaaParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSystemBannerParcelSchemaBySchemaType')
def GetSdwanSystemBannerParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSystemBannerParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSystemBasicFeatureSchemaBySchemaType')
def GetSdwanSystemBasicFeatureSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSystemBasicFeatureSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSystemBfdParcelSchemaBySchemaType')
def GetSdwanSystemBfdParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSystemBfdParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCedgeSystemGlobalParcelSchemaBySchemaType')
def GetCedgeSystemGlobalParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCedgeSystemGlobalParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSystemLoggingParcelSchemaBySchemaType')
def GetSdwanSystemLoggingParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSystemLoggingParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCedgeSystemMrfParcelSchemaBySchemaType')
def GetCedgeSystemMrfParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCedgeSystemMrfParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSystemNtpParcelSchemaBySchemaType')
def GetSdwanSystemNtpParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSystemNtpParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSystemOmpParcelSchemaBySchemaType')
def GetSdwanSystemOmpParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSystemOmpParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSystemSnmpParcelSchemaBySchemaType')
def GetSdwanSystemSnmpParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSystemSnmpParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanSystemFeatureProfileByProfileId')
def GetSdwanSystemFeatureProfileByProfileId(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanSystemFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetAaaProfileParcelForSystem')
def GetAaaProfileParcelForSystem(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetAaaProfileParcelForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetAaaProfileParcelByParcelIdForSystem')
def GetAaaProfileParcelByParcelIdForSystem(systemId: str, aaaId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if aaaId is not None:
        final_kwargs['aaaId'] = aaaId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetAaaProfileParcelByParcelIdForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetBannerProfileParcelForSystem')
def GetBannerProfileParcelForSystem(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetBannerProfileParcelForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetBannerProfileParcelByParcelIdForSystem')
def GetBannerProfileParcelByParcelIdForSystem(systemId: str, bannerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if bannerId is not None:
        final_kwargs['bannerId'] = bannerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetBannerProfileParcelByParcelIdForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetBasicProfileFeatureForSystem')
def GetBasicProfileFeatureForSystem(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetBasicProfileFeatureForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetBasicProfileFeatureByFeatureIdForSystem')
def GetBasicProfileFeatureByFeatureIdForSystem(systemId: str, basicId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if basicId is not None:
        final_kwargs['basicId'] = basicId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetBasicProfileFeatureByFeatureIdForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetBfdProfileParcelForSystem')
def GetBfdProfileParcelForSystem(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetBfdProfileParcelForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetBfdProfileParcelByParcelIdForSystem')
def GetBfdProfileParcelByParcelIdForSystem(systemId: str, bfdId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if bfdId is not None:
        final_kwargs['bfdId'] = bfdId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetBfdProfileParcelByParcelIdForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGlobalProfileParcelForSystem')
def GetGlobalProfileParcelForSystem(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGlobalProfileParcelForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGlobalProfileParcelByParcelIdForSystem')
def GetGlobalProfileParcelByParcelIdForSystem(systemId: str, globalId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if globalId is not None:
        final_kwargs['globalId'] = globalId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGlobalProfileParcelByParcelIdForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLoggingProfileParcelForSystem')
def GetLoggingProfileParcelForSystem(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLoggingProfileParcelForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetLoggingProfileParcelByParcelIdForSystem')
def GetLoggingProfileParcelByParcelIdForSystem(systemId: str, loggingId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if loggingId is not None:
        final_kwargs['loggingId'] = loggingId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetLoggingProfileParcelByParcelIdForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetMrfProfileParcelForSystem')
def GetMrfProfileParcelForSystem(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetMrfProfileParcelForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetMrfProfileParcelByParcelIdForSystem')
def GetMrfProfileParcelByParcelIdForSystem(systemId: str, mrfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if mrfId is not None:
        final_kwargs['mrfId'] = mrfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetMrfProfileParcelByParcelIdForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNtpProfileParcelForSystem')
def GetNtpProfileParcelForSystem(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNtpProfileParcelForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetNtpProfileParcelByParcelIdForSystem')
def GetNtpProfileParcelByParcelIdForSystem(systemId: str, ntpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if ntpId is not None:
        final_kwargs['ntpId'] = ntpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetNtpProfileParcelByParcelIdForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetOmpProfileParcelForSystem')
def GetOmpProfileParcelForSystem(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetOmpProfileParcelForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetOmpProfileParcelByParcelIdForSystem')
def GetOmpProfileParcelByParcelIdForSystem(systemId: str, ompId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if ompId is not None:
        final_kwargs['ompId'] = ompId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetOmpProfileParcelByParcelIdForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSecurityForSystem')
def GetSecurityForSystem(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSecurityForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSecurityBySecurityIdForSystem')
def GetSecurityBySecurityIdForSystem(systemId: str, securityId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if securityId is not None:
        final_kwargs['securityId'] = securityId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSecurityBySecurityIdForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSnmpProfileParcelForSystem')
def GetSnmpProfileParcelForSystem(systemId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSnmpProfileParcelForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSnmpProfileParcelByParcelIdForSystem')
def GetSnmpProfileParcelByParcelIdForSystem(systemId: str, snmpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if systemId is not None:
        final_kwargs['systemId'] = systemId
    if snmpId is not None:
        final_kwargs['snmpId'] = snmpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSnmpProfileParcelByParcelIdForSystem

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportFeatureProfiles')
def GetSdwanTransportFeatureProfiles(offset: int = None, limit: int = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if offset is not None:
        final_kwargs['offset'] = offset
    if limit is not None:
        final_kwargs['limit'] = limit

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportFeatureProfiles

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportCellularControllerParcelSchemaBySchemaType')
def GetSdwanTransportCellularControllerParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportCellularControllerParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportCellularProfileParcelSchemaBySchemaType')
def GetSdwanTransportCellularProfileParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportCellularProfileParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportIpv6TrackerParcelSchemaBySchemaType')
def GetSdwanTransportIpv6TrackerParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportIpv6TrackerParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCedgeTransportIpv6TrackerGroupParcelSchemaBySchemaType')
def GetCedgeTransportIpv6TrackerGroupParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCedgeTransportIpv6TrackerGroupParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySch')
def GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySch(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportManagementVpnInterfaceEthernetParcelSchemaBySch

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportManagementVpnParcelSchemaBySchemaType')
def GetSdwanTransportManagementVpnParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportManagementVpnParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportRoutingBgpParcelSchemaBySchemaType')
def GetSdwanTransportRoutingBgpParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportRoutingBgpParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCedgeTransportT1e1controllerParcelSchemaBySchemaType')
def GetCedgeTransportT1e1controllerParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCedgeTransportT1e1controllerParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportTrackerParcelSchemaBySchemaType')
def GetSdwanTransportTrackerParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportTrackerParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCedgeTransportTrackerGroupParcelSchemaBySchemaType')
def GetCedgeTransportTrackerGroupParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCedgeTransportTrackerGroupParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportWanVpnCellularInterfaceParcelSchemaBySchema')
def GetSdwanTransportWanVpnCellularInterfaceParcelSchemaBySchema(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportWanVpnCellularInterfaceParcelSchemaBySchema

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema')
def GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportWanVpnInterfaceEthernetParcelSchemaBySchema

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCedgeTransportWanVpnInterfaceGreParcelSchemaBySchema')
def GetCedgeTransportWanVpnInterfaceGreParcelSchemaBySchema(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCedgeTransportWanVpnInterfaceGreParcelSchemaBySchema

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getSdwanProfileParcelSchema_1')
def getSdwanProfileParcelSchema_1(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getSdwanProfileParcelSchema_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getSdwanProfileParcelSchema_1'])

@register('GetCedgeTransportWanVpnInterfaceSerialParcelSchemaBySchema')
def GetCedgeTransportWanVpnInterfaceSerialParcelSchemaBySchema(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCedgeTransportWanVpnInterfaceSerialParcelSchemaBySchema

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportWanVpnParcelSchemaBySchemaType')
def GetSdwanTransportWanVpnParcelSchemaBySchemaType(schemaType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if schemaType is not None:
        final_kwargs['schemaType'] = schemaType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportWanVpnParcelSchemaBySchemaType

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetSdwanTransportFeatureProfileByProfileId')
def GetSdwanTransportFeatureProfileByProfileId(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetSdwanTransportFeatureProfileByProfileId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularControllerProfileParcelForTransport')
def GetCellularControllerProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularControllerProfileParcelByParcelIdForTransport')
def GetCellularControllerProfileParcelByParcelIdForTransport(transportId: str, cellularControllerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularControllerId is not None:
        final_kwargs['cellularControllerId'] = cellularControllerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularControllerAssociatedCellularProfileParcelsForTranspor')
def GetCellularControllerAssociatedCellularProfileParcelsForTranspor_1(transportId: str, cellularControllerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularControllerId is not None:
        final_kwargs['cellularControllerId'] = cellularControllerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerAssociatedCellularProfileParcelsForTranspor_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularControllerAssociatedCellularProfileParcelByParcelIdFo')
def GetCellularControllerAssociatedCellularProfileParcelByParcelIdFo_1(transportId: str, cellularControllerId: str, cellularProfileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularControllerId is not None:
        final_kwargs['cellularControllerId'] = cellularControllerId
    if cellularProfileId is not None:
        final_kwargs['cellularProfileId'] = cellularProfileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerAssociatedCellularProfileParcelByParcelIdFo_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularControllerAssociatedGpsParcelsForTransport')
def GetCellularControllerAssociatedGpsParcelsForTransport(transportId: str, cellularControllerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularControllerId is not None:
        final_kwargs['cellularControllerId'] = cellularControllerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerAssociatedGpsParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularControllerAssociatedGpsParcelByParcelIdForTransport')
def GetCellularControllerAssociatedGpsParcelByParcelIdForTransport(transportId: str, cellularControllerId: str, gpsId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularControllerId is not None:
        final_kwargs['cellularControllerId'] = cellularControllerId
    if gpsId is not None:
        final_kwargs['gpsId'] = gpsId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularControllerAssociatedGpsParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularProfileProfileParcelForTransport')
def GetCellularProfileProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularProfileProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetCellularProfileProfileParcelByParcelIdForTransport')
def GetCellularProfileProfileParcelByParcelIdForTransport(transportId: str, cellularProfileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if cellularProfileId is not None:
        final_kwargs['cellularProfileId'] = cellularProfileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetCellularProfileProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetEsimCellularControllerProfileFeatureForTransport')
def GetEsimCellularControllerProfileFeatureForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetEsimCellularControllerProfileFeatureForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetEsimCellularControllerProfileFeatureByFeatureIdForTransport')
def GetEsimCellularControllerProfileFeatureByFeatureIdForTransport(transportId: str, esimCellularControllerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if esimCellularControllerId is not None:
        final_kwargs['esimCellularControllerId'] = esimCellularControllerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetEsimCellularControllerProfileFeatureByFeatureIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetEsimCellularProfileProfileFeatureForTransport')
def GetEsimCellularProfileProfileFeatureForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetEsimCellularProfileProfileFeatureForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetEsimCellularProfileByFeatureIdForTransport')
def GetEsimCellularProfileByFeatureIdForTransport(transportId: str, esimCellularProfileId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if esimCellularProfileId is not None:
        final_kwargs['esimCellularProfileId'] = esimCellularProfileId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetEsimCellularProfileByFeatureIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGpsProfileParcelForTransport')
def GetGpsProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGpsProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetGpsProfileParcelByParcelIdForTransport')
def GetGpsProfileParcelByParcelIdForTransport(transportId: str, gpsId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if gpsId is not None:
        final_kwargs['gpsId'] = gpsId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetGpsProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetIpv6TrackerProfileParcelForTransport')
def GetIpv6TrackerProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetIpv6TrackerProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetIpv6TrackerProfileParcelByParcelIdForTransport')
def GetIpv6TrackerProfileParcelByParcelIdForTransport(transportId: str, ipv6_trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if ipv6_trackerId is not None:
        final_kwargs['ipv6-trackerId'] = ipv6_trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetIpv6TrackerProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetIpv6TrackerGroupProfileParcelForTransport')
def GetIpv6TrackerGroupProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetIpv6TrackerGroupProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetIpv6TrackerGroupProfileParcelByParcelIdForTransport')
def GetIpv6TrackerGroupProfileParcelByParcelIdForTransport(transportId: str, ipv6_trackergroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if ipv6_trackergroupId is not None:
        final_kwargs['ipv6-trackergroupId'] = ipv6_trackergroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetIpv6TrackerGroupProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetManagementVpnProfileParcelForTransport')
def GetManagementVpnProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetManagementVpnProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetManagementVpnProfileParcelByParcelIdForTransport')
def GetManagementVpnProfileParcelByParcelIdForTransport(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetManagementVpnProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetInterfaceEthernetParcelsForTransportManagementVpn')
def GetInterfaceEthernetParcelsForTransportManagementVpn(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetInterfaceEthernetParcelsForTransportManagementVpn

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport')
def GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport(transportId: str, vpnId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetManagementVpnInterfaceEthernetParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingBgpProfileParcelForTransport')
def GetRoutingBgpProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingBgpProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingBgpProfileParcelByParcelIdForTransport')
def GetRoutingBgpProfileParcelByParcelIdForTransport(transportId: str, bgpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if bgpId is not None:
        final_kwargs['bgpId'] = bgpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingBgpProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfProfileParcelForTransport')
def GetRoutingOspfProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfProfileParcelByParcelIdForTransport')
def GetRoutingOspfProfileParcelByParcelIdForTransport(transportId: str, ospfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if ospfId is not None:
        final_kwargs['ospfId'] = ospfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfv3Ipv4AfProfileParcelForTransport')
def GetRoutingOspfv3Ipv4AfProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfv3Ipv4AfProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfv3Ipv4AfProfileParcelByParcelIdForTransport')
def GetRoutingOspfv3Ipv4AfProfileParcelByParcelIdForTransport(transportId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfv3Ipv4AfProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfv3Ipv6AfProfileParcelForTransport')
def GetRoutingOspfv3Ipv6AfProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfv3Ipv6AfProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetRoutingOspfv3Ipv6AfProfileParcelByParcelIdForTransport')
def GetRoutingOspfv3Ipv6AfProfileParcelByParcelIdForTransport(transportId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetRoutingOspfv3Ipv6AfProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetT1e1controllerProfileParcelForTransport')
def GetT1e1controllerProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetT1e1controllerProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetT1e1controllerProfileParcelByParcelIdForTransport')
def GetT1e1controllerProfileParcelByParcelIdForTransport(transportId: str, t1e1controllerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if t1e1controllerId is not None:
        final_kwargs['t1e1controllerId'] = t1e1controllerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetT1e1controllerProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTrackerProfileParcelForTransport')
def GetTrackerProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTrackerProfileParcelByParcelIdForTransport')
def GetTrackerProfileParcelByParcelIdForTransport(transportId: str, trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if trackerId is not None:
        final_kwargs['trackerId'] = trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTrackerGroupProfileParcelForTransport')
def GetTrackerGroupProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerGroupProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTrackerGroupProfileParcelByParcelIdForTransport')
def GetTrackerGroupProfileParcelByParcelIdForTransport(transportId: str, trackergroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if trackergroupId is not None:
        final_kwargs['trackergroupId'] = trackergroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTrackerGroupProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnProfileParcelForTransport')
def GetWanVpnProfileParcelForTransport(transportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnProfileParcelForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnProfileParcelByParcelIdForTransport')
def GetWanVpnProfileParcelByParcelIdForTransport(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnProfileParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetInterfaceCellularParcelsForTransportWanVpn')
def GetInterfaceCellularParcelsForTransportWanVpn(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetInterfaceCellularParcelsForTransportWanVpn

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceCellularAssociatedIpv6TrackerParcelsForTranspo')
def GetWanVpnInterfaceCellularAssociatedIpv6TrackerParcelsForTranspo(transportId: str, vpnId: str, cellularId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceCellularAssociatedIpv6TrackerParcelsForTranspo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceCellularAssociatedIpv6TrackerParcelByParcelIdF')
def GetWanVpnInterfaceCellularAssociatedIpv6TrackerParcelByParcelIdF(transportId: str, vpnId: str, cellularId: str, ipv6_trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId
    if ipv6_trackerId is not None:
        final_kwargs['ipv6-trackerId'] = ipv6_trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceCellularAssociatedIpv6TrackerParcelByParcelIdF

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceCellularAssociatedIpv6TrackerGroupParcelsForTr')
def GetWanVpnInterfaceCellularAssociatedIpv6TrackerGroupParcelsForTr(transportId: str, vpnId: str, cellularId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceCellularAssociatedIpv6TrackerGroupParcelsForTr

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceCellularAssociatedIpv6TrackerGroupParcelByParc')
def GetWanVpnInterfaceCellularAssociatedIpv6TrackerGroupParcelByParc(transportId: str, vpnId: str, cellularId: str, ipv6_trackergroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId
    if ipv6_trackergroupId is not None:
        final_kwargs['ipv6-trackergroupId'] = ipv6_trackergroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceCellularAssociatedIpv6TrackerGroupParcelByParc

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceCellularAssociatedTrackerParcelsForTransport')
def GetWanVpnInterfaceCellularAssociatedTrackerParcelsForTransport(transportId: str, vpnId: str, cellularId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceCellularAssociatedTrackerParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceCellularAssociatedTrackerParcelByParcelIdForTr')
def GetWanVpnInterfaceCellularAssociatedTrackerParcelByParcelIdForTr(transportId: str, vpnId: str, cellularId: str, trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId
    if trackerId is not None:
        final_kwargs['trackerId'] = trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceCellularAssociatedTrackerParcelByParcelIdForTr

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceCellularAssociatedTrackerGroupParcelsForTransp')
def GetWanVpnInterfaceCellularAssociatedTrackerGroupParcelsForTransp(transportId: str, vpnId: str, cellularId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceCellularAssociatedTrackerGroupParcelsForTransp

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceCellularAssociatedTrackerGroupParcelByParcelId')
def GetWanVpnInterfaceCellularAssociatedTrackerGroupParcelByParcelId(transportId: str, vpnId: str, cellularId: str, trackerGroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if cellularId is not None:
        final_kwargs['cellularId'] = cellularId
    if trackerGroupId is not None:
        final_kwargs['trackerGroupId'] = trackerGroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceCellularAssociatedTrackerGroupParcelByParcelId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceCellularParcelByParcelIdForTransport')
def GetWanVpnInterfaceCellularParcelByParcelIdForTransport(transportId: str, vpnId: str, intfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if intfId is not None:
        final_kwargs['intfId'] = intfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceCellularParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetInterfaceEthernetParcelsForTransportWanVpn')
def GetInterfaceEthernetParcelsForTransportWanVpn(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetInterfaceEthernetParcelsForTransportWanVpn

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceEthernetParcelByParcelIdForTransport')
def GetWanVpnInterfaceEthernetParcelByParcelIdForTransport(transportId: str, vpnId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceEthernetParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceEthernetAssociatedIpv6TrackerParcelsForTranspo')
def GetWanVpnInterfaceEthernetAssociatedIpv6TrackerParcelsForTranspo(transportId: str, vpnId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceEthernetAssociatedIpv6TrackerParcelsForTranspo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceEthernetAssociatedIpv6TrackerParcelByParcelIdF')
def GetWanVpnInterfaceEthernetAssociatedIpv6TrackerParcelByParcelIdF(transportId: str, vpnId: str, ethernetId: str, ipv6_trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId
    if ipv6_trackerId is not None:
        final_kwargs['ipv6-trackerId'] = ipv6_trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceEthernetAssociatedIpv6TrackerParcelByParcelIdF

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceEthernetAssociatedIpv6TrackerGroupParcelsForTr')
def GetWanVpnInterfaceEthernetAssociatedIpv6TrackerGroupParcelsForTr(transportId: str, vpnId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceEthernetAssociatedIpv6TrackerGroupParcelsForTr

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceEthernetAssociatedIpv6TrackerGroupParcelByParc')
def GetWanVpnInterfaceEthernetAssociatedIpv6TrackerGroupParcelByParc(transportId: str, vpnId: str, ethernetId: str, ipv6_trackergroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId
    if ipv6_trackergroupId is not None:
        final_kwargs['ipv6-trackergroupId'] = ipv6_trackergroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceEthernetAssociatedIpv6TrackerGroupParcelByParc

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport')
def GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport(transportId: str, vpnId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceEthernetAssociatedTrackerParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTr')
def GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTr(transportId: str, vpnId: str, ethernetId: str, trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId
    if trackerId is not None:
        final_kwargs['trackerId'] = trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceEthernetAssociatedTrackerParcelByParcelIdForTr

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceEthernetAssociatedTrackerGroupParcelsForTransp')
def GetWanVpnInterfaceEthernetAssociatedTrackerGroupParcelsForTransp(transportId: str, vpnId: str, ethernetId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceEthernetAssociatedTrackerGroupParcelsForTransp

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceEthernetAssociatedTrackerGroupParcelByParcelId')
def GetWanVpnInterfaceEthernetAssociatedTrackerGroupParcelByParcelId(transportId: str, vpnId: str, ethernetId: str, trackergroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ethernetId is not None:
        final_kwargs['ethernetId'] = ethernetId
    if trackergroupId is not None:
        final_kwargs['trackergroupId'] = trackergroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceEthernetAssociatedTrackerGroupParcelByParcelId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetInterfaceGreParcelsForTransportWanVpn')
def GetInterfaceGreParcelsForTransportWanVpn(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetInterfaceGreParcelsForTransportWanVpn

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceGreParcelByParcelIdForTransport')
def GetWanVpnInterfaceGreParcelByParcelIdForTransport(transportId: str, vpnId: str, greId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if greId is not None:
        final_kwargs['greId'] = greId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceGreParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceGreAssociatedTrackerParcelsForTransport')
def GetWanVpnInterfaceGreAssociatedTrackerParcelsForTransport(transportId: str, vpnId: str, greId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if greId is not None:
        final_kwargs['greId'] = greId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceGreAssociatedTrackerParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceGreAssociatedTrackerParcelByParcelIdForTranspo')
def GetWanVpnInterfaceGreAssociatedTrackerParcelByParcelIdForTranspo(transportId: str, vpnId: str, greId: str, trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if greId is not None:
        final_kwargs['greId'] = greId
    if trackerId is not None:
        final_kwargs['trackerId'] = trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceGreAssociatedTrackerParcelByParcelIdForTranspo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getListOfProfileParcels_1')
def getListOfProfileParcels_1(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListOfProfileParcels_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getListOfProfileParcels_1'])

@register('getProfileParcelByParcelId_1')
def getProfileParcelByParcelId_1(transportId: str, vpnId: str, ipsecId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ipsecId is not None:
        final_kwargs['ipsecId'] = ipsecId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getProfileParcelByParcelId_1

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

# alias → easier for LLM
register('1')(globals()['getProfileParcelByParcelId_1'])

@register('GetWanVpnInterfaceIpsecAssociatedTrackerParcelsForTransport')
def GetWanVpnInterfaceIpsecAssociatedTrackerParcelsForTransport(transportId: str, vpnId: str, ipsecId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ipsecId is not None:
        final_kwargs['ipsecId'] = ipsecId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceIpsecAssociatedTrackerParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceIpsecAssociatedTrackerParcelByParcelIdForTrans')
def GetWanVpnInterfaceIpsecAssociatedTrackerParcelByParcelIdForTrans(transportId: str, vpnId: str, ipsecId: str, trackerId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ipsecId is not None:
        final_kwargs['ipsecId'] = ipsecId
    if trackerId is not None:
        final_kwargs['trackerId'] = trackerId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceIpsecAssociatedTrackerParcelByParcelIdForTrans

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetInterfaceSerialParcelsForTransportWanVpn')
def GetInterfaceSerialParcelsForTransportWanVpn(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetInterfaceSerialParcelsForTransportWanVpn

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnInterfaceSerialParcelByParcelIdForTransport')
def GetWanVpnInterfaceSerialParcelByParcelIdForTransport(transportId: str, vpnId: str, serialId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if serialId is not None:
        final_kwargs['serialId'] = serialId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnInterfaceSerialParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnAssociatedRoutingBgpParcelsForTransport')
def GetWanVpnAssociatedRoutingBgpParcelsForTransport(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnAssociatedRoutingBgpParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnAssociatedRoutingBgpParcelByParcelIdForTransport')
def GetWanVpnAssociatedRoutingBgpParcelByParcelIdForTransport(transportId: str, vpnId: str, bgpId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if bgpId is not None:
        final_kwargs['bgpId'] = bgpId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnAssociatedRoutingBgpParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnAssociatedRoutingOspfParcelsForTransport')
def GetWanVpnAssociatedRoutingOspfParcelsForTransport(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnAssociatedRoutingOspfParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnAssociatedRoutingOspfParcelByParcelIdForTransport')
def GetWanVpnAssociatedRoutingOspfParcelByParcelIdForTransport(transportId: str, vpnId: str, ospfId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ospfId is not None:
        final_kwargs['ospfId'] = ospfId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnAssociatedRoutingOspfParcelByParcelIdForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnAssociatedRoutingOspfv3IPv4AfParcelsForTransport')
def GetWanVpnAssociatedRoutingOspfv3IPv4AfParcelsForTransport(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnAssociatedRoutingOspfv3IPv4AfParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnAssociatedRoutingOspfv3IPv4AfParcelByParcelIdForTranspo')
def GetWanVpnAssociatedRoutingOspfv3IPv4AfParcelByParcelIdForTranspo(transportId: str, vpnId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnAssociatedRoutingOspfv3IPv4AfParcelByParcelIdForTranspo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnAssociatedRoutingOspfv3IPv6AfParcelsForTransport')
def GetWanVpnAssociatedRoutingOspfv3IPv6AfParcelsForTransport(transportId: str, vpnId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnAssociatedRoutingOspfv3IPv6AfParcelsForTransport

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetWanVpnAssociatedRoutingOspfv3IPv6AfParcelByParcelIdForTranspo')
def GetWanVpnAssociatedRoutingOspfv3IPv6AfParcelByParcelIdForTranspo(transportId: str, vpnId: str, ospfv3Id: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if transportId is not None:
        final_kwargs['transportId'] = transportId
    if vpnId is not None:
        final_kwargs['vpnId'] = vpnId
    if ospfv3Id is not None:
        final_kwargs['ospfv3Id'] = ospfv3Id

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetWanVpnAssociatedRoutingOspfv3IPv6AfParcelByParcelIdForTranspo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getMSLADevices')
def getMSLADevices():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getMSLADevices

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getLicenseByUuid')
def getLicenseByUuid(uuid: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if uuid is not None:
        final_kwargs['uuid'] = uuid

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getLicenseByUuid

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetPolicyGroupBySolution')
def GetPolicyGroupBySolution(solution: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if solution is not None:
        final_kwargs['solution'] = solution

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetPolicyGroupBySolution

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetPolicyGroup')
def GetPolicyGroup(policyGroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyGroupId is not None:
        final_kwargs['policyGroupId'] = policyGroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetPolicyGroup

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetPolicyGroupAssociation')
def GetPolicyGroupAssociation(policyGroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyGroupId is not None:
        final_kwargs['policyGroupId'] = policyGroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetPolicyGroupAssociation

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyGroupDeviceVariables')
def getPolicyGroupDeviceVariables(policyGroupId: str, device_id: str = None, suggestions: bool = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyGroupId is not None:
        final_kwargs['policyGroupId'] = policyGroupId
    if device_id is not None:
        final_kwargs['device-id'] = device_id
    if suggestions is not None:
        final_kwargs['suggestions'] = suggestions

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyGroupDeviceVariables

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyGroupDeviceVariablesSchema')
def getPolicyGroupDeviceVariablesSchema(policyGroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyGroupId is not None:
        final_kwargs['policyGroupId'] = policyGroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyGroupDeviceVariablesSchema

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllReportTemplates')
def getAllReportTemplates():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllReportTemplates

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('downloadReportPreviewFile')
def downloadReportPreviewFile(templateType: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if templateType is not None:
        final_kwargs['templateType'] = templateType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.downloadReportPreviewFile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getReportTemplateById')
def getReportTemplateById(reportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if reportId is not None:
        final_kwargs['reportId'] = reportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getReportTemplateById

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllReportTasksByReportId')
def getAllReportTasksByReportId(reportId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if reportId is not None:
        final_kwargs['reportId'] = reportId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllReportTasksByReportId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('downloadReportDataFile')
def downloadReportDataFile(reportId: str, taskId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if reportId is not None:
        final_kwargs['reportId'] = reportId
    if taskId is not None:
        final_kwargs['taskId'] = taskId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.downloadReportDataFile

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUrlForSdoIdentityService')
def getUrlForSdoIdentityService():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUrlForSdoIdentityService

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAllAccounts')
def getAllAccounts():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAllAccounts

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getRatePlansByAcctId')
def getRatePlansByAcctId(accountId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountId is not None:
        final_kwargs['accountId'] = accountId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getRatePlansByAcctId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getProvidersInfo')
def getProvidersInfo():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getProvidersInfo

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCommPlansByAcctId')
def getCommPlansByAcctId(accountId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountId is not None:
        final_kwargs['accountId'] = accountId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCommPlansByAcctId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getProviderCredentialsByAccountId')
def getProviderCredentialsByAccountId(accountId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if accountId is not None:
        final_kwargs['accountId'] = accountId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getProviderCredentialsByAccountId

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDeviceDataUsage')
def getDeviceDataUsage(deviceUUID: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if deviceUUID is not None:
        final_kwargs['deviceUUID'] = deviceUUID

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDeviceDataUsage

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('serviceChainMapping')
def serviceChainMapping():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.serviceChainMapping

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getDevicesForTemplate')
def getDevicesForTemplate(templateId: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if templateId is not None:
        final_kwargs['templateId'] = templateId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getDevicesForTemplate

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('license')
def license(virtual_account_id: str, licenseType: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if virtual_account_id is not None:
        final_kwargs['virtual_account_id'] = virtual_account_id
    if licenseType is not None:
        final_kwargs['licenseType'] = licenseType

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.license

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getUserSettings')
def getUserSettings():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getUserSettings

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTopologyGroupBySolution')
def GetTopologyGroupBySolution(solution: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if solution is not None:
        final_kwargs['solution'] = solution

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTopologyGroupBySolution

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('GetTopologyGroup')
def GetTopologyGroup(topologyGroupId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if topologyGroupId is not None:
        final_kwargs['topologyGroupId'] = topologyGroupId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.GetTopologyGroup

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('generateDeviceInterfaceStatisticsData')
def generateDeviceInterfaceStatisticsData(startDate: str = None, endDate: str = None, scrollId: str = None, count: int = None, timeZone: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if startDate is not None:
        final_kwargs['startDate'] = startDate
    if endDate is not None:
        final_kwargs['endDate'] = endDate
    if scrollId is not None:
        final_kwargs['scrollId'] = scrollId
    if count is not None:
        final_kwargs['count'] = count
    if timeZone is not None:
        final_kwargs['timeZone'] = timeZone

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.generateDeviceInterfaceStatisticsData

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getCountWithInterfaceStatistics')
def getCountWithInterfaceStatistics(startDate: str, endDate: str, timeZone: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if startDate is not None:
        final_kwargs['startDate'] = startDate
    if endDate is not None:
        final_kwargs['endDate'] = endDate
    if timeZone is not None:
        final_kwargs['timeZone'] = timeZone

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getCountWithInterfaceStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getStatDataFieldsByInterfaceStatistics')
def getStatDataFieldsByInterfaceStatistics():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getStatDataFieldsByInterfaceStatistics

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWaniRecommendations')
def getWaniRecommendations(siteId: str = None):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if siteId is not None:
        final_kwargs['siteId'] = siteId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWaniRecommendations

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getAppliedWaniRecommendations')
def getAppliedWaniRecommendations():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getAppliedWaniRecommendations

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getListActivationStatus')
def getListActivationStatus(listType: str, listId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if listType is not None:
        final_kwargs['listType'] = listType
    if listId is not None:
        final_kwargs['listId'] = listId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getListActivationStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getPolicyActivationStatus')
def getPolicyActivationStatus(policyType: str, policyId: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if policyType is not None:
        final_kwargs['policyType'] = policyType
    if policyId is not None:
        final_kwargs['policyId'] = policyId

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getPolicyActivationStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('webexAccessCode')
def webexAccessCode():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.webexAccessCode

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('getWebexDataCentersSyncStatus')
def getWebexDataCentersSyncStatus():
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.getWebexDataCentersSyncStatus

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)

@register('redirectWebexDataCenters')
def redirectWebexDataCenters(code: str):
    """Auto-generated wrapper for clarity and maintainability."""
    # Explicitly build keyword arguments, excluding None values.
    final_kwargs = {}
    if code is not None:
        final_kwargs['code'] = code

    # No body parameter for this function.
    body_payload = None

    client = Sdwan_mngrClient()
    # Use attribute access to trigger __getattr__ for dynamic resolution
    target = client.redirectWebexDataCenters

    if body_payload is not None:
        return target(body=body_payload, **final_kwargs)
    return target(**final_kwargs)
