# app/llm/platform_clients/catalyst_client.py
# Auto-generated – DO NOT EDIT

import dnacentersdk as _sdk
from dnacentersdk import ApiError
import logging
import requests

class CatalystClient:
    """
    Thin wrapper around `DNACenterAPI` with:
      1) fuzzy attribute lookup for all autogenerated SDK methods
      2) custom multi-step & direct‐call helper methods
    """

    def __init__(self, **kwargs):
        # kwargs passed straight to DNACenterAPI (e.g. base_url, username/password, encoded_auth, verify, version)
        self._sdk = _sdk.DNACenterAPI(**kwargs)
        # Capture for “direct” HTTP calls
        self.base_url = kwargs.get("base_url", None)
        # DNACenterAPI exposes access_token after auth
        self.token = getattr(self._sdk, "access_token", None)

    def __getattr__(self, item):
        # ① direct attr on DNACenterAPI
        if hasattr(self._sdk, item):
            return getattr(self._sdk, item)

        # ② sub‐clients (devices, sites, wireless, etc.)
        for name in dir(self._sdk):
            if name.startswith('_'):
                continue
            sub = getattr(self._sdk, name)
            if hasattr(sub, item):
                return getattr(sub, item)

        raise AttributeError(f"{self.__class__.__name__} has no attribute {item!r}")

    # ───── Generated methods above; custom helpers below ───────────────────

    def get_all_devices(self):
        if not self._sdk:
            logging.error("DNACenterAPI client not initialized.")
            return []
        try:
            devs = self._sdk.devices.get_device_list()
            return getattr(devs, "response", devs)
        except ApiError as e:
            logging.error(f"API Error retrieving devices: {e}")
            return []
        except Exception as ex:
            logging.error(f"Unknown error retrieving devices: {ex}")
            return []

    def get_device_by_id(self, device_id: str):
        if not self._sdk:
            logging.error("DNACenterAPI client not initialized.")
            return None
        try:
            return self._sdk.devices.get_device_by_id(id=device_id)
        except ApiError as e:
            logging.error(f"API Error retrieving device {device_id}: {e}")
            return None
        except Exception as ex:
            logging.error(f"Unknown error retrieving device {device_id}: {ex}")
            return None

    def run_cli_command(self, device_id: str, command: str):
        if not self._sdk:
            return {"error": "DNACenterAPI client not initialized."}
        try:
            payload = {"commands": [command], "deviceUuids": [device_id]}
            resp = self._sdk.command_runner.run_read_only_commands_on_devices(payload=payload)
            return {"message": "Command accepted. Check status with taskId.", "data": resp}
        except Exception as e:
            logging.error(f"Error running CLI command: {e}")
            return {"error": str(e)}

    def get_task_status_by_id(self, task_id: str):
        if not self._sdk:
            return {"error": "DNACenterAPI client not initialized."}
        try:
            return self._sdk.task.get_task_by_id(task_id=task_id)
        except ApiError as e:
            logging.error(f"API Error retrieving task {task_id}: {e}")
            return {"error": str(e)}
        except Exception as ex:
            logging.error(f"Unknown error retrieving task {task_id}: {ex}")
            return {"error": str(ex)}

    def fetch_command_output_by_file_id(self, file_id: str):
        try:
            url = f"/dna/intent/api/v1/file/{file_id}"
            return self._sdk.custom_caller.call_api("GET", url)
        except ApiError as e:
            return {"error": f"Failed to retrieve file: {e}"}

    def get_all_sites(self):
        if not self._sdk:
            return {"error": "DNACenterAPI client not initialized."}
        try:
            resp = self._sdk.sites.get_site()
            return resp.get("response", [])
        except ApiError as e:
            logging.error(f"API Error retrieving sites: {e}")
            return {"error": str(e)}
        except Exception as ex:
            logging.error(f"Unknown error retrieving sites: {ex}")
            return {"error": str(ex)}

    def get_all_ssids(self):
        if not self._sdk:
            return {"error": "DNACenterAPI client not initialized."}
        try:
            return self._sdk.wireless.get_enterprise_ssid()
        except ApiError as e:
            logging.error(f"API Error retrieving SSIDs: {e}")
            return {"error": str(e)}
        except Exception as ex:
            logging.error(f"Unknown error retrieving SSIDs: {ex}")
            return {"error": str(ex)}

    def get_site_by_name_v1(self, site_name: str):
        if not (self._sdk or self.token or self.base_url):
            return {"error": "Client not initialized with SDK or token."}
        url = f"{self.base_url}/dna/intent/api/v1/site"
        headers = {
            "Accept": "application/json",
            "X-Auth-Token": self.token
        }
        params = {"name": site_name}
        try:
            r = requests.get(url, headers=headers, params=params, timeout=30, verify=False)
            r.raise_for_status()
            return r.json().get("response", r.json())
        except requests.RequestException as e:
            logging.error(f"Request error retrieving site '{site_name}': {e}")
            return {"error": str(e)}

    def get_catalyst_system_info(self):
        if not self._sdk:
            return {"error": "DNACenterAPI client not initialized."}
        try:
            resp = self._sdk.custom_caller.call_api("GET", "/dna/intent/api/v1/nodes-config")
            return resp.get("response", {})
        except ApiError as e:
            logging.error(f"API Error retrieving system info: {e}")
            return {"error": str(e)}

    def get_dnac_packages_summary(self):
        if not self._sdk:
            return {"error": "DNACenterAPI client not initialized."}
        try:
            resp = self._sdk.custom_caller.call_api("GET", "/dna/intent/api/v1/dnac-packages")
            return resp.get("response", [])
        except ApiError as e:
            logging.error(f"API Error retrieving packages summary: {e}")
            return {"error": str(e)}

    def get_all_interfaces(self):
        if not self._sdk:
            return {"error": "DNACenterAPI client not initialized."}
        try:
            resp = self._sdk.custom_caller.call_api("GET", "/dna/intent/api/v1/interface")
            return resp.get("response", [])
        except Exception as e:
            logging.error(f"Error retrieving interfaces: {e}")
            return {"error": str(e)}

    def get_device_interfaces(self, device_id: str):
        if not self._sdk:
            return {"error": "DNACenterAPI client not initialized."}
        try:
            endpoint = f"/dna/intent/api/v1/interface/network-device/{device_id}"
            resp = self._sdk.custom_caller.call_api("GET", endpoint)
            return resp.get("response", [])
        except Exception as e:
            logging.error(f"Error retrieving interfaces for device {device_id}: {e}")
            return {"error": str(e)}

    def get_interfaces_by_ip(self, ip_address: str):
        if not self._sdk:
            return {"error": "DNACenterAPI client not initialized."}
        endpoint = f"/dna/intent/api/v1/interface/ip-address/{ip_address}"
        try:
            resp = self._sdk.custom_caller.call_api("GET", endpoint)
            return resp.get("response", [])
        except ApiError as e:
            code = getattr(e, "status_code", None)
            msg = str(e)
            if code == 404:
                err = f"404 Not Found: IP '{ip_address}' not in DNAC inventory."
            elif code == 401:
                err = "401 Unauthorized: Invalid or expired token."
            else:
                err = f"API Error ({code}): {msg}"
            logging.error(err)
            return {"error": err}
        except Exception as ex:
            logging.error(f"Unknown error retrieving interfaces for IP {ip_address}: {ex}")
            return {"error": str(ex)}

    def initiate_path_trace(self, source_ip: str, destination_ip: str):
        if not self._sdk:
            return {"error": "DNACenterAPI client not initialized."}
        try:
            payload = {"sourceIP": source_ip, "destIP": destination_ip}
            return self._sdk.custom_caller.call_api(
                "POST", "/dna/intent/api/v1/flow-analysis", json=payload
            )
        except Exception as e:
            logging.error(f"Error initiating path trace: {e}")
            return {"error": str(e)}

    def get_path_trace_result(self, flow_analysis_id: str):
        if not self._sdk:
            return {"error": "DNACenterAPI client not initialized."}
        if not flow_analysis_id:
            return {"error": "Flow Analysis ID must be provided."}
        try:
            endpoint = f"/dna/intent/api/v1/flow-analysis/{flow_analysis_id}"
            return self._sdk.custom_caller.call_api("GET", endpoint)
        except Exception as e:
            logging.error(f"Error retrieving path trace result: {e}")
            return {"error": str(e)}

    def get_device_list_direct(self):
        if not (self._sdk or self.token or self.base_url):
            return {"error": "Client not initialized."}
        url = f"{self.base_url}/dna/intent/api/v1/network-device"
        headers = {"Accept": "application/json", "X-Auth-Token": self.token}
        try:
            r = requests.get(url, headers=headers, timeout=30, verify=False)
            r.raise_for_status()
            return r.json().get("response", r.json())
        except Exception as e:
            logging.error(f"Error retrieving device list: {e}")
            return {"error": str(e)}

    def get_device_detail_direct(self, identifier: str, search_by: str):
        if not (self._sdk or self.token or self.base_url):
            return {"error": "Client not initialized."}
        url = f"{self.base_url}/dna/intent/api/v1/device-detail"
        headers = {"Accept": "application/json", "X-Auth-Token": self.token}
        params = {"identifier": identifier, "searchBy": search_by}
        try:
            r = requests.get(url, headers=headers, params=params, timeout=30, verify=False)
            r.raise_for_status()
            return r.json().get("response", r.json())
        except Exception as e:
            logging.error(f"Error retrieving device detail: {e}")
            return {"error": str(e)}

    def get_device_detail_by_name(self, device_name: str):
        return self.get_device_detail_direct(identifier="nwDeviceName", search_by=device_name)

    def get_device_detail_by_mac(self, mac_address: str):
        return self.get_device_detail_direct(identifier="macAddress", search_by=mac_address)

    def get_all_devices_by_site(self, site_id: str):
        if not (self._sdk or self.token or self.base_url):
            return {"error": "Client not initialized."}
        url = f"{self.base_url}/dna/intent/api/v1/network-device/site/{site_id}"
        headers = {"Accept": "application/json", "X-Auth-Token": self.token}
        try:
            r = requests.get(url, headers=headers, timeout=30, verify=False)
            r.raise_for_status()
            return r.json().get("response", r.json())
        except Exception as e:
            logging.error(f"Error retrieving devices by site '{site_id}': {e}")
            return {"error": str(e)}
