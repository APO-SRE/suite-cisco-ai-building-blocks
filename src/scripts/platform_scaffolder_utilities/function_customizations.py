#!/usr/bin/env python3
#src/scripts/platform_scaffolder_utilities/function_customizations.py
"""
Function-specific customizations for platform functions.

This module contains custom logic that should be injected into specific functions
when they are generated by the scaffolder.
"""

def get_function_customization(platform: str, function_name: str) -> dict:
    """
    Get custom code to inject for a specific function.
    
    Args:
        platform: Platform name (e.g., 'sdwan_mngr')
        function_name: Function name (e.g., 'getActiveAlarms')
        
    Returns:
        Dict with:
            - 'imports': List of import statements to add
            - 'pre_kwargs': Code to inject before building kwargs
            - 'post_kwargs': Code to inject after building kwargs but before the call
    """
    customizations = {
        'sdwan_mngr': {
            'getActiveAlarms': {
                'imports': ['from datetime import datetime, timedelta'],
                'pre_kwargs': [],
                'post_kwargs': [
                    "    # If no dates provided, default to last 24 hours",
                    "    if 'startDate' not in final_kwargs and 'endDate' not in final_kwargs:",
                    "        final_kwargs['endDate'] = datetime.now().strftime('%Y-%m-%dT%H:%M:%S')",
                    "        final_kwargs['startDate'] = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%dT%H:%M:%S')",
                    "    # If no count provided, default to 1000",
                    "    if 'count' not in final_kwargs:",
                    "        final_kwargs['count'] = 1000",
                    "",
                ]
            }
        }
    }
    
    platform_customs = customizations.get(platform, {})
    return platform_customs.get(function_name, {
        'imports': [],
        'pre_kwargs': [],
        'post_kwargs': []
    })


def get_client_customization(platform: str) -> dict:
    """
    Get custom code to inject into the client for specific platforms.
    
    Args:
        platform: Platform name (e.g., 'sdwan_mngr')
        
    Returns:
        Dict with custom client code sections
    """
    if platform == 'sdwan_mngr':
        return {
            'imports': ['from datetime import datetime, timedelta'],
            'resolve_customization': '''
        # Special handling for getActiveAlarms to add default dates
        if name == 'getActiveAlarms' and op_info.get('use_direct_api', False):
            def active_alarms_wrapper(**kwargs):
                # If no dates provided, default to last 24 hours
                if 'startDate' not in kwargs and 'endDate' not in kwargs:
                    kwargs['endDate'] = datetime.now().strftime('%Y-%m-%dT%H:%M:%S')
                    kwargs['startDate'] = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%dT%H:%M:%S')
                return self._make_rest_api_call(op_info, **kwargs)
            return active_alarms_wrapper
'''
        }
    return {
        'imports': [],
        'resolve_customization': ''
    }